// CuNNy 4x12 BLUR
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x12-BLUR-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F((LUMA_mul * texelFetch(LUMA_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0), 0)).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(3.160e-02, -7.305e-03, 8.496e-01, 8.519e-04) * s0_0_0;
	r1 += V4(-1.845e-02, 4.788e-03, -4.872e-01, 3.103e-02) * s0_0_0;
	r2 += V4(1.762e-02, -4.926e-03, 9.843e-03, 8.769e-03) * s0_0_0;
	r0 += V4(-1.803e-01, 6.563e-03, -8.454e-01, 4.529e-01) * s0_0_1;
	r1 += V4(2.026e-02, -2.673e-02, 7.172e-01, 2.959e-01) * s0_0_1;
	r2 += V4(-1.520e-02, -3.973e-01, -8.697e-03, -1.415e-02) * s0_0_1;
	r0 += V4(-3.244e-02, -2.441e-03, -1.740e-02, -4.246e-01) * s0_0_2;
	r1 += V4(9.795e-01, 2.948e-02, -2.529e-01, 6.604e-02) * s0_0_2;
	r2 += V4(-1.047e-02, -2.160e-02, -3.076e-02, 2.204e-03) * s0_0_2;
	r0 += V4(2.006e-02, 2.388e-02, 3.782e-02, 1.627e-02) * s0_1_0;
	r1 += V4(2.138e-03, -1.200e-02, 3.098e-01, 1.197e-01) * s0_1_0;
	r2 += V4(-7.657e-02, 1.217e-02, -1.374e-02, -3.236e-02) * s0_1_0;
	r0 += V4(4.127e-01, 8.851e-01, -2.943e-02, -7.813e-02) * s0_1_1;
	r1 += V4(-1.629e-02, -9.004e-01, -3.403e-01, -7.731e-01) * s0_1_1;
	r2 += V4(-7.054e-01, 1.374e-03, -3.470e-01, -8.927e-01) * s0_1_1;
	r0 += V4(-7.272e-02, 1.321e-02, 7.334e-03, -1.047e-01) * s0_1_2;
	r1 += V4(5.849e-03, 9.091e-01, 1.710e-02, 1.427e-01) * s0_1_2;
	r2 += V4(-1.581e-02, 3.957e-01, 4.296e-01, -2.212e-02) * s0_1_2;
	r0 += V4(-1.096e-01, -2.252e-02, 1.826e-03, -2.927e-02) * s0_2_0;
	r1 += V4(-1.463e-04, 8.154e-04, 2.054e-01, 3.180e-02) * s0_2_0;
	r2 += V4(6.754e-02, 2.068e-03, -5.338e-02, 2.275e-02) * s0_2_0;
	r0 += V4(-4.850e-02, -8.848e-01, -5.558e-03, 1.218e-02) * s0_2_1;
	r1 += V4(-8.069e-03, -5.297e-02, -3.975e-01, 2.335e-02) * s0_2_1;
	r2 += V4(7.222e-01, 1.748e-02, 3.324e-02, 9.085e-01) * s0_2_1;
	r0 += V4(1.297e-02, -1.205e-02, 1.106e-03, 3.227e-02) * s0_2_2;
	r1 += V4(-8.711e-03, 4.851e-02, 2.261e-01, -8.004e-03) * s0_2_2;
	r2 += V4(3.188e-02, -8.789e-03, -6.309e-03, 2.020e-02) * s0_2_2;
	r0 += V4(5.215e-04, 3.120e-03, 3.306e-04, 9.941e-04);
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-9.434e-01, 1.566e-03, -4.565e-03, -8.875e-05);
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(6.878e-03, -1.508e-03, 1.919e-02, 2.432e-04);
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BLUR-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((in_mul * texelFetch(in_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-1.654e-02, -1.165e-01, -4.547e-02, -9.066e-02, 1.504e-02, -2.677e-02, 1.250e-01, 1.608e-01, 1.195e-02, -7.440e-03, 6.112e-02, 5.275e-02, 1.979e-02, 1.893e-02, -2.340e-01, 1.699e-01) * s0_0_0;
	r1 += M4(-2.545e-01, 3.081e-01, 2.909e-01, -1.902e-01, 1.054e-01, 3.280e-01, 1.412e-01, -5.293e-01, 5.674e-02, -8.297e-03, 7.934e-02, -8.709e-02, 1.548e-01, -1.892e-01, -2.098e-01, 1.206e-01) * s0_0_0;
	r2 += M4(1.990e-02, 5.807e-02, 1.306e-01, 1.601e-01, 9.202e-03, 1.225e-02, -2.979e-01, 1.788e-01, -2.909e-02, -5.419e-04, 4.864e-02, 7.280e-03, -3.650e-01, -5.477e-02, 1.269e-01, 1.469e-02) * s0_0_0;
	r0 += M4(-2.553e-01, -6.202e-02, 3.148e-02, -1.847e-01, -1.000e+00, 4.277e-02, -1.000e+00, -1.000e+00, 2.045e-02, 9.810e-03, 8.327e-02, -2.034e-02, -6.275e-02, -2.722e-02, -9.907e-02, -1.566e-01) * s0_0_1;
	r1 += M4(-3.530e-01, -5.661e-01, 3.945e-01, -2.644e-01, 5.905e-02, 1.710e-01, 5.369e-02, 4.922e-01, -8.834e-02, -2.136e-01, 8.959e-02, -8.628e-02, -7.418e-02, -1.104e-01, 1.763e-01, 1.976e-01) * s0_0_1;
	r2 += M4(3.556e-02, -3.583e-02, 2.639e-01, -3.389e-01, -2.973e-01, -3.029e-02, 9.855e-01, -7.468e-02, 1.155e-01, 2.463e-02, 1.825e-02, 9.499e-02, -2.006e-01, -4.690e-02, 4.654e-02, -8.957e-02) * s0_0_1;
	r0 += M4(-1.397e-01, 7.916e-03, -5.344e-01, 9.204e-02, -4.436e-02, 1.637e-01, -1.121e-01, 1.204e-01, 2.408e-02, 3.496e-03, 1.829e-01, -7.074e-04, -1.511e-02, 7.747e-03, 3.960e-02, -4.479e-02) * s0_0_2;
	r1 += M4(2.675e-01, 4.127e-01, 4.384e-02, 2.390e-01, 1.300e-01, -2.881e-01, -8.122e-02, 5.425e-02, 3.045e-02, -4.127e-01, 1.522e-02, -6.955e-02, -5.529e-02, 7.847e-02, 7.147e-02, 3.497e-02) * s0_0_2;
	r2 += M4(-8.355e-02, 1.151e-02, -9.206e-02, 2.549e-03, 7.210e-02, -1.503e-02, -4.297e-02, -1.000e+00, -8.301e-03, 3.167e-02, 4.823e-02, 6.602e-02, -1.699e-01, -2.629e-02, 2.356e-02, 3.637e-02) * s0_0_2;
	r0 += M4(-1.617e-01, 5.579e-02, 3.844e-01, -3.650e-02, -1.132e-02, -2.536e-02, -1.430e-01, -9.421e-02, 7.165e-04, 2.266e-02, 6.034e-02, -5.361e-02, -1.750e-01, 9.523e-02, 5.031e-01, 1.422e-01) * s0_1_0;
	r1 += M4(-2.184e-01, -1.340e-01, 3.110e-01, 1.292e-01, -2.419e-01, 2.627e-01, 4.652e-02, 1.328e-02, -8.712e-02, 8.916e-02, 5.310e-02, 1.106e-01, -2.054e-01, 2.863e-01, 5.265e-01, 3.513e-01) * s0_1_0;
	r2 += M4(-2.984e-01, -2.508e-02, -1.433e-01, 1.727e-02, -1.007e-01, 1.489e-02, 2.618e-03, 1.490e-01, -4.527e-02, 2.968e-03, -2.526e-02, 1.246e-02, 2.743e-01, 2.964e-02, 4.520e-02, -2.405e-01) * s0_1_0;
	r0 += M4(4.697e-01, 3.716e-01, 4.328e-01, 8.567e-02, -5.672e-02, 3.643e-01, 6.238e-02, 5.952e-02, 2.161e-02, 1.896e-02, -3.254e-01, -3.279e-01, -1.908e-01, 8.229e-02, 6.913e-02, -1.948e-02) * s0_1_1;
	r1 += M4(1.000e+00, 2.215e-01, -5.001e-02, 4.852e-01, 1.184e-01, -4.443e-01, -6.949e-02, -1.627e-01, -2.535e-02, -1.411e-01, -3.662e-01, 2.563e-02, 1.579e-01, -4.321e-01, -5.116e-02, 1.686e-01) * s0_1_1;
	r2 += M4(-4.639e-01, -1.625e-01, -2.413e-01, -4.600e-01, -1.000e+00, -1.013e-01, 5.078e-02, 8.632e-02, -1.465e-01, -2.731e-02, 1.871e-01, -1.461e-01, 4.068e-01, 4.752e-02, 7.259e-02, 1.893e-01) * s0_1_1;
	r0 += M4(9.205e-02, -1.731e-01, 1.405e-01, 1.125e-02, -4.802e-03, -3.479e-01, -8.516e-02, 2.054e-02, -4.211e-02, 1.118e-01, -4.384e-01, 2.833e-01, 4.289e-02, -3.829e-02, 1.719e-01, -7.899e-02) * s0_1_2;
	r1 += M4(8.686e-02, 1.122e-01, -1.614e-01, 1.227e-01, -8.551e-02, 1.483e-01, -1.269e-02, 6.518e-02, 1.932e-01, 1.941e-01, -4.597e-03, 5.744e-02, -7.168e-02, 7.666e-06, -3.115e-02, -1.617e-01) * s0_1_2;
	r2 += M4(6.059e-01, 1.056e-01, 5.075e-02, 3.350e-01, 2.722e-01, 9.119e-02, -1.219e-02, -2.066e-01, 1.030e-01, -1.318e-02, -1.291e-01, -2.624e-01, -1.053e-01, -2.477e-02, 5.352e-03, -2.607e-01) * s0_1_2;
	r0 += M4(-3.292e-02, 3.741e-02, 1.279e-01, -2.145e-01, 2.405e-02, -1.630e-02, 7.919e-03, 1.874e-02, -1.018e-02, 3.143e-03, 4.468e-02, 2.643e-02, 2.752e-02, 9.087e-02, -9.516e-01, -1.000e+00) * s0_2_0;
	r1 += M4(-9.165e-02, 1.120e-01, -8.863e-02, 5.194e-02, 4.998e-02, -5.397e-02, 7.895e-02, 1.675e-02, 9.317e-02, 3.322e-02, 4.945e-02, -1.002e-01, 1.189e-02, -1.456e-01, 5.018e-02, -3.864e-01) * s0_2_0;
	r2 += M4(-4.277e-02, -5.287e-02, -1.637e-02, -7.423e-02, -3.783e-02, 1.926e-02, -2.835e-02, -1.510e-01, 7.619e-02, 1.480e-03, -3.662e-02, 6.773e-02, 1.000e+00, 2.067e-02, -2.827e-02, 4.342e-01) * s0_2_0;
	r0 += M4(2.032e-02, -5.125e-02, -4.753e-01, 1.358e-01, -4.208e-02, 8.502e-02, 7.798e-02, 1.366e-02, 3.904e-03, 2.819e-03, -1.000e+00, -1.000e+00, 1.640e-01, -1.275e-01, 1.547e-02, 2.115e-01) * s0_2_1;
	r1 += M4(-2.889e-01, 6.582e-02, -4.355e-01, -2.085e-01, -1.971e-03, 1.218e-01, 5.960e-02, 2.293e-03, 1.224e-03, -1.489e-01, -2.154e-01, 2.397e-01, -1.107e-01, -5.218e-01, -1.026e-01, -3.482e-01) * s0_2_1;
	r2 += M4(7.331e-02, -3.815e-02, 1.184e-01, 9.120e-01, 2.559e-02, -2.934e-02, 1.462e-02, 9.061e-02, -3.400e-01, 1.701e-02, 4.104e-02, 7.065e-02, -3.856e-02, 1.587e-01, -1.778e-01, -1.000e+00) * s0_2_1;
	r0 += M4(-5.201e-02, -1.590e-01, -2.555e-01, 3.186e-01, 2.680e-02, -4.477e-02, 2.148e-02, -7.152e-02, -1.712e-02, 6.247e-01, -6.845e-02, 2.008e-01, -2.467e-02, 9.303e-02, -1.397e-02, 1.545e-02) * s0_2_2;
	r1 += M4(-2.083e-01, -3.111e-01, -1.477e-01, -8.037e-02, 5.943e-02, -5.647e-02, -5.537e-03, 2.668e-02, -2.447e-01, -1.000e+00, -1.300e-01, -9.705e-04, 8.654e-02, -9.154e-02, -4.304e-02, 3.132e-02) * s0_2_2;
	r2 += M4(3.844e-02, 1.338e-01, 3.972e-02, -6.467e-01, 2.228e-02, 5.665e-03, -4.078e-03, 2.896e-02, -1.000e+00, -1.000e+00, -2.679e-03, -1.000e+00, 1.162e-01, -1.119e-02, -1.411e-02, 2.901e-01) * s0_2_2;
	r0 += M4(-2.038e-01, -1.569e-01, -3.759e-02, -1.801e-01, 5.932e-02, -1.372e-01, 1.899e-01, 2.669e-01, 2.089e-02, -2.947e-03, 1.816e-01, 1.125e-01, -6.386e-03, 1.660e-02, -2.614e-02, 1.010e-01) * s1_0_0;
	r1 += M4(5.918e-01, -1.341e-01, -2.596e-02, -3.621e-02, 1.780e-01, -1.279e-02, -7.334e-02, -1.000e+00, 7.066e-02, 9.035e-02, 5.998e-02, -4.646e-02, 1.080e-01, 5.019e-02, -1.404e-01, 3.758e-02) * s1_0_0;
	r2 += M4(4.167e-01, 2.119e-01, 5.303e-02, 4.789e-01, 2.635e-01, -1.334e-02, -2.458e-01, 2.179e-01, 8.933e-02, -1.187e-02, -5.070e-02, -8.675e-02, 2.518e-01, 1.056e-02, -3.562e-02, 3.498e-02) * s1_0_0;
	r0 += M4(3.673e-01, 1.135e-01, 1.609e-01, -5.705e-01, 1.066e-02, -2.506e-01, -5.773e-01, -4.246e-02, 3.839e-02, 4.093e-02, 6.163e-02, 3.088e-01, 1.161e-01, -1.844e-03, -1.461e-01, 1.158e-02) * s1_0_1;
	r1 += M4(4.990e-01, 5.508e-01, 9.469e-02, -3.688e-01, 1.276e-01, -1.000e+00, -2.056e-01, -2.461e-01, 3.623e-02, -3.099e-01, -1.348e-01, -1.235e-01, 5.200e-02, -2.928e-01, 6.886e-02, 4.296e-02) * s1_0_1;
	r2 += M4(-4.841e-01, -8.069e-02, -8.244e-02, 3.079e-01, -1.806e-02, 2.500e-02, 1.265e-01, 4.385e-01, 1.003e-01, -2.248e-03, 3.580e-02, 2.129e-02, -1.504e-01, 2.386e-02, -1.383e-01, -4.608e-02) * s1_0_1;
	r0 += M4(-6.830e-02, 1.845e-01, -8.788e-01, -1.328e-01, 2.817e-02, -4.572e-02, -9.177e-02, 1.898e-01, 6.117e-02, -3.516e-03, -1.820e-01, 1.579e-01, 1.746e-02, 2.460e-03, 3.690e-01, -1.777e-01) * s1_0_2;
	r1 += M4(9.724e-03, 6.333e-01, -2.133e-01, 3.493e-01, 1.915e-01, 1.816e-01, -1.323e-02, -4.983e-02, 8.928e-02, -6.173e-02, -1.958e-01, -1.123e-02, -1.628e-01, 1.891e-01, 1.150e-01, -1.055e-01) * s1_0_2;
	r2 += M4(2.366e-03, -1.021e-01, 4.179e-02, -2.720e-01, -1.811e-02, -7.701e-03, 9.509e-04, -2.026e-01, 1.221e-01, 4.280e-03, 3.567e-02, 1.564e-02, -5.969e-02, -2.689e-03, 5.695e-02, 6.030e-02) * s1_0_2;
	r0 += M4(3.694e-01, -2.943e-02, -2.838e-01, 1.000e+00, -5.522e-02, 4.193e-02, 2.047e-01, -4.054e-01, 2.199e-02, 1.768e-02, 2.354e-01, -1.977e-02, 2.142e-02, 3.983e-02, -3.869e-01, -1.107e-02) * s1_1_0;
	r1 += M4(-3.435e-01, 3.475e-01, 5.390e-01, 3.474e-01, -4.633e-01, 5.052e-01, 4.697e-01, -8.207e-01, 4.095e-02, -1.120e-01, 1.207e-01, -9.849e-02, -1.372e-01, -4.418e-01, -2.784e-01, 3.833e-01) * s1_1_0;
	r2 += M4(-8.393e-01, 2.838e-01, 8.964e-01, -1.000e+00, -1.000e+00, 4.229e-02, -2.483e-02, 4.367e-02, 2.599e-02, -1.612e-02, 2.231e-02, 6.082e-02, 2.664e-01, -3.903e-02, 1.874e-01, -1.661e-01) * s1_1_0;
	r0 += M4(3.195e-01, 1.761e-01, -1.000e+00, 9.889e-01, -9.146e-02, -1.000e+00, -1.000e+00, -1.000e+00, 8.389e-02, -4.563e-04, 8.233e-02, -1.886e-01, 1.466e-02, -3.578e-01, -1.000e+00, -8.947e-01) * s1_1_1;
	r1 += M4(5.489e-01, 1.000e+00, -6.602e-02, 1.648e-01, -2.772e-01, 4.646e-01, 2.370e-01, 3.800e-01, -4.796e-01, 3.536e-02, 2.229e-01, 1.922e-01, -2.005e-01, -1.572e-01, -4.642e-01, -1.228e-01) * s1_1_1;
	r2 += M4(-8.767e-02, -5.759e-02, -1.809e-01, -4.578e-01, -2.253e-02, 8.776e-01, -1.012e-01, 3.047e-01, -2.100e-01, -3.971e-02, -2.863e-03, 2.653e-01, 1.000e+00, 1.797e-02, 7.384e-02, -5.262e-01) * s1_1_1;
	r0 += M4(-3.782e-02, 2.704e-01, -4.452e-02, -1.176e-01, 2.325e-02, 5.663e-02, 5.154e-02, 3.509e-02, -1.295e-02, 8.640e-03, -5.130e-02, 2.281e-01, -1.258e-02, -4.363e-02, 6.892e-02, -2.799e-01) * s1_1_2;
	r1 += M4(1.585e-01, -8.002e-01, 2.296e-01, 3.629e-01, 7.827e-02, -6.515e-01, 1.214e-01, 2.242e-01, 1.850e-01, -9.542e-02, 2.935e-02, 1.894e-01, -2.270e-01, 1.487e-01, 2.940e-01, -8.861e-02) * s1_1_2;
	r2 += M4(4.366e-01, -8.942e-02, 6.568e-02, -2.893e-01, 1.298e-01, 3.600e-02, 1.646e-02, -9.427e-02, 6.607e-01, 1.723e-02, 8.591e-02, 9.294e-02, -2.781e-01, 1.151e-01, -4.276e-02, 2.714e-01) * s1_1_2;
	r0 += M4(4.432e-01, 1.000e+00, -3.398e-01, 1.000e+00, 2.046e-02, -2.806e-02, 1.308e-01, -1.614e-01, -2.795e-02, -5.047e-03, 2.223e-01, -9.355e-03, -9.614e-03, -5.361e-02, 8.892e-02, 2.092e-01) * s1_2_0;
	r1 += M4(1.000e+00, 1.000e+00, -1.000e+00, 1.000e+00, 6.243e-02, -3.429e-01, 5.460e-03, 6.206e-02, -8.326e-02, 1.538e-01, 9.557e-02, -5.757e-02, -1.866e-02, -3.296e-02, 1.826e-01, 9.072e-02) * s1_2_0;
	r2 += M4(-1.000e+00, -3.559e-01, 3.853e-01, -4.223e-01, -2.745e-01, -4.846e-02, 1.387e-02, -6.970e-02, -1.057e-02, -5.974e-03, -7.928e-03, 6.383e-02, -1.366e-01, 4.281e-02, -2.251e-02, -1.601e-01) * s1_2_0;
	r0 += M4(-3.745e-01, -1.000e+00, -9.790e-01, 7.260e-01, 1.038e-02, -2.248e-01, 2.210e-01, -1.538e-01, 7.593e-02, -2.455e-02, 1.319e-01, -3.050e-02, -8.235e-02, -3.714e-02, 1.083e-01, 3.198e-01) * s1_2_1;
	r1 += M4(6.100e-01, 1.000e+00, 7.579e-01, -1.000e+00, 2.599e-02, -5.959e-01, 1.450e-01, 2.177e-01, -3.436e-02, -1.678e-01, 1.348e-01, 1.713e-01, -1.006e-01, 1.912e-01, -7.418e-02, 5.598e-02) * s1_2_1;
	r2 += M4(6.875e-02, 6.123e-01, 1.314e-01, 1.000e+00, 4.417e-01, 7.270e-02, 3.905e-02, -4.082e-01, 2.095e-01, -1.268e-02, 3.922e-02, -1.459e-01, -1.066e-01, 3.634e-02, -6.113e-02, 1.212e-02) * s1_2_1;
	r0 += M4(-3.055e-03, -4.553e-01, 6.643e-02, 2.628e-01, -3.226e-02, -5.403e-02, -1.995e-01, 1.017e-01, -3.026e-02, 2.074e-02, 2.280e-01, 9.892e-02, 3.229e-02, 2.682e-01, 4.476e-01, -3.360e-01) * s1_2_2;
	r1 += M4(4.591e-01, -2.966e-02, -7.447e-02, 2.143e-01, 2.150e-01, 9.822e-02, -1.430e-02, 4.731e-02, 3.174e-02, -4.371e-02, 6.913e-02, -8.905e-03, -7.425e-02, -2.593e-01, 3.167e-01, 1.947e-01) * s1_2_2;
	r2 += M4(1.908e-01, 5.031e-02, -5.734e-02, 1.342e-02, 2.798e-01, -4.736e-02, 5.216e-02, -1.566e-01, -8.130e-02, -1.689e-03, 1.688e-02, -2.389e-01, -5.548e-01, -3.054e-02, -4.042e-02, 8.881e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.130e-01, 6.643e-02, 1.651e-01, -1.229e-02, 1.140e-01, 6.321e-03, 6.474e-02, -8.499e-02, 7.593e-02, 9.895e-02, -1.149e-01, -1.553e-01, 2.505e-04, -5.185e-02, 4.788e-02, 1.246e-02) * s0_0_0;
	r1 += M4(1.565e-02, -2.981e-01, 1.408e-01, 1.719e-01, 1.167e-01, 3.913e-01, -8.148e-02, 1.400e-01, -4.983e-02, 8.514e-02, -3.330e-01, 5.497e-01, -6.978e-02, 1.103e-01, -5.027e-03, -7.148e-01) * s0_0_0;
	r2 += M4(-5.780e-02, -2.490e-02, 8.754e-02, -2.377e-01, -1.504e-01, -6.883e-03, 2.265e-03, -2.673e-02, -3.595e-01, 2.793e-02, -1.376e-01, -1.141e-01, -3.422e-03, 4.357e-02, 7.294e-02, 3.376e-02) * s0_0_0;
	r0 += M4(1.000e+00, -2.455e-01, -2.373e-02, -3.689e-01, 3.159e-02, 7.124e-02, 1.529e-01, 1.858e-01, -1.153e-01, 1.159e-01, 7.885e-01, -3.973e-01, 6.673e-02, 2.536e-01, -1.000e+00, 5.713e-01) * s0_0_1;
	r1 += M4(3.324e-01, 6.131e-02, -6.631e-01, -5.015e-01, 8.950e-02, -5.992e-01, 1.715e-02, -8.957e-02, -4.439e-01, -4.371e-01, 1.946e-01, 2.630e-01, -3.292e-01, -2.852e-01, -8.699e-01, -1.000e+00) * s0_0_1;
	r2 += M4(5.165e-01, -2.210e-02, -3.431e-01, 3.454e-01, 1.676e-01, -1.508e-02, -2.826e-02, 2.201e-01, -1.968e-01, -1.672e-01, -1.369e-01, -3.056e-01, -1.000e+00, 2.415e-02, -1.000e+00, -2.228e-02) * s0_0_1;
	r0 += M4(-2.529e-01, 3.721e-01, 4.127e-01, 3.609e-03, 2.840e-02, -2.227e-02, -2.996e-02, 3.617e-02, -1.134e-01, 8.726e-02, -6.541e-03, -1.298e-01, 1.449e-01, -3.177e-01, -3.518e-01, 2.658e-02) * s0_0_2;
	r1 += M4(2.737e-01, 3.344e-01, 7.095e-01, 8.198e-01, 1.641e-02, 2.589e-01, -2.828e-01, -1.024e-02, -1.761e-01, -8.340e-01, 2.463e-01, 2.683e-01, -2.320e-01, 1.142e-01, -8.338e-01, -6.856e-01) * s0_0_2;
	r2 += M4(-3.177e-01, -3.264e-02, 5.545e-02, -6.464e-01, 1.810e-02, 3.357e-02, -8.528e-02, -6.838e-02, 3.558e-01, -5.510e-02, 1.224e-01, 3.801e-01, 7.116e-02, -6.878e-03, -6.632e-02, 5.332e-01) * s0_0_2;
	r0 += M4(-1.846e-01, 1.107e-01, -2.728e-01, -1.636e-01, -2.656e-01, 2.439e-01, -3.541e-01, -2.749e-01, 6.519e-02, -6.882e-02, -1.361e-03, 5.258e-01, 1.644e-01, -6.816e-02, 2.296e-01, 6.460e-04) * s0_1_0;
	r1 += M4(1.108e-01, 1.084e-01, 2.740e-01, 4.972e-01, -1.870e-02, -7.055e-02, 4.035e-01, 1.641e-02, 9.687e-01, -2.960e-01, 3.978e-02, -2.680e-01, -1.283e-01, -2.911e-02, -1.669e-01, -4.873e-01) * s0_1_0;
	r2 += M4(-2.243e-01, 4.863e-02, -1.012e-02, 1.373e-01, -4.408e-01, 3.766e-02, 3.604e-01, -9.961e-03, 6.476e-01, -8.619e-02, 2.359e-01, 2.413e-02, 3.459e-02, -8.779e-03, -1.880e-02, -6.567e-02) * s0_1_0;
	r0 += M4(1.705e-01, 4.055e-02, 6.168e-01, 3.623e-01, 2.495e-01, -3.076e-01, -9.867e-02, 4.688e-01, 4.050e-02, -2.754e-01, -7.172e-02, -1.054e-01, -1.064e-01, -1.002e-01, -9.188e-01, -1.000e+00) * s0_1_1;
	r1 += M4(-4.025e-01, 2.121e-01, -4.626e-01, -8.071e-01, -3.291e-01, -2.335e-01, -3.780e-01, -4.290e-01, 4.440e-01, -3.524e-01, 7.444e-02, -2.681e-01, 4.287e-01, -2.720e-02, 6.812e-01, 1.000e+00) * s0_1_1;
	r2 += M4(-2.131e-01, -8.395e-02, -1.719e-02, 6.433e-01, 3.922e-01, -2.654e-02, -1.950e-01, -2.085e-01, -4.106e-02, 3.706e-01, -1.345e-02, 1.080e-01, 2.959e-01, 7.278e-02, -9.165e-02, -7.559e-01) * s0_1_1;
	r0 += M4(-2.751e-01, -6.364e-02, -2.688e-01, -2.920e-01, -5.968e-02, 2.891e-02, -3.821e-02, -2.530e-01, 2.026e-02, -1.180e-01, 7.337e-02, 1.285e-01, 1.502e-01, 2.894e-02, 1.047e-01, 1.630e-01) * s0_1_2;
	r1 += M4(-2.765e-01, -2.047e-01, -2.849e-01, 2.614e-01, -1.905e-01, 1.343e-01, 2.328e-02, 1.448e-01, 9.868e-02, 1.000e+00, -3.456e-01, -5.591e-01, 3.926e-01, 2.484e-02, 1.961e-01, -1.333e-01) * s0_1_2;
	r2 += M4(9.024e-02, 1.051e-01, 1.119e-01, 8.402e-01, -1.503e-01, 2.739e-02, -1.210e-01, 2.652e-01, -2.155e-01, -9.930e-02, 7.452e-02, -1.498e-01, 1.457e-01, -1.473e-01, -1.657e-01, -9.590e-01) * s0_1_2;
	r0 += M4(-6.977e-02, 9.349e-02, -4.564e-02, -1.517e-02, -1.457e-01, -3.613e-02, -1.228e-02, 5.861e-01, 2.817e-03, 1.207e-01, -2.457e-01, 4.269e-02, 4.516e-02, -6.785e-02, 3.036e-02, -1.467e-02) * s0_2_0;
	r1 += M4(-3.837e-02, -2.007e-01, 3.080e-01, 1.870e-01, -2.901e-01, -1.669e-01, -1.756e-02, -3.693e-01, -1.934e-01, 8.609e-02, -2.009e-01, 6.005e-03, -2.535e-02, 1.888e-01, -2.630e-01, -1.051e-01) * s0_2_0;
	r2 += M4(3.890e-01, -2.460e-02, 1.255e-01, -4.464e-01, 3.667e-01, 5.750e-02, 2.129e-01, 1.930e-01, 2.765e-01, 6.767e-02, 4.957e-02, 1.663e-02, -2.417e-01, 7.278e-03, -7.706e-02, 4.578e-01) * s0_2_0;
	r0 += M4(5.534e-02, -2.457e-01, 1.752e-01, 4.720e-01, 3.034e-02, 2.360e-01, -9.548e-02, -8.590e-01, -1.512e-02, 1.499e-01, -1.129e-01, 2.618e-01, 8.986e-03, 1.608e-01, -8.324e-02, -3.682e-01) * s0_2_1;
	r1 += M4(1.489e-01, 9.788e-02, -4.455e-01, -6.386e-01, 4.112e-01, 2.200e-02, -1.466e-01, -2.016e-01, 1.754e-02, 4.968e-01, 1.672e-02, -1.045e-02, -4.688e-02, -1.645e-01, 3.591e-01, 5.176e-01) * s0_2_1;
	r2 += M4(5.707e-02, -1.282e-02, -2.177e-01, -1.668e-01, -1.750e-01, -5.126e-03, 2.298e-01, -1.467e-01, 1.795e-01, -1.289e-01, -3.414e-02, 2.056e-02, -5.741e-02, 4.115e-02, 1.315e-01, 1.001e-01) * s0_2_1;
	r0 += M4(-1.248e-01, 3.618e-02, -3.038e-01, -1.128e-01, 6.302e-02, 5.772e-02, 9.149e-02, -1.815e-02, 1.503e-02, -5.060e-02, 2.821e-01, -1.713e-01, 7.008e-02, 1.646e-02, 2.423e-01, 9.073e-02) * s0_2_2;
	r1 += M4(-1.286e-01, -8.171e-02, 2.397e-01, -5.924e-02, -1.717e-01, 1.798e-01, -1.491e-02, -3.901e-02, -2.547e-01, -4.282e-02, -2.144e-01, -2.231e-01, 1.254e-01, 2.062e-01, -1.658e-01, 5.389e-02) * s0_2_2;
	r2 += M4(-1.113e-01, 8.174e-04, 2.239e-02, -1.244e-01, -2.363e-01, 2.758e-02, 6.588e-02, 1.000e+00, -4.122e-01, 4.780e-02, -1.255e-01, -2.813e-01, 6.667e-02, -1.203e-02, 6.482e-03, 5.641e-03) * s0_2_2;
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BLUR-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv1_mul * texelFetch(conv1_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.003e-02, -1.809e-01, -1.799e-03, 5.235e-02, 5.421e-02, 2.446e-01, 1.025e-01, 7.443e-02, 3.022e-03, 6.242e-03, -3.526e-03, 9.874e-02, -1.441e-02, 1.305e-01, -1.646e-01, 1.109e-01) * s0_0_0;
	r1 += M4(-4.597e-02, -4.307e-02, -2.732e-03, -3.143e-02, 2.134e-01, -2.870e-02, -7.111e-02, 8.237e-02, 8.152e-03, 3.389e-02, 4.814e-03, -6.225e-02, 1.062e-01, 1.231e-01, -1.526e-02, 3.722e-02) * s0_0_0;
	r2 += M4(6.873e-03, 2.911e-02, -2.695e-02, 1.482e-02, -2.782e-01, -8.079e-02, -1.280e-01, -2.178e-01, 2.679e-01, 8.499e-02, -2.122e-01, 1.340e-01, 4.308e-01, -5.860e-03, 1.441e-01, 2.793e-02) * s0_0_0;
	r0 += M4(-2.892e-02, -5.258e-02, 3.162e-02, 2.024e-01, 3.458e-02, -1.304e-03, -1.489e-01, -6.517e-02, -7.864e-03, -9.303e-02, 2.708e-01, 1.313e-02, 2.691e-02, 1.267e-01, 5.392e-02, -1.640e-01) * s0_0_1;
	r1 += M4(-1.056e-02, 3.898e-02, 1.876e-02, 6.198e-02, -2.017e-02, 9.515e-03, 3.205e-02, -6.323e-02, 2.914e-02, 4.776e-02, -3.607e-02, 7.053e-02, 2.591e-02, 4.247e-03, -6.023e-02, 8.259e-03) * s0_0_1;
	r2 += M4(-5.670e-02, 3.621e-03, 2.376e-02, 2.595e-03, -4.482e-01, 2.596e-02, -7.006e-02, -2.818e-02, 4.583e-01, 1.142e-01, -2.484e-01, -1.013e-02, 1.742e-01, -1.001e-01, 2.121e-02, -4.383e-02) * s0_0_1;
	r0 += M4(1.653e-03, 2.502e-02, 5.610e-02, 1.089e-01, -1.403e-02, 1.331e-02, -3.066e-02, 9.265e-02, 1.077e-02, 2.465e-01, 2.359e-02, -1.262e-02, 3.574e-02, 1.063e-01, 4.510e-02, -1.917e-01) * s0_0_2;
	r1 += M4(-1.804e-02, 6.545e-03, 3.735e-03, -3.354e-02, 1.184e-02, 5.414e-02, 1.263e-02, -4.133e-02, -2.742e-02, -1.148e-02, 2.107e-02, 1.069e-01, -1.670e-02, -7.363e-02, -3.928e-04, 7.195e-02) * s0_0_2;
	r2 += M4(-7.811e-02, 2.633e-02, -1.127e-02, 4.964e-02, -1.013e-01, 1.311e-02, -3.157e-02, 2.540e-02, 6.115e-02, -2.940e-02, 5.373e-02, -6.580e-02, 3.185e-01, -1.184e-01, 3.959e-02, -7.470e-03) * s0_0_2;
	r0 += M4(9.685e-02, -1.881e-01, 1.659e-01, -5.952e-02, -2.346e-02, -2.755e-01, -1.102e-01, 7.354e-02, 1.174e-02, -4.736e-01, 5.646e-02, 1.541e-02, -3.692e-02, 7.098e-02, 1.392e-02, 1.166e-02) * s0_1_0;
	r1 += M4(8.835e-02, -2.641e-01, -6.846e-02, 1.081e-01, 6.652e-01, -3.337e-01, -6.455e-02, 2.009e-01, -3.985e-02, -8.891e-02, 2.724e-02, -4.261e-02, 1.097e-01, 6.155e-01, -1.592e-02, -3.879e-02) * s0_1_0;
	r2 += M4(-1.879e-01, -8.363e-02, -1.519e-01, -1.496e-01, 3.577e-01, 1.562e-01, 2.375e-01, 2.598e-02, -3.715e-02, -7.734e-02, -1.396e-01, -5.169e-02, 6.534e-01, 9.805e-02, 2.341e-01, -1.521e-02) * s0_1_0;
	r0 += M4(-6.652e-02, 1.527e-01, 3.700e-02, -9.828e-02, -5.321e-02, -1.431e-01, -9.969e-02, -7.175e-02, 1.186e-01, -8.018e-01, -3.952e-01, 3.699e-01, -7.317e-02, -5.585e-01, -2.545e-01, -2.893e-01) * s0_1_1;
	r1 += M4(-2.300e-01, 7.283e-02, 1.104e-01, -7.504e-01, -2.544e-03, 1.667e-01, 4.277e-03, -1.000e+00, 1.970e-02, 2.283e-01, -3.116e-02, -1.294e-01, -5.534e-03, 4.250e-02, -1.780e-01, -5.937e-01) * s0_1_1;
	r2 += M4(-3.286e-01, -1.116e-01, 4.001e-01, -1.176e-01, 1.636e-01, 2.666e-01, 3.249e-01, 2.033e-02, -1.000e+00, -4.106e-01, -5.877e-01, -1.152e-01, -1.000e+00, -3.358e-01, -3.508e-01, -5.571e-01) * s0_1_1;
	r0 += M4(-5.515e-02, -2.856e-02, 9.508e-02, 9.421e-03, -2.927e-02, -1.910e-02, 1.202e-01, 1.060e-01, 4.935e-02, 1.126e-01, 1.370e-01, 1.425e-02, 3.542e-02, 2.434e-02, -2.108e-01, -9.658e-02) * s0_1_2;
	r1 += M4(7.754e-03, -2.158e-02, 4.011e-02, -2.518e-01, 9.424e-03, -2.735e-02, 3.085e-02, -6.230e-02, 3.540e-02, 1.784e-02, 1.301e-01, 3.366e-02, 2.064e-02, 9.793e-02, 4.900e-03, 3.644e-02) * s0_1_2;
	r2 += M4(-2.160e-01, 1.970e-02, -1.040e-01, -2.087e-02, -1.150e-01, -9.013e-02, -4.051e-02, 1.700e-01, 7.789e-01, -1.900e-01, -8.722e-02, -5.341e-02, 6.066e-01, -1.479e-02, -4.587e-02, -1.389e-01) * s0_1_2;
	r0 += M4(2.026e-01, 5.011e-02, 4.531e-02, -1.026e-01, -1.322e-01, -5.539e-02, -7.816e-02, 1.529e-01, 5.860e-02, -1.387e-01, -6.870e-02, -4.346e-02, 3.037e-02, 1.892e-01, 6.299e-02, -1.681e-01) * s0_2_0;
	r1 += M4(-3.278e-02, -5.707e-01, 6.282e-02, 1.410e-01, -2.719e-02, -1.396e-02, 3.229e-02, 5.311e-02, 2.833e-02, -3.746e-02, -1.386e-02, -9.556e-02, 1.137e-01, 2.618e-01, -2.758e-02, 1.282e-01) * s0_2_0;
	r2 += M4(3.651e-02, 3.904e-02, -1.013e-01, -1.954e-01, -4.903e-01, -8.494e-02, -4.879e-02, 1.546e-01, 3.684e-01, 2.147e-02, 9.038e-02, -2.553e-02, -1.792e-01, 1.788e-02, -1.637e-02, -1.715e-02) * s0_2_0;
	r0 += M4(-8.036e-02, 9.073e-02, -1.334e-01, -3.113e-02, 4.479e-02, 2.449e-02, 2.377e-02, 8.617e-02, 5.819e-02, -1.671e-01, -1.764e-01, -4.553e-02, -1.587e-01, 6.187e-02, -1.094e-01, 5.743e-02) * s0_2_1;
	r1 += M4(-4.624e-02, -2.559e-01, 7.372e-01, -2.451e-02, -2.951e-02, -1.140e-01, 1.883e-02, 2.469e-01, 8.907e-02, 1.243e-01, -1.596e-01, 2.880e-01, 2.973e-02, 1.659e-01, -3.357e-02, -1.184e-01) * s0_2_1;
	r2 += M4(4.336e-01, -1.996e-01, 2.678e-01, 1.151e-01, -5.736e-01, -4.722e-02, -1.735e-01, 1.638e-02, 1.010e-01, -9.047e-02, -9.394e-02, 1.311e-01, 8.295e-01, -2.593e-01, 1.174e-01, 3.443e-02) * s0_2_1;
	r0 += M4(-1.818e-02, 4.574e-03, 2.630e-01, -4.966e-02, 1.182e-02, -1.289e-02, -6.236e-02, 7.315e-02, 1.649e-02, 1.820e-01, 9.299e-02, -2.248e-03, -5.912e-02, 4.202e-02, 4.011e-02, -1.326e-01) * s0_2_2;
	r1 += M4(-2.489e-02, -1.079e-01, 1.322e-01, 1.588e-01, -1.468e-03, 4.236e-02, 3.771e-02, 1.079e-02, 2.988e-02, -9.902e-03, 4.142e-02, 5.776e-02, 6.431e-03, -9.601e-02, -7.494e-02, 1.113e-01) * s0_2_2;
	r2 += M4(-5.293e-01, -1.570e-02, 4.505e-02, -1.996e-02, -1.452e-02, -1.139e-02, 3.653e-02, 5.608e-02, 5.338e-01, -1.168e-01, -2.362e-01, -3.372e-03, -8.043e-02, 2.538e-03, 9.942e-02, -6.165e-02) * s0_2_2;
	r0 += M4(-6.823e-03, -1.730e-01, -7.709e-03, 1.693e-01, -3.497e-02, 1.707e-01, -2.551e-02, 1.007e-01, -3.283e-02, -3.753e-02, 1.715e-02, -1.718e-02, -2.392e-02, 8.454e-02, -8.410e-02, 8.017e-02) * s1_0_0;
	r1 += M4(-1.435e-02, 5.217e-02, -2.446e-02, -9.814e-03, 1.309e-02, 1.071e-01, 6.913e-02, -9.636e-02, -4.491e-02, -3.816e-02, -6.467e-02, 1.799e-02, 9.475e-04, 1.994e-02, -9.767e-03, 1.066e-01) * s1_0_0;
	r2 += M4(-2.396e-01, 1.802e-02, -6.586e-02, -2.393e-02, -1.086e-01, -1.792e-01, 5.639e-02, 5.304e-02, 1.903e-01, -7.044e-02, 2.035e-01, -5.544e-02, 7.033e-02, -4.374e-02, -2.694e-02, 4.860e-02) * s1_0_0;
	r0 += M4(7.761e-03, -2.540e-02, 3.336e-02, 5.330e-02, -4.583e-03, -3.383e-02, 3.211e-02, 6.551e-02, 5.539e-02, 1.387e-01, 7.593e-03, -9.724e-03, 1.344e-03, 5.606e-02, -1.452e-01, 5.377e-02) * s1_0_1;
	r1 += M4(-1.049e-02, 6.016e-02, -1.290e-02, 7.549e-02, 4.089e-02, 1.818e-02, -1.101e-02, -1.142e-01, 3.143e-02, 9.542e-02, -4.213e-02, -1.722e-02, -2.762e-02, -1.524e-02, 2.711e-03, 1.375e-01) * s1_0_1;
	r2 += M4(1.703e-01, 2.729e-01, -2.618e-01, 2.663e-02, -6.055e-02, -5.092e-02, -2.046e-02, -2.879e-02, -5.440e-01, -2.564e-01, 4.035e-01, -2.512e-01, 1.029e-02, -3.388e-02, 1.700e-02, -2.228e-02) * s1_0_1;
	r0 += M4(-5.004e-02, -6.584e-02, 5.746e-02, 1.078e-01, -4.320e-02, 1.316e-01, -1.683e-02, 1.117e-01, 8.901e-02, -1.198e-01, 1.293e-01, -3.704e-02, 5.733e-06, 1.001e-01, -2.347e-01, -6.586e-02) * s1_0_2;
	r1 += M4(-3.985e-02, -3.160e-02, 1.435e-02, 1.132e-03, -3.205e-02, 1.702e-02, 1.379e-02, 1.134e-01, -2.958e-02, 6.076e-02, -6.710e-02, 1.355e-01, 9.450e-03, 5.617e-02, 1.721e-02, 2.232e-02) * s1_0_2;
	r2 += M4(-5.514e-02, -1.267e-01, 9.337e-02, 1.323e-01, 3.127e-01, -8.862e-02, -5.722e-02, 4.916e-02, 7.972e-02, -1.412e-01, 1.455e-01, -1.347e-01, -2.643e-01, 6.859e-02, -7.735e-02, -1.018e-01) * s1_0_2;
	r0 += M4(9.898e-04, -3.021e-01, -1.310e-01, 1.760e-02, -4.145e-02, 2.259e-02, -3.045e-02, -1.252e-01, 3.103e-02, 2.332e-01, 5.590e-02, -7.096e-03, 1.246e-03, 1.747e-01, 4.600e-02, -5.865e-02) * s1_1_0;
	r1 += M4(1.218e-02, 3.009e-02, -1.185e-01, 9.941e-02, -1.040e-01, 1.082e-01, 6.438e-02, -6.809e-02, -7.119e-03, -2.692e-02, -3.381e-02, 1.257e-01, -5.146e-02, -1.663e-01, 3.694e-02, -3.759e-02) * s1_1_0;
	r2 += M4(-1.098e-01, 8.503e-02, 1.216e-01, 1.761e-04, 5.240e-01, -1.141e-01, 3.100e-02, -1.491e-01, -4.637e-01, 5.119e-03, 3.665e-03, 8.181e-02, -1.242e-01, -4.500e-02, -2.003e-01, -3.386e-03) * s1_1_0;
	r0 += M4(5.722e-02, 2.870e-02, -5.481e-02, -2.197e-03, -1.276e-02, 2.396e-01, 8.360e-02, -1.226e-01, 1.594e-01, 4.966e-03, 3.963e-01, -1.871e-01, 2.011e-01, -1.848e-01, -2.664e-03, 2.700e-02) * s1_1_1;
	r1 += M4(-1.923e-03, 1.011e-01, 3.759e-02, 2.687e-01, -3.356e-02, 4.432e-03, 5.720e-02, -1.061e-01, -8.277e-02, -2.963e-01, -1.331e-02, 1.714e-01, 9.761e-02, 4.733e-01, -1.345e-01, 8.255e-02) * s1_1_1;
	r2 += M4(-8.554e-01, -1.188e-01, -2.969e-01, -1.039e-01, 5.048e-01, 8.809e-03, 9.790e-02, -2.021e-02, -1.589e-02, 1.351e-01, -1.145e-01, -1.368e-01, 3.084e-01, 3.555e-01, 1.782e-01, -2.375e-03) * s1_1_1;
	r0 += M4(-9.160e-03, -6.149e-03, -3.449e-02, 1.250e-01, -2.453e-02, 2.195e-01, -1.581e-01, -7.380e-02, 2.177e-02, 1.254e-01, -3.783e-02, -1.632e-01, -3.547e-03, -7.048e-02, -1.024e-01, -6.034e-02) * s1_1_2;
	r1 += M4(6.156e-02, 1.623e-01, 9.642e-02, 1.121e-01, 3.942e-02, 7.879e-02, 3.555e-02, -1.363e-01, -7.279e-02, 3.603e-02, -1.740e-02, -7.330e-02, -2.498e-02, 7.182e-04, -1.557e-02, -1.304e-01) * s1_1_2;
	r2 += M4(-2.266e-01, -1.092e-01, -1.013e-01, 4.472e-02, 2.811e-01, 7.937e-02, 3.984e-02, 5.931e-03, -2.169e-01, 7.850e-02, 2.114e-01, -9.369e-02, -3.549e-01, -5.297e-02, -1.344e-02, -3.000e-02) * s1_1_2;
	r0 += M4(-2.865e-02, -3.320e-02, 1.684e-02, 3.322e-02, -5.457e-02, 1.201e-01, 3.096e-01, -2.622e-01, 5.129e-02, 1.673e-01, 8.104e-02, 6.785e-02, -7.883e-03, 1.372e-01, -3.634e-02, 4.162e-02) * s1_2_0;
	r1 += M4(-9.462e-02, 5.831e-02, -1.294e-01, -8.927e-03, -2.869e-02, 2.175e-01, 3.380e-04, 7.157e-02, 5.108e-03, 1.493e-01, -1.547e-02, 1.352e-01, 4.993e-02, 3.911e-02, -1.134e-02, -6.702e-02) * s1_2_0;
	r2 += M4(-3.468e-01, -8.089e-03, -1.512e-01, 5.383e-02, 6.162e-01, 1.194e-01, -6.878e-02, -1.608e-01, -1.334e-01, -7.187e-03, -2.814e-02, -4.936e-03, 3.430e-01, 3.821e-02, -3.090e-01, -1.234e-01) * s1_2_0;
	r0 += M4(-3.312e-03, -3.390e-03, -2.928e-02, 1.972e-01, 1.679e-02, 2.928e-02, 8.896e-02, -5.525e-01, -2.761e-02, -1.014e-02, 1.075e-01, 5.606e-02, 2.075e-02, 3.188e-01, 1.053e-01, -1.369e-02) * s1_2_1;
	r1 += M4(-1.364e-02, -4.033e-03, -5.561e-03, 5.846e-02, -3.505e-02, -4.053e-02, 4.528e-02, 3.022e-01, 1.099e-01, 2.861e-01, 3.070e-02, -2.636e-01, -5.546e-02, 1.356e-01, -3.695e-02, -1.462e-01) * s1_2_1;
	r2 += M4(-3.131e-01, -1.325e-01, 2.142e-01, 5.361e-02, 3.396e-01, 1.652e-01, 1.825e-01, -1.105e-01, -5.786e-01, -2.088e-01, 1.203e-01, -3.040e-02, -1.000e+00, 3.177e-02, -1.794e-02, -1.505e-02) * s1_2_1;
	r0 += M4(-6.384e-03, -1.973e-01, -1.162e-02, 1.022e-01, -4.361e-02, 1.279e-01, 7.234e-02, 2.778e-02, 2.989e-02, -3.012e-01, 9.134e-02, -7.111e-02, -2.293e-02, 4.436e-02, 2.025e-01, -1.106e-01) * s1_2_2;
	r1 += M4(-9.865e-03, -4.584e-02, -2.914e-02, -3.888e-02, -5.613e-02, -1.137e-01, 1.124e-02, -1.606e-01, 6.252e-03, 4.904e-02, 8.519e-03, 1.203e-01, 4.799e-02, 1.287e-01, 4.483e-03, -1.230e-01) * s1_2_2;
	r2 += M4(-1.671e-01, -2.523e-02, -8.822e-02, 2.542e-02, 4.809e-02, 3.826e-02, 1.161e-01, 1.739e-01, 2.299e-01, -1.234e-01, 1.941e-01, 7.108e-02, -2.930e-01, 2.032e-01, 1.539e-01, -6.403e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(5.025e-02, 8.158e-02, -1.030e-01, -4.029e-02, -7.287e-02, -6.198e-01, 6.138e-02, 8.667e-02, -2.438e-02, -8.724e-02, 1.188e-02, 1.572e-01, -9.007e-03, 4.703e-01, 1.722e-02, 1.456e-01) * s0_0_0;
	r1 += M4(2.730e-03, 4.809e-02, -2.473e-02, 9.552e-02, -1.703e-01, -2.098e-02, 9.402e-02, -7.757e-02, -1.680e-02, 7.451e-02, 3.295e-02, -3.549e-02, 4.937e-02, 1.330e-01, 1.306e-02, 2.053e-01) * s0_0_0;
	r2 += M4(3.392e-01, 1.459e-01, -4.361e-02, 5.262e-02, -9.371e-02, 7.106e-02, 3.216e-02, 2.820e-01, 7.345e-02, 2.618e-02, -4.458e-02, 7.615e-02, 2.244e-01, 1.314e-01, -1.238e-01, 3.226e-02) * s0_0_0;
	r0 += M4(6.413e-02, 4.258e-02, -1.258e-01, -1.937e-01, -1.056e-01, -6.344e-02, -5.519e-02, 2.879e-01, -1.872e-02, 1.176e-01, 7.537e-02, 5.273e-02, -3.150e-02, 4.858e-01, -1.383e-01, -2.101e-03) * s0_0_1;
	r1 += M4(-1.820e-03, -2.698e-02, -6.186e-03, 2.067e-01, 3.252e-02, -3.741e-02, 2.339e-02, -3.911e-01, 1.612e-02, -3.135e-02, -1.416e-02, -2.948e-02, 4.094e-02, 5.481e-02, 2.259e-02, 1.431e-01) * s0_0_1;
	r2 += M4(1.678e-01, -1.918e-01, 7.254e-02, 1.715e-02, -1.665e-01, 1.344e-02, 3.921e-03, 8.474e-02, -7.975e-03, 3.521e-02, -7.765e-02, 4.668e-02, -8.171e-01, 6.564e-02, 4.407e-02, -3.974e-02) * s0_0_1;
	r0 += M4(-8.888e-03, 4.972e-02, -8.674e-02, -8.846e-02, -3.935e-03, 1.359e-02, 8.268e-02, 3.525e-02, 2.091e-03, -3.919e-02, -6.561e-02, 7.774e-02, 5.815e-03, -3.221e-02, -2.490e-01, -7.285e-02) * s0_0_2;
	r1 += M4(2.425e-02, 2.904e-02, -2.316e-03, 1.607e-01, -1.454e-02, 3.641e-03, 7.417e-03, -1.295e-01, 3.544e-03, 4.821e-02, 4.227e-03, -2.945e-02, -3.495e-02, 2.295e-02, 4.977e-03, -2.120e-02) * s0_0_2;
	r2 += M4(2.058e-01, -4.398e-02, 6.238e-02, -4.636e-02, -9.735e-02, -3.894e-02, 3.384e-02, 3.945e-02, -5.367e-02, -4.102e-03, 1.119e-01, 3.882e-02, 1.382e-02, 1.682e-01, 5.506e-02, -1.673e-01) * s0_0_2;
	r0 += M4(4.108e-02, 1.044e-01, -4.380e-02, -7.223e-02, 5.808e-01, 3.459e-01, 1.989e-01, -2.754e-01, -9.812e-02, -3.282e-01, -6.439e-02, 6.913e-02, -1.060e-01, 2.481e-01, -2.608e-01, 2.114e-01) * s0_1_0;
	r1 += M4(2.272e-02, 3.459e-02, 4.146e-02, 2.087e-01, -1.000e+00, -1.000e+00, 5.160e-02, -1.000e+00, -2.136e-01, -7.917e-02, 1.230e-01, -1.214e-01, 6.775e-02, 2.671e-01, -1.333e-01, 4.210e-02) * s0_1_0;
	r2 += M4(1.044e-01, -8.625e-02, -1.215e-01, 7.719e-02, -6.577e-01, -7.390e-02, -3.863e-02, -8.814e-01, 1.579e-01, 1.705e-01, 2.281e-01, 2.218e-01, -4.656e-01, 2.049e-02, -2.480e-01, 8.549e-02) * s0_1_0;
	r0 += M4(-6.103e-03, -3.065e-01, -2.670e-01, 2.371e-02, -4.319e-02, 2.765e-01, 1.533e-01, -1.945e-01, -3.474e-01, 2.259e-01, 2.186e-01, -1.486e-01, -7.547e-02, 1.486e-01, -1.452e-01, 2.072e-01) * s0_1_1;
	r1 += M4(2.448e-03, 4.450e-02, -1.012e-01, 4.439e-01, 9.978e-02, 4.704e-04, 2.372e-01, 1.490e-01, 1.623e-01, -4.628e-01, 1.783e-01, -1.745e-01, 3.460e-02, 3.994e-02, -4.725e-02, 2.454e-01) * s0_1_1;
	r2 += M4(1.136e-01, -2.706e-01, -1.822e-01, 1.910e-01, 1.168e-01, -1.554e-01, -1.958e-01, 6.701e-03, 7.203e-02, -4.941e-02, -5.270e-01, 5.601e-01, 1.003e-01, -5.439e-01, -9.821e-02, -8.123e-02) * s0_1_1;
	r0 += M4(2.027e-02, -3.177e-02, -4.339e-02, 1.057e-01, 1.444e-02, -1.665e-02, 2.106e-02, -1.311e-02, -1.979e-02, 2.341e-01, -1.054e-01, -1.979e-01, 2.738e-02, -3.086e-01, -3.231e-01, -9.174e-02) * s0_1_2;
	r1 += M4(3.424e-02, -7.948e-02, 1.152e-03, 9.014e-02, 7.181e-03, 3.721e-02, 1.830e-02, 6.163e-04, -2.928e-03, -1.767e-02, -2.196e-02, 6.736e-02, 1.695e-02, 1.032e-01, -4.093e-02, 2.336e-01) * s0_1_2;
	r2 += M4(2.996e-01, 2.349e-02, -3.370e-02, 2.700e-02, -5.104e-02, 3.136e-02, 7.477e-03, 4.646e-03, -7.295e-02, 1.665e-01, 4.641e-02, 9.699e-02, -3.923e-01, 2.367e-01, 1.826e-01, -1.291e-01) * s0_1_2;
	r0 += M4(1.727e-02, 5.502e-02, 9.902e-03, -5.677e-02, 7.503e-02, -9.937e-02, -9.544e-02, 1.547e-02, 6.883e-02, 9.280e-02, 5.821e-02, -3.190e-02, 6.799e-02, -1.439e-03, -9.756e-02, 1.404e-01) * s0_2_0;
	r1 += M4(9.731e-03, -2.090e-02, 4.365e-02, 4.346e-02, 6.211e-02, -1.694e-01, -1.655e-02, 2.729e-02, -2.160e-01, -1.192e-01, 7.496e-02, -1.293e-01, 3.790e-02, 5.096e-02, -6.468e-03, -7.033e-02) * s0_2_0;
	r2 += M4(3.189e-01, -1.335e-02, 7.345e-02, 1.552e-02, -2.170e-01, 3.302e-02, -3.773e-03, -1.111e-01, -4.620e-01, -8.459e-03, -2.095e-01, -1.354e-01, -6.510e-01, 1.245e-01, -3.757e-01, -5.846e-02) * s0_2_0;
	r0 += M4(-3.405e-02, -5.356e-02, -2.066e-02, -3.666e-02, 1.675e-02, 8.906e-02, -5.270e-02, -5.071e-02, 2.785e-01, -8.243e-02, 2.276e-01, -2.370e-01, 3.046e-02, -2.018e-01, -4.947e-02, 1.665e-01) * s0_2_1;
	r1 += M4(-1.048e-02, 2.046e-02, -5.529e-02, 2.258e-01, 6.148e-02, -6.092e-02, -2.734e-02, -4.189e-01, 9.202e-02, -6.433e-02, -1.033e-02, -8.369e-02, 1.181e-02, 7.074e-02, 6.005e-02, 4.763e-02) * s0_2_1;
	r2 += M4(9.720e-02, 1.321e-01, -1.464e-01, 6.498e-02, -9.028e-02, -5.772e-02, 1.025e-01, -1.117e-01, -2.539e-01, 3.342e-01, -2.387e-01, -4.687e-01, -2.112e-01, 2.977e-01, -4.543e-01, 1.185e-01) * s0_2_1;
	r0 += M4(-2.055e-02, 1.249e-01, -2.646e-02, -7.339e-02, -5.750e-03, -8.224e-02, -2.365e-03, -3.743e-02, 2.199e-02, -1.854e-02, -1.469e-01, -9.541e-02, 2.060e-02, 1.174e-01, -1.996e-01, 1.364e-02) * s0_2_2;
	r1 += M4(-3.002e-02, -3.486e-04, 1.718e-03, 1.889e-01, -3.761e-03, -2.265e-03, -9.716e-03, -1.355e-01, -8.899e-03, 5.625e-02, -3.387e-02, -4.641e-01, 2.201e-02, -4.650e-02, -5.910e-02, 7.635e-02) * s0_2_2;
	r2 += M4(1.736e-01, -5.778e-02, -8.156e-02, -3.062e-02, -6.511e-02, 7.240e-03, 4.398e-02, -3.557e-02, 3.376e-01, -2.324e-02, 1.111e-01, 7.005e-02, 3.274e-01, 4.559e-02, -1.218e-01, -1.986e-03) * s0_2_2;
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BLUR-conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv2_mul * texelFetch(conv2_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(3.781e-02, -3.195e-03, -1.765e-02, 5.258e-02, -2.618e-02, 7.702e-02, -1.044e-02, 6.001e-02, -8.022e-02, 6.743e-02, -8.834e-02, 1.378e-01, 5.717e-02, 2.627e-02, 5.171e-02, 1.345e-01) * s0_0_0;
	r1 += M4(-1.788e-02, -5.989e-02, -1.020e-02, 2.473e-02, -2.181e-02, 4.906e-02, -1.853e-02, 6.200e-02, 8.793e-02, -3.015e-01, -4.434e-02, 1.146e-02, 4.043e-02, 4.816e-02, -1.157e-02, 4.608e-02) * s0_0_0;
	r2 += M4(6.811e-02, 3.160e-02, 8.060e-02, 1.990e-03, -4.674e-02, 1.938e-02, 9.646e-03, 6.054e-03, 7.544e-02, -1.612e-02, -1.659e-02, 7.082e-02, -1.057e-02, 3.438e-02, 3.396e-02, -4.082e-02) * s0_0_0;
	r0 += M4(5.588e-02, -7.933e-02, 6.049e-03, -5.943e-03, -7.178e-02, -3.574e-02, 8.339e-02, 1.006e-02, -7.336e-02, 1.817e-01, 4.077e-03, -1.383e-01, 3.099e-02, -6.725e-02, 3.613e-02, -1.478e-01) * s0_0_1;
	r1 += M4(9.428e-02, 6.639e-02, 1.772e-01, -2.627e-02, -3.036e-02, 1.562e-01, 2.753e-02, 5.793e-02, -2.928e-02, -2.599e-01, -4.702e-02, 3.213e-02, 4.461e-02, -1.516e-01, 3.081e-02, 2.636e-02) * s0_0_1;
	r2 += M4(2.573e-01, -5.854e-02, 9.354e-02, -1.336e-01, 1.420e-01, 9.142e-02, 1.212e-01, -1.268e-02, -1.036e-02, 5.076e-02, -4.128e-02, -4.202e-02, -5.088e-02, -3.826e-02, -1.329e-01, -3.102e-03) * s0_0_1;
	r0 += M4(2.223e-04, 3.331e-02, 9.019e-02, -4.493e-01, 5.505e-04, 4.869e-02, 9.033e-03, 2.606e-01, 5.044e-02, -8.269e-02, -3.745e-02, 4.580e-02, 4.122e-02, 5.005e-02, -3.533e-02, 4.068e-03) * s0_0_2;
	r1 += M4(-3.214e-02, 5.684e-02, 5.462e-02, 3.708e-03, -2.677e-02, 1.068e-01, 8.716e-02, -5.660e-03, -6.314e-02, -2.987e-01, -2.521e-03, 3.688e-02, 7.099e-03, 4.206e-02, -1.024e-03, -1.325e-02) * s0_0_2;
	r2 += M4(-2.270e-01, 8.557e-02, 2.858e-02, 6.334e-02, 2.996e-02, 8.944e-02, -1.568e-02, 1.112e-02, 9.170e-02, -1.536e-02, 2.006e-02, -2.765e-02, -1.122e-01, 4.859e-03, -4.507e-02, -7.020e-02) * s0_0_2;
	r0 += M4(-4.285e-02, 1.104e-03, -1.071e-02, 5.731e-02, 1.188e-03, 3.525e-01, -6.531e-02, 9.172e-02, -1.246e-01, 1.317e-02, 1.359e-01, 1.519e-01, 1.747e-02, 1.253e-02, 1.003e-02, 3.330e-02) * s0_1_0;
	r1 += M4(3.070e-02, -1.375e-02, -6.810e-02, 7.553e-02, -3.674e-02, 9.766e-03, -2.750e-02, 6.516e-02, 1.789e-01, 1.529e-01, -3.581e-02, -1.393e-01, 6.341e-02, 3.007e-02, -5.505e-02, 3.830e-02) * s0_1_0;
	r2 += M4(-5.589e-02, -2.734e-03, -2.394e-02, 8.910e-03, -9.679e-03, -1.401e-02, 1.367e-01, 1.031e-01, 2.687e-02, -2.338e-02, 1.136e-01, 8.180e-02, -1.406e-02, -3.799e-02, 1.335e-02, -5.870e-02) * s0_1_0;
	r0 += M4(6.973e-01, -6.976e-01, 2.587e-01, -2.031e-02, -1.050e-01, -6.784e-02, -5.110e-02, 2.664e-02, 1.538e-01, -8.447e-02, 2.846e-01, -1.899e-01, 2.703e-01, -1.392e-01, 4.226e-02, 1.955e-01) * s0_1_1;
	r1 += M4(-4.021e-01, -3.265e-01, 1.057e-01, 1.422e-01, -1.730e-01, 3.146e-02, 8.809e-02, 3.096e-01, -1.560e-01, -7.760e-02, -8.474e-02, -2.238e-01, 2.819e-02, -1.821e-01, -2.120e-02, 2.544e-02) * s0_1_1;
	r2 += M4(-4.245e-02, -4.880e-01, -4.651e-01, -3.699e-01, 2.925e-01, 1.446e-01, 2.529e-01, 1.789e-02, 4.854e-01, 1.190e-01, 3.907e-01, 1.998e-01, 4.285e-02, 5.813e-02, -1.600e-01, -1.084e-01) * s0_1_1;
	r0 += M4(3.819e-03, 1.129e-01, -2.182e-01, -2.862e-01, -1.334e-01, -4.350e-02, 2.697e-02, 1.941e-01, -1.153e-01, -4.171e-02, 1.623e-01, -1.629e-01, -5.396e-02, 5.022e-02, -2.499e-02, -1.485e-01) * s0_1_2;
	r1 += M4(1.567e-01, 4.568e-02, 7.026e-02, 1.359e-01, -1.125e-01, 2.318e-02, 6.469e-02, 1.031e-01, 7.018e-02, -2.524e-01, 1.038e-01, -3.583e-01, -1.804e-02, -1.206e-02, 8.372e-03, -1.892e-01) * s0_1_2;
	r2 += M4(2.779e-01, 5.121e-02, -1.912e-01, 4.076e-02, -1.762e-01, 4.750e-02, 3.521e-01, 1.268e-01, -3.685e-03, -7.568e-02, -7.990e-02, 2.109e-02, -1.545e-01, -2.949e-02, -1.792e-01, -3.700e-02) * s0_1_2;
	r0 += M4(4.736e-02, 2.298e-01, 3.578e-02, 3.444e-02, -4.626e-02, 1.634e-01, -6.122e-02, 3.330e-01, 5.705e-02, 6.106e-02, 1.596e-01, -1.714e-01, 1.771e-01, 2.819e-02, 9.510e-02, -3.486e-02) * s0_2_0;
	r1 += M4(1.554e-03, -9.441e-03, 1.788e-02, -6.536e-03, -1.123e-02, 4.683e-02, -4.145e-02, 1.525e-02, -2.752e-02, -1.633e-02, 3.192e-02, -2.685e-02, -7.334e-03, -2.611e-02, -3.531e-02, -6.739e-02) * s0_2_0;
	r2 += M4(4.520e-02, 8.743e-02, 7.725e-02, 2.689e-03, -6.495e-02, -6.010e-02, -5.123e-03, 1.080e-01, 7.269e-02, 1.448e-02, -4.062e-02, -3.607e-02, -5.607e-02, 7.944e-02, -4.382e-02, -1.475e-01) * s0_2_0;
	r0 += M4(-8.545e-06, 7.406e-02, -1.257e-01, 1.693e-01, -7.947e-02, -2.129e-02, -1.356e-01, 2.571e-01, -2.066e-02, -9.654e-02, -5.692e-02, -1.149e-01, 8.402e-02, 5.013e-02, -1.016e-01, 1.294e-01) * s0_2_1;
	r1 += M4(6.533e-02, 5.937e-02, -5.066e-02, 2.892e-02, -7.084e-03, 1.151e-01, 4.527e-03, 1.911e-01, 1.837e-01, 2.659e-03, -4.812e-02, -1.728e-01, 1.007e-01, -4.559e-03, -2.783e-01, -2.347e-01) * s0_2_1;
	r2 += M4(-1.056e-01, 2.419e-02, 4.268e-02, -1.013e-01, 9.061e-02, 1.555e-03, 6.940e-02, 4.756e-02, 9.497e-02, 3.583e-02, 1.625e-01, 1.265e-01, -8.968e-02, 8.445e-02, -8.629e-03, -2.991e-01) * s0_2_1;
	r0 += M4(-7.643e-02, 3.663e-02, -1.399e-01, 5.758e-02, 4.556e-02, -3.974e-02, 7.516e-02, 1.556e-01, -3.101e-02, -8.262e-02, 9.366e-03, -8.188e-03, 2.662e-02, 2.039e-02, -5.407e-02, 3.124e-02) * s0_2_2;
	r1 += M4(8.820e-02, 5.979e-02, 5.381e-02, 4.939e-02, -2.598e-01, -1.096e-01, 3.880e-02, 6.068e-02, 3.529e-02, -2.048e-01, -4.212e-02, -2.110e-01, -2.804e-02, -3.568e-02, -2.393e-02, -9.628e-03) * s0_2_2;
	r2 += M4(-4.257e-02, -2.492e-02, -5.695e-02, -4.714e-02, -7.128e-02, 5.057e-02, 9.776e-02, 2.483e-02, 7.530e-02, 1.700e-02, 1.990e-02, -4.991e-02, -1.324e-01, 1.165e-01, 2.114e-02, -9.368e-02) * s0_2_2;
	r0 += M4(-5.533e-02, 5.170e-02, -6.267e-02, -4.390e-02, -1.106e-01, -8.313e-04, -1.082e-02, 1.547e-02, -5.079e-02, 1.458e-01, -1.181e-01, -1.445e-01, 8.076e-02, 1.027e-01, 2.105e-02, -2.140e-01) * s1_0_0;
	r1 += M4(8.615e-03, 3.980e-02, 4.552e-02, -2.239e-02, -6.772e-02, -9.497e-02, -4.733e-02, -7.982e-02, -4.972e-02, 1.115e-01, -1.560e-03, 8.250e-04, 2.906e-02, -8.333e-03, 4.600e-02, 2.859e-02) * s1_0_0;
	r2 += M4(2.827e-03, 1.744e-02, -2.854e-02, 9.895e-03, 1.219e-01, 4.656e-02, 5.279e-02, -3.496e-02, -1.267e-01, -5.258e-02, -1.122e-01, 4.498e-02, -1.519e-01, 4.591e-02, 1.093e-01, 5.692e-02) * s1_0_0;
	r0 += M4(2.664e-02, 2.316e-02, -1.073e-01, -5.065e-01, 7.374e-03, -1.683e-02, 4.585e-02, 2.283e-01, 1.468e-01, -7.522e-02, 3.124e-02, 8.453e-02, -5.768e-02, 6.320e-03, -3.309e-02, -2.113e-01) * s1_0_1;
	r1 += M4(6.427e-02, -3.882e-01, 8.129e-02, 6.265e-02, -1.058e-01, 2.611e-01, -8.015e-03, 1.306e-01, -1.217e-01, -1.860e-01, 1.327e-01, 1.193e-01, 2.013e-02, -2.045e-02, 6.034e-02, 1.155e-01) * s1_0_1;
	r2 += M4(-5.072e-02, -1.794e-02, -2.026e-01, 5.099e-03, 2.767e-02, -3.008e-02, -1.095e-01, 5.125e-02, 9.136e-02, -2.841e-01, -3.944e-01, 1.407e-02, -1.717e-01, 1.143e-01, 2.392e-01, 2.226e-02) * s1_0_1;
	r0 += M4(2.687e-02, -6.754e-02, 6.735e-02, -1.202e-01, 1.147e-01, -4.240e-02, 3.726e-02, 1.580e-01, 8.428e-02, -1.590e-02, -3.081e-01, 6.486e-02, 3.722e-02, 1.214e-02, 1.206e-01, 4.767e-03) * s1_0_2;
	r1 += M4(-1.302e-02, -6.803e-03, -2.040e-02, -2.746e-02, -3.835e-02, 9.999e-02, -1.536e-02, -4.559e-02, -3.632e-02, 4.495e-02, -1.678e-01, 9.340e-02, -5.628e-02, -2.457e-02, 5.443e-02, 3.789e-03) * s1_0_2;
	r2 += M4(1.922e-01, 5.480e-02, -4.295e-02, 8.310e-03, 2.147e-01, -3.403e-02, 9.401e-02, 5.185e-02, 3.514e-02, -8.908e-02, 1.907e-01, -3.712e-02, 3.645e-03, 1.444e-02, 6.658e-03, -1.399e-02) * s1_0_2;
	r0 += M4(-5.987e-02, 6.863e-02, -4.752e-03, 1.741e-03, -3.666e-02, -2.028e-02, -5.769e-02, 1.317e-01, -2.825e-01, 2.333e-01, -1.175e-01, -1.326e-01, 7.860e-02, -9.567e-02, -2.629e-02, -1.254e-01) * s1_1_0;
	r1 += M4(-5.985e-02, -6.533e-03, -1.635e-02, -4.491e-02, -4.342e-02, 6.920e-02, -8.512e-02, 5.370e-02, 1.481e-01, 1.529e-01, -6.123e-02, -3.162e-02, 1.851e-01, -7.306e-02, -3.925e-02, 8.492e-02) * s1_1_0;
	r2 += M4(5.342e-02, 1.815e-03, -4.547e-02, 2.115e-02, 3.190e-02, -3.592e-02, -3.457e-02, -6.574e-02, -1.259e-02, -5.264e-02, -7.446e-02, 1.724e-01, 5.791e-02, 1.970e-01, 9.675e-02, 2.132e-02) * s1_1_0;
	r0 += M4(-5.154e-01, -4.520e-02, -4.641e-01, -1.000e+00, 2.437e-01, 6.024e-01, 4.010e-01, 4.739e-01, -2.618e-01, -8.060e-01, -1.955e-01, -7.522e-01, -5.699e-01, -1.327e-01, -2.923e-01, 4.302e-01) * s1_1_1;
	r1 += M4(4.688e-01, 4.775e-01, 4.687e-01, -1.164e-01, -1.401e-01, -8.806e-02, -6.382e-02, -1.003e-01, 3.662e-01, 3.056e-01, 2.318e-01, 6.210e-01, 6.289e-03, -4.209e-01, -4.086e-01, -2.785e-01) * s1_1_1;
	r2 += M4(7.551e-03, 1.745e-01, -2.614e-02, 1.189e-01, -3.163e-01, -1.193e-01, -2.650e-01, 1.570e-01, -1.840e-01, 2.685e-02, -1.088e-02, 3.834e-01, -1.251e-01, 3.235e-01, 8.345e-02, -1.220e-01) * s1_1_1;
	r0 += M4(1.127e-01, -8.690e-02, 1.058e-01, -1.470e-01, 2.426e-01, -3.993e-02, 3.069e-01, 1.194e-01, 5.037e-02, -5.195e-02, 1.036e-02, 7.561e-02, -1.456e-02, 6.966e-02, 5.091e-03, -3.353e-02) * s1_1_2;
	r1 += M4(-7.251e-02, -1.602e-01, 5.693e-02, 5.453e-02, 2.048e-01, -4.169e-02, -1.510e-01, -9.573e-02, 1.147e-01, -3.681e-02, -1.373e-01, -2.404e-01, -1.443e-02, 1.857e-02, -6.812e-02, -1.635e-01) * s1_1_2;
	r2 += M4(-5.468e-02, -3.447e-01, 3.198e-01, 1.988e-01, -4.135e-01, -1.497e-02, 2.410e-01, -1.004e-01, -2.757e-02, -2.838e-02, 3.761e-02, -3.534e-02, -2.574e-01, 1.687e-01, 5.664e-02, -2.765e-02) * s1_1_2;
	r0 += M4(-2.209e-03, 4.649e-02, 1.844e-02, 1.504e-01, -5.661e-02, -3.757e-03, 6.418e-02, -6.693e-02, -4.426e-02, -1.868e-01, 1.437e-03, 7.749e-03, 5.341e-02, 5.514e-02, 1.194e-02, -1.504e-01) * s1_2_0;
	r1 += M4(-8.201e-03, -4.609e-02, 7.118e-02, 1.881e-02, -5.481e-02, -7.954e-02, -1.385e-02, 2.327e-02, -4.724e-03, 1.325e-02, 3.828e-02, 1.830e-03, 1.228e-01, -4.588e-02, 6.273e-02, -8.439e-02) * s1_2_0;
	r2 += M4(-6.065e-03, -1.644e-02, -5.328e-02, 1.125e-03, 1.755e-02, 6.131e-02, 7.359e-02, 6.985e-03, 2.572e-02, -8.306e-02, -7.947e-02, -9.674e-03, 1.707e-02, 9.056e-02, 3.977e-02, -8.461e-03) * s1_2_0;
	r0 += M4(9.457e-02, -3.310e-01, 7.225e-02, 1.734e-01, 9.719e-03, 3.576e-01, -9.588e-02, -3.345e-03, -6.021e-03, 7.903e-02, 3.948e-02, 7.790e-02, 3.570e-02, 1.346e-02, -1.378e-01, 5.385e-02) * s1_2_1;
	r1 += M4(-1.015e-01, -3.647e-02, 7.271e-02, -1.061e-02, -7.610e-02, 4.298e-02, 2.573e-03, 5.077e-02, 3.635e-02, -9.355e-03, 8.264e-03, -5.132e-02, 5.850e-02, 9.659e-02, 5.253e-02, -4.349e-02) * s1_2_1;
	r2 += M4(6.117e-02, -1.489e-02, -3.277e-02, -1.270e-01, 1.871e-02, 5.196e-03, 4.368e-02, -1.567e-02, 1.049e-02, -5.188e-02, -5.507e-02, 1.302e-03, -3.752e-02, 1.929e-01, 8.173e-02, -8.709e-02) * s1_2_1;
	r0 += M4(6.929e-02, -2.010e-02, -6.970e-02, -3.618e-02, 1.181e-02, 1.056e-02, 7.884e-02, 6.184e-02, 4.428e-02, -1.291e-02, -2.070e-02, -1.041e-01, -1.532e-02, -6.563e-02, 2.267e-02, 8.253e-02) * s1_2_2;
	r1 += M4(3.851e-02, -5.701e-02, 5.411e-02, -1.332e-01, -4.551e-02, 1.057e-01, 3.401e-04, 1.610e-01, 9.771e-02, 4.484e-02, -2.424e-02, 1.039e-01, -4.094e-02, -1.198e-03, 1.611e-02, 6.666e-02) * s1_2_2;
	r2 += M4(-3.209e-02, -8.882e-02, -5.913e-02, -5.034e-02, -1.803e-01, 2.726e-02, 1.386e-02, -6.548e-02, -1.783e-02, -3.047e-02, -1.641e-03, -1.900e-02, -7.161e-02, 1.851e-01, 1.277e-01, 7.001e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.436e-02, 1.383e-03, 2.151e-02, 5.730e-02, 1.382e-01, 8.836e-03, -1.177e-01, -4.453e-01, -2.002e-02, -1.283e-01, 1.397e-01, 2.863e-01, -2.551e-02, -1.526e-02, 4.826e-02, 1.355e-01) * s0_0_0;
	r1 += M4(-9.463e-02, 9.781e-03, 3.059e-02, -5.521e-02, -4.648e-02, 3.431e-01, -4.024e-02, 4.231e-03, -5.007e-03, -2.607e-01, -1.518e-02, -2.710e-02, 1.325e-02, 8.085e-02, 2.540e-02, 4.951e-03) * s0_0_0;
	r2 += M4(-1.135e-01, 5.456e-02, 6.302e-02, -6.600e-02, -1.469e-01, -8.823e-02, -9.006e-02, 4.705e-03, 1.798e-01, 1.799e-02, 1.356e-01, -5.048e-02, 1.255e-01, 5.169e-02, 1.179e-01, 1.001e-02) * s0_0_0;
	r0 += M4(-7.390e-02, 3.036e-02, -4.043e-04, 1.812e-01, 1.214e-01, -2.864e-02, -6.465e-02, -1.165e-01, -6.346e-02, -1.018e-01, 1.718e-01, 1.943e-01, -2.939e-02, 1.999e-02, 6.311e-02, -1.479e-01) * s0_0_1;
	r1 += M4(-1.073e-01, 1.172e-01, -5.996e-02, -1.094e-01, -3.656e-02, 7.618e-02, 1.214e-01, 1.922e-01, 2.196e-02, -2.636e-01, -4.131e-02, -1.282e-01, -1.396e-02, -1.470e-02, -1.244e-02, -5.382e-02) * s0_0_1;
	r2 += M4(-1.850e-01, 6.002e-02, 7.982e-02, 2.704e-02, -2.361e-01, -1.480e-01, -3.490e-01, -6.157e-02, -6.812e-02, -4.880e-02, 2.638e-02, 1.401e-01, -7.372e-02, 8.216e-02, 1.207e-01, 2.694e-02) * s0_0_1;
	r0 += M4(-6.152e-02, 1.031e-01, 2.841e-02, -6.409e-02, 1.346e-02, 4.522e-03, -1.422e-01, 3.152e-02, -6.567e-02, 3.558e-02, 1.911e-01, -7.050e-02, 2.157e-03, -2.433e-02, 1.114e-01, 6.874e-02) * s0_0_2;
	r1 += M4(1.927e-02, 3.665e-02, 4.525e-02, -9.533e-02, 4.797e-02, 8.414e-02, -2.685e-02, 2.121e-01, 1.126e-01, -9.111e-02, 1.514e-01, -9.123e-02, 2.481e-02, -1.202e-01, 4.187e-02, -3.698e-02) * s0_0_2;
	r2 += M4(-9.106e-02, 7.032e-02, 2.100e-02, -7.232e-02, -2.741e-02, -4.214e-02, -1.404e-01, -1.702e-02, -7.518e-02, 4.144e-02, -1.406e-02, -2.978e-02, 5.701e-02, 3.087e-02, 6.189e-02, 2.467e-02) * s0_0_2;
	r0 += M4(-1.066e-01, -1.115e-01, -1.886e-03, 4.226e-02, 1.222e-01, 4.779e-01, -1.796e-01, -6.279e-01, 2.971e-02, -1.448e-01, 1.896e-01, -1.145e-01, -1.052e-01, 9.700e-02, 7.608e-02, -2.876e-01) * s0_1_0;
	r1 += M4(-1.357e-01, 1.297e-01, 1.215e-01, -7.970e-02, 2.929e-03, 1.281e-01, -2.641e-02, 2.294e-01, -1.025e-01, -3.062e-01, -1.169e-01, 1.379e-01, -9.122e-04, -2.148e-01, -7.345e-02, 3.038e-02) * s0_1_0;
	r2 += M4(-1.982e-01, 1.185e-01, 1.423e-01, -5.503e-02, 5.781e-02, -4.814e-02, 2.100e-01, -7.397e-02, 1.958e-01, -1.141e-01, 1.663e-02, 5.150e-02, 2.446e-01, 8.290e-02, 1.904e-01, -1.621e-02) * s0_1_0;
	r0 += M4(3.393e-02, 8.797e-02, 2.955e-02, -1.275e-01, 3.315e-02, 6.391e-02, -3.740e-01, -3.817e-01, 2.510e-01, 5.973e-03, 5.774e-01, -3.120e-01, -3.469e-01, 8.744e-02, 1.529e-01, -5.994e-01) * s0_1_1;
	r1 += M4(-2.469e-01, 4.048e-02, 1.451e-01, -1.806e-01, -1.017e-01, 1.466e-01, 2.369e-01, -3.117e-01, -1.629e-01, -2.385e-01, 5.668e-01, -8.621e-04, 1.338e-02, -3.172e-02, 9.747e-03, -3.239e-01) * s0_1_1;
	r2 += M4(-9.900e-02, 1.921e-01, 2.276e-01, 7.606e-02, -6.560e-04, -1.255e-01, -1.701e-01, 4.857e-01, -2.324e-01, -1.874e-02, -3.388e-02, 1.431e-01, -8.521e-02, 2.589e-01, 1.654e-01, 7.330e-02) * s0_1_1;
	r0 += M4(-8.261e-02, 3.078e-02, -4.549e-02, 3.003e-02, -5.510e-02, -9.271e-03, -2.758e-01, 2.066e-01, -6.360e-02, 6.241e-02, -1.024e-02, 9.248e-02, 6.799e-02, -2.830e-02, 2.269e-01, -1.139e-01) * s0_1_2;
	r1 += M4(-1.628e-01, 1.227e-01, 1.920e-02, -1.076e-01, 1.771e-01, 2.782e-01, -1.568e-01, 1.446e-01, -5.069e-02, -1.277e-01, 1.307e-01, 7.474e-02, 5.851e-02, -2.954e-02, 9.582e-02, -2.047e-02) * s0_1_2;
	r2 += M4(-1.278e-01, 1.149e-01, 7.881e-02, -1.068e-01, 7.245e-02, -1.596e-01, -7.003e-02, -9.443e-02, 1.046e-02, 7.002e-02, -6.986e-02, 1.106e-02, -7.663e-02, 2.464e-02, 6.981e-02, 7.733e-02) * s0_1_2;
	r0 += M4(-9.540e-02, -5.964e-02, 3.462e-02, -2.862e-03, 2.498e-02, 3.719e-02, -7.166e-03, -6.650e-02, 9.166e-02, -1.788e-01, 1.071e-01, 3.326e-02, 3.058e-02, 1.597e-01, 3.365e-02, 5.512e-02) * s0_2_0;
	r1 += M4(-4.813e-02, 6.773e-02, 2.487e-03, -1.715e-02, -1.391e-02, -4.505e-02, -1.901e-02, 2.017e-01, -3.720e-02, -2.800e-01, -2.593e-02, -4.253e-02, -1.116e-01, -1.003e-01, -2.216e-02, -5.765e-02) * s0_2_0;
	r2 += M4(-5.728e-02, 5.274e-02, 1.067e-01, -3.506e-02, -1.263e-01, -6.109e-02, -2.665e-02, 1.311e-01, 7.574e-02, -9.836e-03, 1.243e-01, 1.935e-02, -1.363e-02, 7.399e-02, 3.356e-02, 1.302e-01) * s0_2_0;
	r0 += M4(-9.072e-02, 1.206e-01, -1.792e-02, 3.682e-02, -3.174e-02, 1.700e-01, -9.533e-03, 6.313e-02, -2.436e-03, -3.637e-02, 1.025e-01, 1.441e-01, -1.005e-01, 4.482e-02, 1.334e-01, -5.072e-01) * s0_2_1;
	r1 += M4(-1.006e-01, 1.055e-01, 3.146e-02, -2.720e-02, 2.496e-01, 2.419e-01, 3.955e-02, 1.528e-01, -1.411e-01, -3.921e-01, -5.193e-02, -4.951e-01, -8.996e-02, -4.465e-02, 1.079e-02, -1.232e-01) * s0_2_1;
	r2 += M4(-9.845e-02, 1.452e-01, 1.483e-01, 1.586e-02, -1.895e-01, -1.106e-02, 5.024e-02, 6.622e-02, 1.886e-01, -5.630e-02, -1.338e-01, -6.835e-02, 2.382e-01, -1.439e-01, 5.210e-02, 2.223e-01) * s0_2_1;
	r0 += M4(-1.194e-01, 8.108e-02, 1.681e-02, 1.765e-02, -3.957e-02, -7.611e-02, -1.275e-01, -1.382e-01, -6.755e-03, 4.399e-02, -2.827e-02, 1.456e-01, 2.099e-02, 2.002e-02, -1.928e-03, -6.531e-02) * s0_2_2;
	r1 += M4(-7.527e-02, 3.627e-02, -1.757e-02, -1.100e-01, 1.244e-01, 1.351e-01, -7.584e-02, 4.310e-02, -1.270e-02, -2.200e-01, 5.422e-04, -2.231e-01, -1.936e-02, -1.452e-01, -1.947e-02, -5.218e-02) * s0_2_2;
	r2 += M4(-6.686e-02, 7.224e-02, 9.417e-02, -3.413e-02, -1.142e-01, 3.541e-02, 4.447e-02, -2.683e-02, 1.616e-01, 7.557e-03, -6.763e-02, -3.733e-03, 6.375e-02, -6.389e-02, -3.568e-02, 5.633e-02) * s0_2_2;
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BLUR-conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv3_mul * texelFetch(conv3_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.558e-02, -5.419e-02, 1.861e-01, -2.362e-03, -2.247e-02, 2.262e-02, 2.975e-02, -4.197e-02, 3.375e-03, -4.439e-02, 1.011e-01, -9.118e-02, -3.071e-02, -3.250e-02, -7.913e-03, -1.521e-02) * s0_0_0;
	r1 += M4(1.838e-02, 3.798e-02, -1.431e-02, -2.055e-03, -3.157e-02, 3.359e-02, -1.764e-02, -1.786e-02, -1.373e-01, 3.307e-02, -4.280e-03, -4.135e-02, 1.443e-02, 1.453e-01, 9.971e-03, 8.947e-03) * s0_0_0;
	r2 += M4(5.865e-02, 1.008e-02, 1.997e-02, 7.222e-04, 4.437e-02, -1.055e-02, 1.012e-02, -1.484e-03, 6.482e-02, 2.686e-01, -2.778e-01, -1.911e-03, -4.327e-03, -1.426e-01, 2.649e-01, -3.570e-02) * s0_0_0;
	r0 += M4(1.781e-01, -8.407e-02, 7.053e-02, 2.636e-02, -9.256e-02, 5.599e-03, -1.506e-01, -1.560e-01, 1.229e-01, 3.864e-02, 9.766e-03, 5.332e-02, -9.972e-02, -1.157e-01, 2.282e-02, -6.600e-02) * s0_0_1;
	r1 += M4(-3.657e-01, -1.948e-02, 2.217e-02, -2.790e-03, -1.479e-01, -7.258e-02, 4.717e-03, -4.682e-02, -1.988e-01, -1.436e-01, 1.850e-02, 1.102e-02, 1.874e-02, -1.499e-01, -2.176e-02, 2.123e-02) * s0_0_1;
	r2 += M4(-4.574e-02, 2.046e-01, -9.547e-02, -4.524e-02, -3.935e-02, -1.283e-01, -2.342e-01, -2.892e-01, 3.145e-02, -3.987e-02, -8.007e-03, 4.511e-02, -1.781e-02, -2.058e-01, -1.771e-01, -1.535e-01) * s0_0_1;
	r0 += M4(-3.920e-02, -2.452e-02, 3.945e-02, 1.088e-01, -9.974e-02, -1.288e-01, -1.075e-01, -2.516e-01, -1.288e-02, -4.608e-03, 1.179e-02, -7.888e-02, -6.550e-02, 5.475e-02, 2.240e-02, 7.255e-02) * s0_0_2;
	r1 += M4(-1.433e-01, -1.148e-01, 7.385e-03, -2.814e-02, -1.269e-01, -4.339e-02, -1.462e-01, -5.385e-02, 9.120e-02, -1.650e-01, 7.096e-03, -6.242e-03, 1.840e-02, -4.119e-01, 1.453e-02, -1.283e-02) * s0_0_2;
	r2 += M4(-1.072e-02, -5.197e-02, 4.318e-02, -2.248e-02, -3.236e-01, -1.836e-01, -2.409e-01, -8.877e-03, 2.895e-02, 2.053e-02, -8.447e-02, 4.169e-03, 2.600e-02, -8.532e-02, -4.111e-03, 1.526e-02) * s0_0_2;
	r0 += M4(-1.455e-02, -5.809e-02, -1.171e-01, -1.770e-01, 1.659e-02, -5.793e-02, 1.300e-02, 1.232e-01, 2.694e-02, 5.340e-02, -1.650e-01, 4.403e-02, -5.903e-02, -7.162e-03, -7.336e-02, -2.735e-02) * s0_1_0;
	r1 += M4(-4.851e-02, 4.858e-02, -4.332e-03, -2.852e-04, -6.363e-02, -5.541e-03, 9.300e-04, -6.092e-02, 2.226e-05, -9.190e-02, 5.341e-02, 1.090e-02, 9.352e-02, 2.945e-02, 1.303e-03, -1.289e-02) * s0_1_0;
	r2 += M4(3.001e-02, 1.610e-01, -6.825e-02, 1.103e-01, 9.198e-03, 5.959e-03, -5.923e-02, -1.034e-02, 1.890e-01, -5.535e-02, -2.392e-01, 1.592e-01, 3.335e-02, -2.116e-02, -1.982e-01, -6.424e-02) * s0_1_0;
	r0 += M4(-2.119e-01, -2.337e-01, -8.028e-02, -1.340e-01, 6.310e-02, -2.129e-01, 1.069e-01, -1.220e-01, -7.034e-03, 6.870e-02, -3.641e-02, -7.048e-02, -1.667e-01, -3.395e-01, -3.012e-01, -1.422e-01) * s0_1_1;
	r1 += M4(-2.742e-01, -5.860e-02, -1.393e-01, -2.149e-01, -1.773e-01, -9.252e-02, 3.577e-02, -2.388e-01, 2.703e-01, -1.344e-01, -1.850e-01, -1.325e-01, -1.291e-01, -1.473e-01, -1.313e-01, -1.987e-02) * s0_1_1;
	r2 += M4(-3.232e-01, -7.899e-02, 1.049e-01, -6.700e-02, -1.399e-01, -1.880e-01, -2.022e-01, -1.452e-01, -3.325e-01, -4.168e-01, -1.665e-01, -3.115e-01, -4.555e-01, -3.274e-01, -4.125e-01, -2.470e-01) * s0_1_1;
	r0 += M4(1.407e-02, 1.223e-01, -1.344e-01, 1.180e-01, -1.489e-03, -4.866e-01, 1.358e-02, -2.875e-01, 7.585e-02, -8.896e-02, -2.804e-03, -4.813e-02, -8.978e-02, 5.006e-02, -2.926e-02, 1.294e-01) * s0_1_2;
	r1 += M4(-2.138e-01, 1.252e-02, 1.880e-01, -2.387e-02, -3.189e-01, 5.197e-02, -2.044e-01, -1.705e-01, -1.633e-01, -2.893e-01, 1.579e-02, 2.254e-02, -3.580e-01, -4.070e-01, -6.182e-03, -4.366e-02) * s0_1_2;
	r2 += M4(-6.884e-02, -2.984e-02, 5.790e-02, -3.130e-02, -1.018e-01, 9.633e-02, 1.008e-01, 1.590e-03, 3.191e-03, -2.875e-02, -2.693e-02, 1.226e-02, -1.456e-01, -2.312e-01, -2.317e-02, -2.075e-03) * s0_1_2;
	r0 += M4(-2.612e-02, 2.663e-02, -1.305e-01, -9.934e-05, -2.080e-02, 1.954e-03, -9.564e-03, -8.618e-04, 1.337e-02, -1.032e-01, 1.838e-01, -2.325e-02, -1.710e-02, -2.101e-02, 1.605e-02, -5.562e-02) * s0_2_0;
	r1 += M4(1.021e-01, -8.048e-03, 1.242e-02, 2.448e-02, 1.248e-03, -9.994e-04, 1.437e-02, -2.462e-02, -1.116e-02, -1.662e-02, -6.559e-02, -6.259e-02, 9.135e-02, 6.666e-02, 3.371e-02, 3.488e-02) * s0_2_0;
	r2 += M4(1.353e-01, -4.476e-02, 2.793e-02, 1.798e-02, 2.345e-02, 4.779e-03, -4.546e-02, 2.892e-03, -1.068e-01, -1.581e-03, 2.235e-02, -3.632e-02, -5.555e-02, -1.078e-03, 1.779e-02, -2.035e-02) * s0_2_0;
	r0 += M4(-1.930e-02, 2.773e-01, -3.796e-01, -8.260e-02, -1.271e-02, -3.461e-02, 4.942e-02, -3.148e-03, 2.475e-02, -2.588e-01, 2.491e-01, -3.882e-02, -6.896e-02, 5.350e-03, -2.677e-01, -8.122e-02) * s0_2_1;
	r1 += M4(1.693e-01, -2.297e-02, -1.435e-01, 1.124e-01, -1.951e-02, 1.163e-02, 6.471e-03, 3.189e-02, -1.374e-01, -9.812e-02, 1.390e-01, 8.096e-02, 1.352e-01, 6.014e-03, -1.268e-01, -2.054e-02) * s0_2_1;
	r2 += M4(1.205e-01, -6.152e-02, 8.960e-02, -1.692e-02, -3.400e-02, -5.942e-03, 8.110e-03, -6.758e-03, 3.643e-03, -1.015e-01, 1.618e-02, 6.484e-02, 6.264e-03, -1.935e-02, 1.247e-02, 7.116e-02) * s0_2_1;
	r0 += M4(8.059e-04, 9.241e-02, 2.933e-02, 1.115e-01, 1.088e-02, -5.455e-03, -1.076e-03, -2.513e-02, 3.785e-03, 4.545e-02, 3.167e-02, -4.339e-02, -8.781e-02, 9.171e-02, -1.207e-01, 3.252e-02) * s0_2_2;
	r1 += M4(2.010e-01, 3.688e-02, 1.947e-01, -2.197e-02, -2.224e-02, -4.326e-02, -1.379e-01, 6.375e-03, -2.862e-02, -3.702e-02, -1.086e-01, -2.973e-02, 1.002e-01, 1.306e-02, -4.983e-02, 1.819e-03) * s0_2_2;
	r2 += M4(5.134e-02, -4.113e-02, -2.591e-02, -1.246e-02, -2.361e-02, 1.705e-03, -2.360e-04, -1.534e-02, -1.143e-02, -1.156e-01, 4.059e-02, 1.893e-02, 1.869e-02, -5.259e-02, 1.068e-01, 3.427e-03) * s0_2_2;
	r0 += M4(-7.057e-02, -1.215e-02, -1.775e-01, 3.459e-02, -3.256e-02, 8.081e-03, 9.438e-03, -2.434e-02, -2.913e-02, 2.023e-03, -7.774e-02, 7.078e-03, -6.747e-03, 3.482e-02, 1.091e-01, -4.532e-02) * s1_0_0;
	r1 += M4(8.325e-02, -6.217e-02, -5.595e-03, -1.967e-02, 1.843e-02, 7.374e-02, 6.601e-03, 2.269e-02, 3.154e-03, -4.272e-02, -1.355e-02, 1.472e-02, -1.979e-02, 1.466e-01, 1.302e-02, 5.841e-02) * s1_0_0;
	r2 += M4(-6.901e-02, 2.081e-02, -1.988e-01, -5.117e-02, 2.824e-02, -2.700e-02, 3.982e-02, -1.461e-01, 1.901e-02, -2.084e-02, -3.915e-02, 6.939e-02, 4.474e-02, -8.621e-02, -9.630e-03, -1.014e-01) * s1_0_0;
	r0 += M4(-3.093e-01, 1.438e-01, -1.708e-01, -9.747e-02, -1.207e-01, 4.949e-02, -2.143e-01, 7.673e-03, -1.068e-01, 1.076e-02, -7.331e-02, 1.043e-01, 2.013e-01, -5.349e-02, 1.374e-01, 9.711e-02) * s1_0_1;
	r1 += M4(8.593e-02, -4.159e-02, -6.478e-02, -4.060e-02, 2.903e-02, -1.650e-01, -1.486e-02, -2.654e-02, -1.617e-01, 3.080e-01, 4.823e-02, 3.172e-02, -3.021e-01, -6.844e-02, -3.754e-03, 1.519e-02) * s1_0_1;
	r2 += M4(1.529e-02, -1.613e-01, 2.042e-01, -6.176e-02, -2.043e-02, -4.415e-02, 5.546e-02, 5.974e-02, 4.699e-02, 1.266e-01, -1.020e-01, 2.745e-02, -1.156e-01, 2.025e-01, -1.776e-02, 5.264e-02) * s1_0_1;
	r0 += M4(-1.139e-01, 2.089e-02, -4.150e-02, 8.351e-03, -2.388e-02, -7.840e-02, -3.558e-02, -4.757e-02, -1.558e-01, -4.542e-02, -5.110e-02, 8.043e-02, -8.167e-03, 5.932e-02, 1.788e-02, -3.156e-02) * s1_0_2;
	r1 += M4(2.173e-03, 5.492e-02, -5.992e-02, -2.635e-02, 2.279e-01, 8.708e-02, 1.332e-02, -5.602e-03, -1.023e-01, -4.621e-02, -2.900e-04, 3.446e-02, -8.943e-02, 5.757e-02, 4.602e-02, -4.706e-03) * s1_0_2;
	r2 += M4(1.728e-02, 2.831e-02, -1.568e-01, -2.049e-02, 7.569e-03, 1.052e-01, 1.159e-01, -5.098e-02, 4.236e-02, -3.197e-02, 1.074e-01, 6.207e-03, 4.253e-02, -9.654e-03, 2.535e-02, 3.665e-02) * s1_0_2;
	r0 += M4(-3.289e-02, 6.348e-02, -5.376e-02, 2.704e-02, -1.838e-02, 5.117e-02, -2.194e-01, -1.269e-02, -3.836e-02, 1.722e-02, -5.172e-02, -4.632e-02, -8.045e-03, 1.495e-02, -4.251e-02, -2.361e-01) * s1_1_0;
	r1 += M4(-1.114e-04, -7.886e-02, -6.567e-02, 2.308e-02, 2.394e-04, -5.344e-02, -5.007e-02, -7.119e-02, -1.915e-02, 9.288e-02, -1.894e-02, -2.447e-02, 9.366e-02, 4.946e-02, -2.326e-02, -1.369e-01) * s1_1_0;
	r2 += M4(-1.171e-01, 6.672e-02, 1.779e-01, -1.789e-01, -3.260e-01, -2.233e-02, 7.149e-02, 2.204e-02, -1.216e-01, 2.316e-02, -2.141e-02, -4.599e-02, 1.179e-01, -5.475e-03, -3.152e-02, -6.100e-02) * s1_1_0;
	r0 += M4(5.498e-02, -4.392e-01, -2.001e-01, -2.285e-01, 1.079e-01, -1.295e-02, 2.641e-01, -1.893e-01, 3.341e-02, 3.166e-01, 1.655e-01, 6.239e-02, -1.913e-02, 6.126e-01, -1.508e-01, 4.546e-01) * s1_1_1;
	r1 += M4(-1.674e-01, -4.046e-02, 6.586e-02, 3.414e-02, -1.765e-01, 2.475e-01, -1.274e-02, 8.235e-02, 1.964e-01, 3.486e-01, 1.440e-01, -2.346e-01, 3.993e-01, 1.679e-02, -1.508e-01, 1.147e-01) * s1_1_1;
	r2 += M4(-2.906e-01, -4.522e-01, -2.957e-01, 1.313e-01, 1.324e-01, 3.285e-01, -1.968e-01, -1.358e-01, 6.274e-01, 2.342e-01, 2.168e-01, 4.014e-01, -1.563e-01, -2.448e-01, 1.715e-01, 9.327e-02) * s1_1_1;
	r0 += M4(4.606e-03, -4.617e-02, 3.666e-04, 1.401e-03, -1.433e-01, -1.379e-01, -8.402e-03, 3.542e-03, 2.747e-02, -1.434e-01, -5.516e-02, 9.448e-02, 6.228e-02, -1.633e-01, 1.185e-03, -1.112e-01) * s1_1_2;
	r1 += M4(-3.332e-02, 1.376e-02, -2.067e-01, -4.776e-02, -3.054e-01, -2.123e-01, -1.700e-01, 1.330e-02, -4.820e-02, -2.221e-01, 1.031e-01, -1.734e-01, 9.207e-02, 5.746e-02, 1.204e-01, 2.928e-02) * s1_1_2;
	r2 += M4(7.523e-02, 8.646e-02, -2.438e-02, -6.054e-02, -1.312e-01, -1.018e-01, 9.135e-03, 4.968e-02, -1.479e-01, -8.181e-02, -2.706e-02, -9.495e-02, 7.285e-02, 9.646e-02, -1.329e-03, -2.093e-02) * s1_1_2;
	r0 += M4(8.705e-03, -2.147e-03, 3.353e-02, -5.505e-03, -1.015e-02, -1.330e-01, 7.550e-02, 1.867e-01, -8.150e-04, 4.756e-02, -4.229e-02, -8.511e-02, 4.028e-02, 6.794e-02, 1.481e-01, -3.656e-02) * s1_2_0;
	r1 += M4(6.654e-02, -2.919e-02, -6.742e-02, -1.382e-02, -6.639e-02, -7.645e-03, -8.178e-02, -2.332e-02, -3.637e-02, 4.184e-03, -3.676e-02, -8.550e-02, -2.437e-02, -6.927e-03, 1.380e-02, 5.191e-02) * s1_2_0;
	r2 += M4(-1.246e-02, -2.657e-02, -5.942e-02, -5.515e-02, -2.242e-01, 4.489e-02, 1.140e-01, 3.101e-02, -1.023e-02, 4.852e-03, -3.399e-02, -8.774e-03, 2.801e-02, 6.056e-02, 4.963e-02, -2.156e-03) * s1_2_0;
	r0 += M4(1.143e-02, -3.427e-03, 8.464e-02, 8.551e-03, -3.799e-02, -7.975e-02, -3.758e-01, -2.630e-01, -6.810e-03, -1.540e-02, -5.801e-02, 8.641e-02, -1.136e-03, -1.286e-01, 1.762e-01, 1.363e-01) * s1_2_1;
	r1 += M4(-7.800e-02, 9.372e-03, -3.821e-02, -1.183e-01, -5.628e-02, -3.357e-02, 1.760e-01, -2.763e-02, -4.855e-02, 1.480e-02, 2.302e-02, 1.238e-01, -1.191e-01, 2.048e-04, 4.408e-02, -9.356e-02) * s1_2_1;
	r2 += M4(-6.974e-02, 6.637e-02, -6.025e-02, 8.575e-03, 1.875e-01, -9.230e-02, 8.414e-02, -9.751e-02, 1.077e-01, 3.089e-02, -1.335e-01, 2.884e-02, -5.603e-02, 1.272e-01, 5.229e-02, 1.952e-02) * s1_2_1;
	r0 += M4(-1.460e-02, -2.488e-02, -1.041e-02, -9.065e-03, 2.506e-02, 1.705e-01, -1.634e-01, 8.210e-02, -4.154e-02, -1.257e-04, -2.689e-02, 3.038e-02, 5.345e-03, -1.572e-01, 6.236e-02, -9.986e-03) * s1_2_2;
	r1 += M4(-1.410e-02, -5.056e-03, 6.589e-03, 3.553e-02, 6.077e-02, 4.706e-02, -1.381e-01, -2.879e-02, 3.204e-03, -3.923e-02, 1.171e-01, 4.900e-02, -5.094e-02, -2.672e-02, 8.191e-02, 6.891e-03) * s1_2_2;
	r2 += M4(1.077e-01, 2.103e-02, 5.626e-02, -9.990e-03, -2.221e-01, 2.862e-02, -1.234e-02, 1.521e-02, 7.745e-02, 4.315e-02, 3.229e-02, -1.324e-02, 4.509e-02, 2.252e-02, 1.006e-02, -1.586e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(8.076e-02, 1.608e-02, 6.283e-03, 5.027e-03, 3.176e-03, 7.414e-03, -2.944e-02, 7.454e-03, -1.004e-01, -5.370e-02, -6.274e-02, 4.154e-02, 8.804e-02, 6.793e-02, 8.104e-02, 1.500e-02) * s0_0_0;
	r1 += M4(8.185e-02, 1.761e-01, 9.524e-03, 3.284e-02, 1.588e-03, -3.660e-02, -1.647e-02, 2.637e-02, 1.973e-02, -1.460e-01, 6.112e-03, -2.531e-02, 6.242e-02, -1.301e-01, 5.174e-03, -3.203e-02) * s0_0_0;
	r2 += M4(-2.572e-02, 8.230e-02, -7.461e-02, -1.297e-02, -2.814e-02, -8.004e-02, 1.408e-01, -4.034e-02, 1.747e-03, 2.066e-02, -1.096e-01, 1.697e-02, -2.554e-02, -1.090e-01, 1.005e-03, 1.333e-01) * s0_0_0;
	r0 += M4(6.908e-02, 5.199e-02, -9.691e-02, 4.201e-02, -2.064e-02, -1.145e-01, 1.038e-01, -2.050e-02, -1.825e-01, 5.360e-02, -5.652e-02, 7.867e-03, 2.686e-01, 9.325e-03, 2.024e-01, -8.909e-02) * s0_0_1;
	r1 += M4(4.576e-02, -1.457e-01, 4.936e-02, 4.265e-02, 2.070e-01, -6.143e-01, 1.571e-02, 9.763e-02, -1.103e-01, -1.005e-01, -2.467e-02, -3.548e-02, -2.810e-02, 2.686e-01, 7.074e-03, -1.179e-01) * s0_0_1;
	r2 += M4(4.580e-02, -3.315e-01, 9.504e-02, 9.497e-02, -2.574e-02, -2.040e-01, 6.011e-02, 8.837e-02, -6.666e-02, -1.936e-01, 1.051e-01, -1.578e-01, 7.338e-02, -1.793e-01, 1.227e-01, -5.351e-02) * s0_0_1;
	r0 += M4(-3.787e-02, 3.679e-02, -2.110e-02, 1.641e-02, -6.140e-02, 4.192e-03, 1.546e-04, -9.284e-02, -1.534e-01, 2.291e-02, -1.859e-02, -5.126e-02, 2.463e-01, 5.759e-02, 1.490e-01, -4.171e-02) * s0_0_2;
	r1 += M4(1.591e-02, 5.417e-02, -1.350e-02, 7.937e-03, 5.888e-02, 1.484e-01, -1.358e-02, 7.572e-03, -4.091e-02, 7.240e-02, -1.296e-02, 1.534e-02, -1.829e-02, -8.665e-02, -3.958e-02, -4.110e-02) * s0_0_2;
	r2 += M4(1.456e-02, 2.716e-03, -5.003e-02, -1.164e-02, 2.422e-02, -4.494e-02, -1.442e-02, -2.057e-02, -4.744e-03, 1.243e-02, 2.180e-02, 1.595e-02, -2.755e-02, 4.843e-02, 1.001e-02, -2.426e-02) * s0_0_2;
	r0 += M4(-1.473e-01, -3.368e-02, 4.145e-02, -6.780e-02, 2.918e-02, -9.686e-02, -9.123e-02, 2.041e-02, -1.829e-02, 4.278e-02, 8.377e-02, -8.489e-02, 2.197e-02, -8.114e-04, 1.601e-01, 1.186e-02) * s0_1_0;
	r1 += M4(3.012e-02, 5.860e-02, 2.081e-02, -3.627e-02, -7.842e-02, 9.602e-05, 9.443e-02, 3.136e-02, -1.134e-02, 8.146e-02, -3.764e-02, -4.238e-02, 5.029e-02, 3.384e-03, -4.359e-02, 1.688e-01) * s0_1_0;
	r2 += M4(8.157e-02, 4.287e-02, -4.165e-01, -1.280e-01, -1.286e-01, -2.038e-01, -6.846e-02, 7.669e-02, 7.375e-02, 2.554e-01, 3.257e-01, -2.566e-01, -7.504e-02, -2.882e-02, 1.522e-01, 1.475e-01) * s0_1_0;
	r0 += M4(-2.058e-01, 9.156e-02, 3.267e-01, 5.919e-01, 4.469e-02, 4.203e-01, -9.644e-01, -3.611e-01, 6.159e-02, 9.715e-02, 1.847e-01, 9.294e-02, 1.090e-01, 2.002e-01, 2.510e-01, -5.704e-02) * s0_1_1;
	r1 += M4(-1.994e-02, 4.658e-02, 1.781e-01, -8.117e-02, -6.556e-01, 1.407e-01, -5.501e-02, 1.018e-01, 9.450e-02, -4.922e-02, 2.320e-02, -1.124e-01, 2.436e-01, -1.193e-01, 1.458e-01, 3.672e-01) * s0_1_1;
	r2 += M4(-2.669e-01, 4.079e-01, 4.514e-02, 1.212e-01, -4.396e-01, 3.423e-01, -3.820e-01, 3.008e-02, -7.671e-02, 5.779e-03, -1.040e-01, 6.305e-02, 1.950e-03, 3.857e-01, -2.448e-01, -2.809e-01) * s0_1_1;
	r0 += M4(1.429e-01, -1.580e-01, 7.936e-02, -1.922e-01, 4.000e-02, -1.898e-01, -1.082e-01, 7.933e-02, -6.261e-03, -7.834e-02, 6.460e-02, 2.966e-02, -3.744e-02, 1.073e-01, 1.689e-02, -5.779e-02) * s0_1_2;
	r1 += M4(-4.253e-02, 4.793e-02, -9.677e-03, -1.450e-02, -1.801e-02, 2.118e-01, -6.816e-03, 5.059e-02, 1.342e-03, -2.800e-02, -1.061e-01, -5.635e-02, 2.105e-01, -3.806e-02, -4.145e-02, 1.517e-01) * s0_1_2;
	r2 += M4(6.515e-02, -4.673e-03, -8.039e-02, -2.408e-02, 1.207e-01, -2.334e-02, 1.692e-03, 3.415e-02, -5.453e-02, -7.590e-03, -3.471e-02, -4.078e-02, 3.679e-02, -2.343e-02, 1.255e-01, 1.169e-01) * s0_1_2;
	r0 += M4(1.531e-02, -5.731e-03, -3.369e-03, 8.326e-02, -7.863e-03, -3.107e-02, 1.468e-01, 9.196e-02, -8.970e-02, 5.634e-02, -2.755e-01, -9.329e-02, 3.346e-03, -2.528e-02, -4.710e-02, 1.620e-02) * s0_2_0;
	r1 += M4(2.508e-02, 4.865e-02, 6.669e-02, 3.938e-02, 1.556e-02, -3.943e-02, 2.956e-02, 2.130e-02, -5.836e-02, -6.543e-02, -8.231e-02, -1.694e-01, -3.663e-02, -5.472e-04, 1.924e-02, 1.673e-02) * s0_2_0;
	r2 += M4(-9.486e-03, 3.535e-02, -1.297e-03, -8.108e-03, 4.787e-03, 1.846e-02, 1.499e-01, 8.028e-03, -2.518e-02, -1.217e-01, -1.587e-01, -8.790e-02, 3.454e-02, 5.638e-02, -2.298e-02, 6.024e-03) * s0_2_0;
	r0 += M4(5.437e-02, 1.024e-01, -3.862e-01, -2.542e-02, 6.243e-02, 2.896e-02, 1.914e-01, -4.993e-02, 1.994e-02, -4.235e-01, -1.208e-01, 3.226e-02, -9.226e-02, -5.242e-02, -1.612e-01, -5.137e-02) * s0_2_1;
	r1 += M4(7.452e-02, 5.194e-02, -2.632e-01, 1.225e-01, 3.214e-02, -9.844e-02, -2.329e-02, 1.370e-02, -6.150e-02, 3.504e-02, -2.234e-02, -8.619e-03, 7.070e-02, -2.115e-03, 4.413e-02, -2.171e-02) * s0_2_1;
	r2 += M4(-8.641e-02, 5.101e-02, 1.433e-01, -6.812e-03, -1.952e-01, -2.497e-02, -2.417e-02, 2.497e-02, -2.627e-01, -1.424e-01, -5.676e-02, 4.536e-02, -3.078e-02, 2.229e-02, 3.992e-02, -3.551e-02) * s0_2_1;
	r0 += M4(-5.138e-03, -5.310e-02, -2.312e-03, 1.108e-02, 3.077e-02, -1.441e-02, 8.899e-02, -3.810e-02, -5.888e-02, -9.415e-02, -7.600e-02, -6.017e-02, 2.380e-03, 6.921e-02, 2.342e-02, -4.214e-04) * s0_2_2;
	r1 += M4(2.781e-02, 3.617e-02, 1.881e-01, 1.607e-02, -1.639e-03, -1.123e-02, 6.487e-02, -4.364e-02, 4.914e-03, -2.658e-02, -7.669e-02, -5.971e-02, 8.067e-02, 8.454e-03, -6.971e-02, 1.627e-02) * s0_2_2;
	r2 += M4(1.618e-02, 7.054e-02, 3.539e-02, 1.014e-02, 7.346e-02, 4.637e-02, -5.607e-02, -2.012e-02, 3.712e-02, -7.209e-03, -4.447e-03, -3.501e-02, 4.529e-02, 8.347e-03, 3.240e-02, 4.995e-02) * s0_2_2;
	r0 = clamp(r0, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 = clamp(r1, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 = clamp(r2, V4(0.0), V4(1.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BLUR-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0), 0)))
#define l1(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0), 0)))
#define l2(x, y) V4((conv4_mul * texelFetch(conv4_raw, clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0), 0)))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.857e-03, -1.084e-02, -1.128e-03, -1.048e-03, 3.456e-02, -1.323e-03, -5.876e-04, 2.452e-05, -3.023e-02, -3.360e-03, -2.801e-03, 6.810e-04, 2.111e-02, 2.281e-03, 2.813e-03, -9.852e-04) * s0_0_0;
	r0 += M4(-1.077e-03, 2.302e-02, 1.649e-03, 1.213e-03, 7.830e-02, 1.110e-01, 2.572e-04, -3.332e-03, -1.013e-01, -7.439e-02, 8.910e-03, 5.834e-04, -8.940e-02, 4.050e-02, 1.746e-02, 5.747e-04) * s0_0_1;
	r0 += M4(5.728e-05, -1.269e-02, -4.551e-05, -8.679e-05, 7.520e-04, -2.593e-03, -1.258e-03, -2.340e-03, -5.927e-03, -5.204e-02, -5.742e-04, 2.549e-04, 4.322e-03, -4.192e-02, 1.262e-04, -3.773e-03) * s0_0_2;
	r0 += M4(-1.226e-01, 3.886e-03, 2.421e-02, 3.964e-04, 9.929e-02, -4.735e-03, 1.011e-01, -6.055e-03, -1.164e-02, 6.087e-03, -5.016e-02, 1.469e-03, 8.574e-02, 1.164e-03, 9.644e-02, 3.808e-03) * s0_1_0;
	r0 += M4(-1.985e-01, -3.466e-01, -2.552e-02, -5.483e-03, 3.132e-03, 1.295e-01, 1.222e-01, 2.638e-01, 1.708e-01, 4.747e-02, -3.241e-01, -2.485e-01, -2.241e-01, 1.813e-01, -3.565e-01, 1.717e-01) * s0_1_1;
	r0 += M4(1.248e-03, 3.080e-02, 6.669e-03, 4.927e-03, 1.151e-04, -8.339e-03, -2.642e-03, 5.562e-03, 1.057e-03, 1.051e-01, 2.627e-03, -1.073e-01, -2.321e-03, -7.739e-02, 1.090e-02, -1.219e-01) * s0_1_2;
	r0 += M4(-4.039e-03, -3.002e-03, 1.103e-01, 3.189e-03, -5.136e-04, 2.088e-03, 1.630e-02, -5.751e-04, 2.377e-05, 1.401e-05, 5.135e-03, 5.879e-04, 7.931e-04, 4.353e-05, 2.851e-02, 6.021e-04) * s0_2_0;
	r0 += M4(8.362e-03, 1.145e-02, 1.377e-01, 2.472e-01, -6.326e-04, -6.435e-03, -1.719e-02, 3.247e-03, 3.035e-03, 3.550e-03, 9.795e-02, 4.162e-02, 5.324e-03, 2.740e-03, -1.017e-02, 5.778e-02) * s0_2_1;
	r0 += M4(-2.126e-03, -7.466e-03, 1.064e-03, 1.011e-02, -4.247e-04, -4.795e-04, -3.369e-04, -5.739e-03, 6.987e-04, 3.824e-05, 4.491e-04, 5.139e-02, 1.233e-04, -9.401e-03, -1.880e-03, -2.045e-02) * s0_2_2;
	r0 += M4(6.321e-02, 6.131e-03, -5.174e-04, 3.060e-04, 2.527e-05, 2.834e-04, 8.107e-07, -1.638e-05, 4.980e-02, 3.847e-03, 5.898e-02, -1.982e-03, 9.259e-03, 2.299e-03, -4.011e-03, -4.721e-04) * s1_0_0;
	r0 += M4(2.968e-02, 9.058e-02, 2.047e-03, 2.426e-03, -1.674e-03, 7.327e-03, 1.507e-03, 1.185e-03, 4.633e-03, -3.272e-01, -1.630e-02, -5.728e-02, 2.549e-01, 1.586e-01, 2.915e-03, 9.855e-03) * s1_0_1;
	r0 += M4(4.679e-04, 6.214e-03, 1.446e-04, -2.747e-07, -1.798e-03, -5.729e-03, -5.434e-06, 7.987e-04, 2.318e-04, 1.760e-03, -1.093e-03, -4.858e-04, 2.463e-03, 9.216e-02, 3.393e-04, -7.640e-03) * s1_0_2;
	r0 += M4(-1.685e-01, 2.643e-03, 1.056e-01, 1.033e-02, -6.798e-02, 1.228e-03, 5.188e-03, -1.242e-03, 1.668e-01, -1.112e-02, 9.513e-02, 8.851e-03, 4.365e-03, 1.155e-02, 3.665e-03, 5.951e-03) * s1_1_0;
	r0 += M4(-1.919e-01, -3.684e-01, 6.563e-02, 1.340e-01, -4.464e-02, -1.958e-01, -4.256e-02, -6.788e-04, -1.848e-02, -6.828e-04, 1.584e-02, -3.412e-01, -6.962e-03, -3.277e-02, -2.998e-01, -2.487e-01) * s1_1_1;
	r0 += M4(1.632e-03, -6.555e-03, 1.158e-03, 1.012e-02, 4.804e-03, 6.737e-02, 5.651e-03, 1.840e-02, 1.760e-04, 1.592e-03, 3.160e-03, 3.742e-03, 5.498e-04, 1.875e-02, 3.042e-03, -6.363e-02) * s1_1_2;
	r0 += M4(-8.609e-04, -1.792e-03, -6.330e-02, -1.534e-02, -3.676e-02, 1.945e-03, -1.222e-01, 7.440e-03, 1.229e-03, 2.521e-03, 6.474e-02, -6.044e-03, 1.816e-04, -6.186e-05, -6.239e-03, 3.652e-05) * s1_2_0;
	r0 += M4(1.370e-03, 1.021e-02, -7.690e-02, -1.004e-01, -2.318e-02, -7.140e-02, 7.261e-04, -2.666e-01, 2.670e-03, -4.755e-03, -5.051e-03, 5.356e-02, 4.124e-04, 1.012e-03, 1.436e-02, 2.093e-04) * s1_2_1;
	r0 += M4(1.184e-03, -6.114e-04, 1.457e-03, -1.852e-02, 2.686e-03, -1.569e-03, 2.787e-04, 5.334e-02, -4.326e-04, -2.164e-03, -8.153e-04, -3.186e-03, 1.184e-04, 1.604e-04, -8.034e-03, -5.085e-04) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.274e-02, -2.601e-03, -1.001e-02, 1.657e-03, -4.058e-03, 1.626e-04, 2.785e-04, 3.046e-05, -1.406e-03, 7.035e-07, 7.125e-08, -1.496e-07, -4.245e-03, -1.087e-03, -9.282e-04, -1.932e-04) * s0_0_0;
	r0 += M4(1.305e-01, 3.135e-02, -2.331e-03, 6.074e-03, -1.322e-02, -1.976e-02, -9.791e-03, -3.622e-03, 9.471e-03, -2.297e-03, 1.210e-03, -6.248e-05, 2.768e-02, -3.363e-03, -5.045e-03, 3.069e-03) * s0_0_1;
	r0 += M4(1.756e-03, 5.170e-02, -9.563e-04, -1.007e-03, -3.526e-03, 2.881e-03, 1.485e-03, 9.336e-04, 4.665e-03, 3.411e-04, -8.842e-04, 3.900e-04, -6.421e-03, 2.739e-02, 1.485e-04, 2.722e-03) * s0_0_2;
	r0 += M4(-1.381e-01, 1.341e-02, -8.817e-02, -1.053e-02, 3.832e-03, -5.877e-03, -6.320e-03, 8.584e-04, 2.728e-02, 3.383e-04, -5.090e-03, 8.213e-04, 7.750e-03, 4.620e-03, 1.157e-03, 4.465e-04) * s0_1_0;
	r0 += M4(2.180e-01, -2.588e-01, 3.370e-01, -1.255e-01, 2.513e-01, 1.662e-01, 9.529e-02, 1.934e-02, -2.791e-01, -2.910e-02, -3.082e-02, -1.775e-02, -3.564e-01, 2.918e-02, -9.399e-02, -7.932e-03) * s0_1_1;
	r0 += M4(7.530e-04, 6.958e-02, -2.178e-03, 1.195e-01, -6.794e-03, 8.789e-02, -8.275e-03, 5.070e-02, 9.097e-03, -1.695e-01, -8.153e-03, -3.907e-02, 3.279e-03, 1.675e-01, 1.001e-03, 1.184e-01) * s0_1_2;
	r0 += M4(1.036e-03, -8.574e-04, -4.684e-02, 4.445e-03, -1.985e-03, -2.844e-03, 3.709e-03, -1.988e-03, 3.375e-03, 7.673e-06, 5.378e-03, 2.150e-03, -1.908e-03, -1.637e-03, 3.546e-03, 6.199e-05) * s0_2_0;
	r0 += M4(-2.781e-03, 1.431e-02, 1.060e-02, -8.008e-02, -4.508e-03, -1.135e-03, 1.073e-01, 9.986e-02, 1.575e-03, -2.045e-02, -1.593e-01, -1.014e-01, -2.391e-02, -2.992e-02, -2.549e-01, 5.268e-03) * s0_2_1;
	r0 += M4(-1.913e-03, 4.224e-03, 9.614e-04, 8.426e-03, -9.075e-05, -3.446e-04, -9.384e-04, 3.151e-02, -8.667e-05, 5.600e-03, 4.897e-03, -6.615e-02, -1.686e-03, 4.531e-02, -1.379e-03, 1.167e-01) * s0_2_2;
	r0 += V4(4.499e-09, 3.659e-12, -1.009e-10, 2.486e-09);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
