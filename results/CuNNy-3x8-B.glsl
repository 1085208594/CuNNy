// CuNNy 3x8 BOX
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-3x8-BOX-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(4.837e-02, -5.412e-02, 1.481e-03, -6.990e-02) * s0_0_0;
	r1 += V4(9.230e-03, -1.235e-02, 2.178e-02, -3.141e-03) * s0_0_0;
	r0 += V4(-9.211e-02, -7.096e-03, 7.215e-01, 1.021e-01) * s0_0_1;
	r1 += V4(-1.551e-02, 2.431e-02, -1.758e-01, -7.175e-03) * s0_0_1;
	r0 += V4(1.510e-01, 7.146e-02, 7.095e-03, -4.996e-02) * s0_0_2;
	r1 += V4(6.017e-03, -1.080e-02, 1.448e-01, 1.068e-02) * s0_0_2;
	r0 += V4(1.725e-02, 4.021e-01, 5.648e-05, 2.993e-01) * s0_1_0;
	r1 += V4(7.331e-01, 3.280e-02, 9.672e-03, -7.637e-01) * s0_1_0;
	r0 += V4(2.877e-01, 4.735e-02, -7.324e-01, -8.883e-02) * s0_1_1;
	r1 += V4(-7.324e-01, -9.596e-02, -3.166e-01, 2.501e-02) * s0_1_1;
	r0 += V4(-4.045e+00, -2.417e-01, 5.464e-03, -2.239e-02) * s0_1_2;
	r1 += V4(-4.148e-03, -5.848e-02, -1.840e-01, 2.517e-03) * s0_1_2;
	r0 += V4(1.615e-02, 3.276e-01, 7.910e-04, -2.646e-01) * s0_2_0;
	r1 += V4(-1.414e-02, -1.121e-02, -2.495e-02, 7.661e-01) * s0_2_0;
	r0 += V4(-5.156e-02, -5.260e-01, 8.706e-03, 3.477e-01) * s0_2_1;
	r1 += V4(2.485e-02, -5.961e-01, 5.517e-01, -1.461e-02) * s0_2_1;
	r0 += V4(1.246e-01, -2.653e-02, -1.067e-02, -3.998e-02) * s0_2_2;
	r1 += V4(-9.764e-03, 7.332e-01, -6.289e-03, -1.358e-02) * s0_2_2;
	r0 += V4(2.753e-02, -7.523e-04, 4.645e-04, 4.849e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.873e-04, 2.753e-06, 1.290e-02, 4.263e-04);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-3x8-BOX-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(4.892e-01, -8.620e-01, -8.522e-02, -1.235e-01, 8.004e-03, -6.823e-02, -5.255e-02, -3.638e-02, -5.038e-03, 2.338e-02, 3.118e-02, 4.904e-04, -1.393e-01, -2.590e-02, 1.157e-01, -7.175e-02) * s0_0_0;
	r1 += M4(1.239e-01, 1.907e-02, -1.056e-01, 1.323e-02, 2.199e-01, -1.189e-01, -1.028e-01, 4.548e-02, 1.990e-02, -1.092e-02, 5.506e-02, -1.672e-02, -8.449e-02, 4.055e-02, -7.947e-03, 4.343e-02) * s0_0_0;
	r0 += M4(-1.044e-01, 1.978e-01, -3.851e-02, -1.346e-01, -2.196e-01, 5.430e-01, -1.090e-01, -2.882e-03, 1.925e-02, -3.564e-02, -1.877e-02, 9.091e-02, 2.050e-01, 3.130e-01, 4.655e-02, 1.175e-01) * s0_0_1;
	r1 += M4(-1.519e-01, 1.472e-01, 1.228e-01, 1.379e-01, 7.790e-02, -5.502e-02, -1.675e-01, -6.582e-02, 3.213e-02, -2.333e-02, -3.215e-02, 5.266e-02, 7.159e-02, -9.594e-02, -3.096e-03, -1.499e-01) * s0_0_1;
	r0 += M4(-2.146e-02, -4.296e-02, 1.339e-01, -2.727e-02, -9.523e-02, -1.359e-02, -3.442e-01, -4.281e-02, 5.389e-02, 1.017e-02, -4.044e-02, 2.594e-02, -1.101e-01, -2.545e-01, -1.408e-01, -7.951e-03) * s0_0_2;
	r1 += M4(7.688e-02, 1.572e-02, -3.924e-02, -1.559e-02, 2.717e-02, 9.570e-03, 2.707e-02, -9.323e-02, -3.944e-02, 4.963e-02, -5.897e-03, -1.483e-03, -4.061e-02, 1.158e-02, 2.279e-02, -4.625e-02) * s0_0_2;
	r0 += M4(1.419e-01, -1.000e+00, 1.621e-01, -6.489e-01, 9.515e-02, -5.671e-02, 1.737e-01, 1.505e-02, -1.148e-01, 4.456e-03, -1.162e-01, -1.654e-01, -2.468e-02, 2.363e-02, 5.435e-02, -2.906e-02) * s0_1_0;
	r1 += M4(-1.784e-02, -6.891e-02, 2.130e-01, 2.971e-01, 1.597e-01, 1.824e-02, -1.802e-01, 3.853e-01, -1.763e-01, 4.440e-02, -7.029e-04, 1.118e-02, 4.838e-02, -3.628e-02, 1.259e-01, -8.081e-02) * s0_1_0;
	r0 += M4(3.065e-01, -5.820e-01, 2.732e-01, 5.173e-02, -1.529e-01, 1.929e-01, -1.003e-02, 1.137e-01, -2.420e-01, -1.000e+00, 6.634e-02, 1.290e-01, 2.146e-02, -2.668e-01, -9.072e-02, 1.755e-02) * s0_1_1;
	r1 += M4(4.012e-02, 1.126e-01, -8.056e-02, 1.531e-01, -1.985e-02, -9.158e-02, 4.092e-01, -4.405e-02, -4.109e-02, 2.079e-01, 9.837e-02, 2.168e-01, -8.592e-02, 4.391e-02, 1.325e-01, -3.300e-01) * s0_1_1;
	r0 += M4(1.992e-02, 9.922e-02, -4.149e-01, -1.038e-01, 4.507e-02, -1.449e-01, 2.226e-01, -2.210e-02, 2.666e-01, -1.400e-01, 1.724e-01, 9.917e-02, 1.599e-01, 4.757e-01, -2.398e-01, 2.754e-01) * s0_1_2;
	r1 += M4(-1.131e-01, 6.955e-02, -4.999e-02, -5.241e-02, 1.645e-01, -3.213e-01, -1.722e-01, 2.652e-03, 2.237e-01, 3.643e-02, -1.769e-01, -7.356e-03, -1.963e-01, 3.975e-01, 2.881e-01, -2.232e-02) * s0_1_2;
	r0 += M4(2.507e-01, 7.099e-03, -2.460e-01, 1.033e-01, 9.817e-03, 3.424e-02, 1.947e-02, 7.682e-03, -2.854e-02, 4.925e-02, -8.114e-02, 1.003e-01, -7.180e-02, -1.628e-02, -1.343e-01, -4.430e-02) * s0_2_0;
	r1 += M4(1.752e-01, 2.726e-01, 8.726e-01, 5.119e-01, 3.839e-03, -5.474e-03, -2.077e-02, -9.613e-02, -6.260e-02, -5.081e-02, 1.888e-02, -5.061e-02, 9.664e-02, -1.049e-01, -2.002e-01, -9.105e-02) * s0_2_0;
	r0 += M4(8.551e-02, 1.841e-01, -3.075e-01, -7.397e-02, -4.981e-02, -9.469e-02, -6.399e-02, 1.305e-03, 1.783e-01, 1.721e-01, -7.441e-01, 4.080e-01, -1.998e-02, -8.973e-02, 2.007e-01, 2.628e-02) * s0_2_1;
	r1 += M4(-4.909e-02, 1.925e-01, -9.730e-02, 2.731e-01, -2.660e-02, -3.916e-02, 6.716e-02, -5.475e-02, 3.838e-01, 1.000e+00, -1.526e-01, 2.980e-02, 8.454e-02, -9.003e-02, -1.795e-01, 2.380e-01) * s0_2_1;
	r0 += M4(2.382e-03, -7.957e-02, 2.133e-01, -8.384e-05, 3.911e-02, 5.711e-02, 7.036e-02, 1.938e-02, 2.217e-01, 1.602e-01, 2.901e-01, -1.767e-02, 9.500e-03, -7.966e-02, 1.412e-01, -1.012e-01) * s0_2_2;
	r1 += M4(-7.493e-02, 4.558e-02, 1.636e-01, -1.616e-01, 3.113e-02, -3.438e-03, -7.101e-02, 3.307e-01, 3.598e-01, 2.437e-01, -2.014e-01, 9.185e-02, 1.003e-01, -1.968e-01, -2.656e-01, 3.865e-01) * s0_2_2;
	r0 += M4(3.406e-02, 7.765e-02, 1.784e-02, -8.587e-04, 2.212e-01, -2.425e-02, 3.773e-02, 6.184e-01, -1.212e-01, 5.322e-02, 9.822e-02, 1.168e-01, -5.254e-03, 4.120e-02, 8.001e-02, 1.135e-02) * s1_0_0;
	r1 += M4(-5.220e-02, 2.767e-02, -1.898e-02, -7.246e-02, 1.014e-01, -9.611e-02, 3.561e-01, 2.112e-02, 1.529e-01, 1.421e-01, 2.857e-01, 1.620e-01, -1.254e-02, 1.165e-02, -2.288e-02, 2.176e-02) * s1_0_0;
	r0 += M4(1.450e-01, -7.569e-01, 9.612e-02, 2.011e-01, 4.287e-01, -1.000e+00, -2.160e-01, -1.867e-02, 4.618e-01, 1.115e-01, 8.490e-02, 2.447e-01, 2.970e-01, 1.392e-01, -5.275e-02, 1.353e-01) * s1_0_1;
	r1 += M4(2.478e-03, 8.639e-02, 1.042e-01, 8.586e-02, -4.440e-01, 2.101e-01, 3.305e-01, 7.373e-02, 3.973e-02, -3.769e-02, -1.310e-01, 1.284e-01, 1.218e-01, -5.991e-02, -1.872e-01, -1.480e-01) * s1_0_1;
	r0 += M4(2.371e-01, -1.753e-01, 1.301e-01, 4.444e-01, -3.431e-02, 2.835e-02, -4.261e-04, 1.168e-01, 1.287e-03, 2.567e-01, -1.294e-01, -7.361e-02, 4.978e-01, -8.262e-01, -7.391e-02, 2.783e-01) * s1_0_2;
	r1 += M4(6.699e-02, 8.015e-02, -9.949e-03, 1.255e-01, -2.293e-02, 1.184e-01, 1.607e-01, 1.588e-02, -6.418e-02, -9.344e-02, -2.211e-02, 4.180e-02, -1.229e-01, -6.781e-02, -1.567e-01, 2.385e-02) * s1_0_2;
	r0 += M4(-6.529e-02, 6.096e-02, -6.075e-02, 6.838e-02, 3.340e-01, 3.572e-02, -1.133e-02, 1.203e-01, -2.529e-01, 3.363e-03, 1.315e-01, 1.237e-01, -1.488e-02, 4.027e-02, 6.134e-02, -4.563e-02) * s1_1_0;
	r1 += M4(-1.645e-01, 4.679e-02, 1.099e-01, -1.377e-01, 1.933e-02, 9.234e-02, -5.097e-01, -9.394e-01, 3.520e-02, 8.095e-02, 2.037e-01, -1.243e-01, 1.264e-02, 3.869e-02, -2.590e-02, -3.865e-02) * s1_1_0;
	r0 += M4(2.486e-01, -1.000e+00, 8.110e-02, -3.085e-01, 1.451e-01, -2.577e-01, -7.993e-01, -4.889e-02, 6.403e-02, 8.935e-02, 1.994e-01, -4.071e-02, 4.245e-01, 1.546e-02, -2.839e-01, 6.603e-02) * s1_1_1;
	r1 += M4(-2.244e-01, 2.961e-01, -1.213e-01, -3.633e-01, -1.951e-01, 2.809e-01, 5.576e-01, 4.796e-01, 1.206e-01, -6.285e-02, -2.443e-01, 4.088e-01, -1.606e-01, 3.337e-02, -1.808e-01, -5.255e-01) * s1_1_1;
	r0 += M4(5.706e-01, 3.087e-02, 1.000e+00, 2.421e-02, 3.399e-02, 2.632e-04, 1.994e-02, 3.661e-02, 2.373e-02, 1.480e-01, 6.323e-01, 1.471e-01, 3.471e-01, -1.000e+00, 1.968e-01, -3.154e-01) * s1_1_2;
	r1 += M4(1.000e+00, 7.803e-01, -3.527e-01, 2.159e-01, 1.631e-01, 1.948e-02, -1.423e-01, 3.623e-02, 4.544e-02, -2.080e-01, 3.850e-01, -1.410e-01, -3.735e-01, 1.257e-01, -4.060e-01, -1.000e+00) * s1_1_2;
	r0 += M4(-4.114e-02, 1.397e-02, -1.089e-01, 2.936e-02, 6.918e-02, 6.514e-02, 5.098e-02, 7.113e-02, -2.021e-01, -1.095e-01, -3.510e-01, -2.862e-02, -1.822e-02, -2.594e-03, -9.694e-02, -2.196e-04) * s1_2_0;
	r1 += M4(-1.236e-01, -1.443e-02, 1.504e-01, -9.553e-02, -3.800e-03, 2.071e-02, 1.063e-01, 3.618e-03, -9.722e-03, 3.408e-01, -1.141e-01, 7.045e-01, 7.985e-03, 2.241e-02, -4.101e-03, 7.358e-02) * s1_2_0;
	r0 += M4(-1.238e-01, -1.282e-01, -6.627e-02, 1.339e-02, -6.564e-02, 3.244e-02, -1.195e-01, 3.039e-02, 6.928e-02, -4.114e-02, -2.568e-01, -5.087e-02, 2.251e-01, 1.013e-01, 6.352e-02, 5.973e-02) * s1_2_1;
	r1 += M4(1.826e-02, -1.098e-01, 3.749e-01, 2.595e-02, 1.019e-02, -3.944e-03, 2.828e-01, -2.116e-01, -5.664e-02, -1.052e-01, -2.016e-02, -5.830e-02, -6.518e-02, -1.694e-01, 5.423e-02, -3.836e-01) * s1_2_1;
	r0 += M4(-1.152e-01, 4.323e-01, 2.846e-01, 3.184e-01, -2.861e-02, 5.286e-02, -5.207e-02, 2.941e-02, -2.305e-03, 6.318e-02, 3.615e-01, 6.636e-02, -9.239e-02, 6.110e-02, 2.549e-01, 1.179e-01) * s1_2_2;
	r1 += M4(2.093e-01, 2.008e-01, -5.505e-02, -6.302e-01, 4.702e-02, 5.098e-02, 1.724e-02, 7.388e-02, 8.620e-02, 5.684e-02, 9.950e-02, 6.746e-02, 5.270e-02, 2.471e-02, 4.522e-01, -3.383e-01) * s1_2_2;
	r0 += V4(-1.044e-02, -1.331e-02, -7.058e-03, 2.799e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.484e-03, 2.947e-03, 4.474e-03, -8.079e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-3x8-BOX-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-6.418e-02, -5.421e-02, 3.288e-02, 1.819e-02, -7.600e-02, -1.586e-01, 2.302e-01, 1.587e-01, -1.507e-01, -2.191e-01, -2.500e-02, 2.337e-03, -3.175e-02, -5.189e-02, 5.180e-03, -2.511e-02) * s0_0_0;
	r1 += M4(7.788e-02, 4.768e-02, 4.117e-02, 5.376e-02, 2.304e-01, -3.537e-02, 7.142e-02, 1.561e-01, 2.849e-02, -6.424e-02, 1.643e-02, -4.827e-02, -5.227e-03, -3.600e-02, -6.109e-02, -1.070e-01) * s0_0_0;
	r0 += M4(8.668e-02, -1.832e-02, 1.225e-01, 8.718e-02, 2.386e-01, 1.526e-01, 2.686e-01, 3.016e-01, -6.159e-01, -3.545e-01, -8.036e-02, 1.265e-01, 8.617e-03, 3.773e-02, -2.243e-02, 2.180e-02) * s0_0_1;
	r1 += M4(1.623e-02, 6.563e-04, -1.782e-01, -4.822e-02, 2.675e-01, -4.479e-02, -4.426e-01, -3.575e-01, -1.691e-02, -2.669e-02, -8.331e-02, -3.558e-02, 6.225e-02, -4.743e-02, -5.368e-02, -1.295e-01) * s0_0_1;
	r0 += M4(2.981e-02, 6.186e-02, 1.373e-02, 5.264e-02, 8.270e-03, 5.956e-02, -5.230e-02, 1.946e-01, -3.431e-01, -3.059e-01, -5.518e-02, 5.096e-02, -1.095e-03, 3.060e-02, -3.176e-02, -4.236e-02) * s0_0_2;
	r1 += M4(-4.800e-02, 7.689e-02, 8.651e-02, 5.983e-02, 3.631e-02, 2.898e-02, 1.583e-01, -7.580e-02, -1.968e-02, -1.094e-01, 3.430e-02, 1.350e-01, 4.738e-02, -3.888e-02, 4.817e-02, -1.053e-01) * s0_0_2;
	r0 += M4(1.018e-01, 3.035e-02, -9.022e-03, -9.303e-02, 3.215e-01, 2.019e-01, 1.347e-01, 1.426e-02, -5.266e-01, -3.253e-01, -5.403e-03, 5.974e-02, -8.930e-02, 3.602e-02, -9.353e-02, -5.825e-02) * s0_1_0;
	r1 += M4(6.580e-03, 7.075e-02, 1.230e-01, 4.226e-01, -2.047e-01, 1.435e-01, -3.801e-02, 4.934e-02, -6.091e-02, -2.750e-03, -3.869e-02, -6.525e-02, -3.325e-01, -6.763e-02, -5.309e-03, -4.279e-01) * s0_1_0;
	r0 += M4(-6.164e-02, 7.698e-03, 1.174e-01, -1.252e-01, -6.522e-01, -2.554e-01, -7.677e-01, -1.027e-01, -7.275e-01, -2.484e-01, -1.445e-01, -3.319e-03, -3.701e-01, 7.577e-02, -6.465e-01, 2.586e-01) * s0_1_1;
	r1 += M4(6.616e-02, 2.787e-01, 6.440e-01, 6.359e-01, 3.544e-02, 5.567e-02, -1.000e+00, -6.195e-01, -2.458e-01, -6.766e-02, -6.698e-02, -1.240e-01, -5.086e-03, -2.510e-01, -2.416e-01, -7.615e-01) * s0_1_1;
	r0 += M4(1.965e-01, 2.934e-01, 1.408e-01, -1.153e-01, 1.583e-01, -3.970e-01, 5.710e-02, 1.625e-01, -4.672e-01, -2.647e-01, -5.227e-02, 2.920e-02, 5.176e-01, -1.059e-01, 2.172e-01, -1.452e-01) * s0_1_2;
	r1 += M4(2.276e-01, 3.705e-01, 2.186e-01, 3.500e-02, 4.144e-01, 6.961e-01, -4.758e-02, -5.940e-01, 1.643e-03, -1.345e-02, 1.817e-02, -6.977e-02, 4.617e-01, -5.040e-01, -7.679e-02, -4.088e-01) * s0_1_2;
	r0 += M4(6.843e-02, 1.904e-01, 4.162e-02, -5.110e-03, 4.833e-02, 1.571e-01, -2.717e-02, 1.299e-01, -2.881e-01, -1.938e-01, -4.384e-02, -3.890e-02, 1.090e-01, -8.578e-02, -1.418e-02, 3.438e-02) * s0_2_0;
	r1 += M4(1.918e-03, -2.917e-02, -8.179e-02, 2.466e-01, 2.531e-02, 1.015e-01, 1.135e-01, 7.364e-02, 1.600e-02, -2.301e-02, -1.126e-02, -6.243e-03, 5.243e-02, -2.394e-03, 1.106e-01, -5.497e-01) * s0_2_0;
	r0 += M4(5.801e-01, 2.368e-01, 1.242e-01, -7.397e-02, 1.483e-01, -1.203e-01, -8.239e-02, 2.918e-01, -4.029e-01, -2.087e-01, -9.657e-02, 2.319e-02, -9.662e-02, -3.442e-01, 2.097e-01, -4.204e-02) * s0_2_1;
	r1 += M4(-5.827e-02, -2.150e-02, -3.443e-02, 1.303e-02, 2.856e-01, -1.326e-01, -2.170e-01, -1.751e-01, 5.102e-02, 5.419e-02, -5.070e-02, 5.794e-02, -1.235e-01, 4.510e-02, 1.515e-01, -4.923e-01) * s0_2_1;
	r0 += M4(2.616e-01, 1.465e-01, -2.758e-02, -4.635e-02, 6.474e-02, -6.376e-04, -2.554e-02, -7.456e-03, -2.587e-01, -1.723e-01, 7.336e-03, 2.779e-02, -2.949e-01, 1.890e-01, 1.144e-01, -1.313e-02) * s0_2_2;
	r1 += M4(7.788e-02, -8.119e-01, -2.467e-02, 7.930e-02, 4.437e-01, 1.000e+00, -3.626e-02, -4.555e-01, 1.091e-01, 6.296e-02, 4.533e-02, 2.863e-02, -3.546e-01, 1.000e+00, -5.204e-02, -2.573e-01) * s0_2_2;
	r0 += M4(2.663e-01, 2.388e-01, 4.528e-02, -1.341e-01, -3.340e-02, -2.890e-02, -3.097e-02, 3.361e-02, 2.913e-02, 3.096e-02, 1.033e-01, -8.800e-02, -3.333e-01, -1.901e-01, -4.914e-02, 1.302e-01) * s1_0_0;
	r1 += M4(-1.697e-01, 1.443e-02, 4.191e-02, 1.020e-01, 8.909e-02, 6.757e-02, 4.766e-02, 8.576e-02, -1.616e-01, 4.651e-02, 1.163e-02, 4.999e-02, -2.359e-02, -9.237e-02, -2.867e-01, 2.130e-01) * s1_0_0;
	r0 += M4(4.633e-01, 4.268e-01, -2.632e-02, -4.587e-02, -1.817e-01, -3.650e-01, 2.997e-01, 7.103e-02, -1.525e-01, -5.765e-02, 1.411e-01, 1.761e-01, -1.156e-01, 2.183e-01, -1.270e-01, -2.373e-01) * s1_0_1;
	r1 += M4(-5.080e-01, 9.861e-02, 1.007e-01, -3.092e-02, 2.764e-01, 4.382e-02, 4.984e-02, 2.782e-01, -3.486e-01, 9.197e-03, -4.971e-01, -3.551e-01, -6.475e-01, 5.222e-02, -2.057e-01, -1.748e-01) * s1_0_1;
	r0 += M4(3.308e-01, 2.666e-01, -3.306e-02, -3.205e-02, -2.646e-01, -7.945e-02, -1.401e-02, 1.018e-01, 3.661e-01, 6.570e-02, -4.878e-03, 7.073e-03, -1.647e-01, -1.983e-01, -4.164e-02, -2.361e-01) * s1_0_2;
	r1 += M4(-1.577e-01, 1.528e-01, -4.934e-02, 1.436e-01, -1.279e-01, 9.504e-02, -8.625e-02, 2.921e-02, -2.183e-01, -1.566e-01, -5.126e-02, -2.985e-02, 3.719e-02, 5.039e-03, -1.598e-01, 2.369e-01) * s1_0_2;
	r0 += M4(5.715e-01, 3.545e-01, -5.116e-02, -7.209e-02, -2.202e-01, -1.093e-01, -3.697e-03, 7.401e-02, 1.174e-01, 4.725e-02, 1.579e-02, 6.506e-04, 9.352e-02, 3.046e-02, 1.366e-01, -6.942e-02) * s1_1_0;
	r1 += M4(8.959e-02, 4.994e-02, 2.195e-01, 9.607e-02, 9.248e-02, -6.910e-02, -2.233e-01, 1.654e-02, 1.342e-02, 5.357e-02, 1.255e-01, 5.379e-02, -1.202e-01, 4.407e-03, 2.133e-01, 4.965e-02) * s1_1_0;
	r0 += M4(9.950e-01, 4.757e-01, 2.111e-01, 5.066e-01, -4.226e-01, 9.106e-02, 2.118e-01, 4.150e-01, -6.721e-02, -1.781e-01, 3.358e-01, -7.182e-03, -5.841e-02, 1.713e-01, -4.065e-02, -7.642e-02) * s1_1_1;
	r1 += M4(4.309e-01, 6.010e-02, 5.027e-01, 7.508e-03, 3.231e-01, 1.926e-01, 2.118e-01, 4.749e-01, -7.992e-02, 9.351e-02, 8.150e-02, -1.218e-02, 2.138e-01, 2.267e-01, -6.241e-01, 1.285e-01) * s1_1_1;
	r0 += M4(3.163e-01, 2.708e-01, 8.877e-03, -2.461e-02, -3.299e-01, -3.525e-01, 6.055e-03, 2.898e-03, -1.527e-03, 1.566e-01, 2.693e-02, 1.873e-02, -4.751e-01, -1.354e-01, -1.512e-01, -4.302e-02) * s1_1_2;
	r1 += M4(6.466e-02, 9.289e-02, -1.558e-01, 2.921e-01, 7.390e-02, -7.020e-01, -4.006e-02, -1.700e-01, -2.900e-01, 4.167e-01, 3.344e-02, 1.184e-01, -1.013e-01, 7.184e-01, -3.199e-01, 1.712e-01) * s1_1_2;
	r0 += M4(2.795e-01, 2.472e-01, -1.174e-02, 2.921e-02, -1.389e-01, -5.780e-02, -6.976e-03, -7.926e-03, -2.688e-02, 7.013e-02, 2.022e-03, -2.891e-02, 7.415e-02, -1.012e-01, -1.492e-02, 7.718e-02) * s1_2_0;
	r1 += M4(2.176e-02, 5.257e-03, 4.479e-03, 1.609e-01, 3.074e-03, 8.771e-04, -7.140e-02, 1.548e-01, 2.596e-02, 1.574e-02, -4.606e-02, 2.489e-01, 2.158e-01, 6.223e-02, 1.509e-01, -6.476e-03) * s1_2_0;
	r0 += M4(4.385e-01, 2.231e-01, 5.566e-02, -5.752e-02, -4.330e-01, -1.807e-01, -1.276e-01, -3.799e-02, 2.559e-02, 8.341e-02, 1.542e-02, 8.001e-03, -1.155e-01, -1.549e-01, 1.604e-01, -4.420e-02) * s1_2_1;
	r1 += M4(1.412e-01, 2.877e-02, 1.034e-01, 6.866e-02, -7.479e-04, 6.233e-02, 8.066e-03, 2.887e-01, -1.237e-02, 6.567e-02, -3.845e-02, 1.772e-01, -1.419e-01, -1.150e-01, 3.096e-01, -1.521e-01) * s1_2_1;
	r0 += M4(2.959e-01, 1.450e-01, 3.562e-02, 2.148e-02, -3.425e-01, -2.266e-01, 4.554e-02, -6.401e-03, 1.743e-01, -7.653e-03, -2.686e-02, -1.652e-02, -1.932e-01, -5.945e-02, 1.452e-02, -5.370e-04) * s1_2_2;
	r1 += M4(-1.747e-01, -3.157e-01, -1.134e-02, 1.523e-01, 6.145e-02, -3.010e-01, 2.386e-02, 1.372e-01, 2.027e-03, -2.682e-01, 3.080e-02, 6.964e-02, -5.188e-02, 1.100e-01, 7.495e-02, -2.118e-02) * s1_2_2;
	r0 += V4(2.375e-02, 1.312e-02, 3.898e-02, -1.154e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(1.083e-03, -1.151e-02, 1.157e-02, 8.265e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-3x8-BOX-conv3
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.568e-01, 1.831e-01, 1.336e-02, -5.633e-01, -2.614e-01, -2.881e-01, -2.374e-03, 4.781e-01, 1.876e-01, 5.157e-02, -6.834e-04, 4.998e-01, 3.336e-02, 6.860e-02, 6.153e-02, -3.644e-01) * s0_0_0;
	r1 += M4(6.187e-02, -4.116e-02, 2.373e-01, -4.204e-02, -3.763e-03, 7.360e-02, -1.035e-02, 1.041e-01, 1.038e-01, 7.303e-02, -8.081e-02, -7.381e-03, -4.171e-02, -6.898e-02, -3.799e-02, 1.954e-02) * s0_0_0;
	r0 += M4(-3.855e-01, -2.840e-01, -5.752e-01, 8.486e-01, 1.877e-02, 1.809e-01, 7.721e-01, -7.246e-01, -7.930e-02, 8.879e-02, 1.227e-01, -1.263e-01, 7.450e-02, 1.233e-01, -2.823e-01, 2.413e-01) * s0_0_1;
	r1 += M4(7.326e-02, -1.597e-01, 5.874e-01, -7.080e-03, -1.635e-01, 9.394e-02, -8.327e-01, -3.696e-02, -4.700e-02, 1.236e-01, -3.011e-01, -8.459e-02, 6.371e-02, -5.262e-02, 9.732e-02, -3.507e-02) * s0_0_1;
	r0 += M4(2.392e-01, 3.725e-01, -2.328e-01, -3.154e-01, -7.790e-02, -2.701e-01, 3.707e-01, 2.016e-01, -3.765e-02, -5.530e-02, -3.172e-01, 2.306e-02, -3.360e-02, -5.212e-02, 6.319e-02, -6.198e-02) * s0_0_2;
	r1 += M4(-5.530e-02, 8.027e-03, -1.765e-01, 1.692e-02, 6.959e-02, -1.891e-02, 1.448e-01, -7.617e-03, -7.106e-02, -6.219e-02, -2.677e-02, 4.655e-02, -8.403e-03, 1.866e-02, 3.602e-02, -1.795e-02) * s0_0_2;
	r0 += M4(5.801e-01, 6.045e-02, -2.387e-01, -1.726e-01, -7.107e-01, -5.473e-02, 1.947e-01, 2.104e-01, -1.443e-01, -1.014e-01, -3.478e-02, 1.822e-01, 3.985e-01, 5.641e-01, -5.750e-02, 9.359e-01) * s0_1_0;
	r1 += M4(-3.984e-01, -1.246e-01, -5.488e-01, -4.253e-02, 3.116e-01, 1.118e-01, 8.096e-02, 2.930e-02, 2.713e-01, 4.292e-02, -3.223e-02, -2.560e-03, 2.133e-01, 3.921e-02, 1.471e-01, 2.044e-02) * s0_1_0;
	r0 += M4(-5.791e-01, -1.225e-01, 7.701e-01, -2.996e-03, 9.356e-01, -2.319e-02, -8.237e-01, -6.439e-01, 1.000e+00, 5.392e-02, -2.588e-01, 3.556e-01, -3.606e-01, -4.541e-01, 1.883e-01, -3.299e-01) * s0_1_1;
	r1 += M4(2.521e-02, 7.208e-02, -4.493e-01, -2.348e-01, 2.126e-02, -1.493e-01, 1.000e+00, 2.856e-01, 6.696e-01, 8.409e-01, 8.647e-01, -2.510e-01, 1.012e-01, -2.783e-01, -1.814e-01, 5.824e-01) * s0_1_1;
	r0 += M4(1.109e-03, -4.967e-02, 3.076e-01, -2.007e-03, -2.529e-01, -1.511e-01, -6.541e-01, 2.646e-01, -1.606e-01, 9.169e-02, 1.757e-01, -8.016e-02, 1.421e-01, 1.607e-01, -7.570e-01, -4.830e-02) * s0_1_2;
	r1 += M4(-2.306e-02, -7.936e-02, -6.289e-03, 1.622e-02, 5.643e-02, 8.962e-03, 2.306e-02, 9.416e-03, -6.858e-02, 5.443e-02, -2.135e-01, 5.379e-03, -1.920e-03, -5.315e-02, 4.748e-04, 5.757e-02) * s0_1_2;
	r0 += M4(-1.703e-01, 2.146e-02, 2.306e-02, 1.353e-01, 5.496e-02, 5.163e-02, 1.274e-01, -3.006e-02, 8.586e-02, 2.447e-02, -8.138e-03, -2.438e-02, 1.904e-01, 1.046e-01, -6.141e-02, 1.942e-01) * s0_2_0;
	r1 += M4(1.372e-01, -4.654e-04, 3.175e-01, 2.106e-02, -4.724e-02, -2.466e-02, -1.653e-02, -1.988e-02, -6.028e-02, -6.855e-02, 1.734e-03, 4.243e-02, 6.008e-02, -2.394e-02, -3.238e-01, -5.001e-02) * s0_2_0;
	r0 += M4(6.186e-02, -3.431e-02, -3.233e-01, -5.188e-02, 2.976e-02, -3.791e-02, 2.209e-01, -4.771e-02, -2.651e-01, -1.108e-01, 1.175e-01, 2.139e-02, -5.268e-02, 2.532e-02, -3.089e-01, -3.630e-02) * s0_2_1;
	r1 += M4(-7.789e-02, -3.785e-02, -1.317e-02, 3.219e-02, -1.401e-01, 2.382e-02, -3.761e-01, -1.620e-02, -4.412e-03, -2.191e-01, -5.918e-01, 4.262e-02, -2.325e-01, -3.095e-01, -4.577e-01, 2.499e-02) * s0_2_1;
	r0 += M4(3.582e-02, 2.166e-02, 2.983e-02, 4.138e-02, -5.051e-02, -1.020e-02, 7.628e-02, -4.486e-02, 1.204e-01, 1.358e-02, -1.063e-01, -7.082e-02, 2.065e-01, 1.475e-02, -9.199e-02, 8.516e-02) * s0_2_2;
	r1 += M4(-1.500e-02, 2.085e-02, 1.264e-01, 1.193e-02, 1.772e-02, 2.271e-02, -3.091e-02, -4.020e-02, 2.968e-02, -6.466e-02, 6.490e-02, 2.642e-02, 6.343e-03, -8.839e-02, -4.802e-01, 2.950e-02) * s0_2_2;
	r0 += M4(-1.919e-01, -1.409e-01, 7.234e-02, -4.519e-01, -6.929e-01, -5.206e-01, -3.722e-01, -1.000e+00, 1.733e-02, 5.096e-02, -7.399e-02, 1.331e-01, 8.350e-02, 3.818e-01, 2.037e-01, -6.156e-02) * s1_0_0;
	r1 += M4(1.548e-01, -3.640e-02, 1.447e-01, 1.153e-02, -4.073e-01, -5.737e-02, -3.858e-01, -9.979e-02, -4.917e-02, 2.997e-02, -3.760e-02, -1.733e-02, 2.329e-01, 8.603e-02, 1.308e-01, 7.968e-02) * s1_0_0;
	r0 += M4(-8.334e-02, 5.815e-02, 7.184e-01, 3.211e-02, 1.245e-01, -9.895e-02, -1.000e+00, 2.075e-01, 3.986e-02, -4.039e-02, -2.979e-01, -1.175e-01, -2.070e-02, 2.733e-01, -9.958e-02, 1.218e-01) * s1_0_1;
	r1 += M4(2.108e-03, 3.624e-02, -9.397e-02, -8.667e-02, 3.918e-02, 3.709e-02, -4.458e-01, -5.151e-02, -2.952e-02, 5.830e-03, 2.405e-02, 4.906e-03, 2.549e-01, 4.485e-02, 1.714e-01, 1.176e-01) * s1_0_1;
	r0 += M4(-2.838e-02, -1.587e-01, 2.886e-01, -9.014e-02, -3.158e-02, 3.245e-02, -5.347e-02, 1.902e-02, 2.296e-02, -8.545e-03, -1.260e-01, 6.811e-02, -6.311e-02, -3.387e-02, -2.744e-02, -1.355e-01) * s1_0_2;
	r1 += M4(1.202e-02, -6.319e-03, 9.545e-02, 3.042e-03, -2.944e-02, -1.612e-02, 7.016e-02, 5.301e-03, 7.814e-03, -3.702e-02, 2.458e-02, 2.460e-02, -6.197e-02, 5.675e-03, 1.859e-02, 6.949e-02) * s1_0_2;
	r0 += M4(-1.354e-01, -2.759e-01, 7.150e-02, -9.401e-01, -8.036e-01, -1.676e-01, -1.193e-01, -1.714e-01, -1.967e-01, -1.527e-01, 1.032e-02, -1.646e-01, -1.887e-02, 6.482e-02, -1.042e-01, -1.174e-01) * s1_1_0;
	r1 += M4(-1.892e-01, -1.533e-01, 1.403e-01, 6.422e-02, -2.304e-01, -1.345e-01, -8.742e-01, -8.981e-02, 1.762e-02, 1.136e-01, 1.431e-01, -6.091e-02, 1.696e-01, 1.864e-01, -8.872e-02, -6.822e-03) * s1_1_0;
	r0 += M4(-4.286e-01, -2.605e-01, 6.325e-03, 2.920e-01, -1.352e-01, 3.380e-03, -1.052e-01, 6.805e-02, 4.262e-01, 6.738e-01, 2.822e-01, 7.532e-02, 2.095e-01, 4.738e-01, 1.106e-01, 3.456e-01) * s1_1_1;
	r1 += M4(2.160e-01, -1.783e-01, 4.302e-01, 6.671e-02, 1.586e-02, 7.257e-02, -1.158e-01, -8.258e-02, -3.506e-01, 1.375e-01, 9.563e-02, 2.067e-01, 4.046e-01, 2.907e-01, 3.649e-02, 2.681e-01) * s1_1_1;
	r0 += M4(-8.141e-02, 4.199e-02, 1.314e-01, -7.891e-02, 9.608e-03, 1.058e-02, -1.670e-02, -3.341e-02, -1.745e-01, -1.979e-01, 6.508e-01, -4.081e-02, -1.347e-02, 5.459e-02, 1.881e-01, -8.529e-02) * s1_1_2;
	r1 += M4(-2.343e-02, -3.022e-02, 1.954e-01, -2.670e-02, 2.658e-02, 7.077e-03, -7.306e-02, -1.654e-02, -8.913e-02, 5.409e-02, -2.183e-01, -5.344e-02, 2.174e-02, 5.004e-02, -1.512e-01, 6.130e-02) * s1_1_2;
	r0 += M4(-1.452e-01, -4.382e-02, 1.228e-01, -1.521e-01, 7.018e-03, -2.999e-02, -1.504e-02, -3.958e-02, -1.022e-01, -6.728e-03, 1.145e-02, -6.353e-02, -1.293e-02, 7.142e-02, -1.005e-02, 5.895e-02) * s1_2_0;
	r1 += M4(2.777e-02, 7.187e-02, 3.182e-01, 4.131e-02, -1.699e-02, 7.289e-03, 6.963e-02, -6.979e-04, -3.794e-02, 1.401e-02, 2.650e-02, 3.034e-02, -2.237e-02, -1.742e-02, -3.073e-02, 7.788e-02) * s1_2_0;
	r0 += M4(-2.967e-01, -8.096e-02, 9.204e-02, -1.053e-01, -8.481e-02, 2.301e-02, 3.239e-03, 7.497e-02, 1.274e-01, -2.544e-02, 2.701e-02, -3.376e-02, -2.401e-02, -1.848e-01, -3.055e-02, -1.014e-01) * s1_2_1;
	r1 += M4(2.140e-02, 1.153e-01, 3.584e-01, -2.033e-02, 1.713e-02, 2.876e-02, 7.429e-02, -2.939e-03, 4.718e-02, 1.320e-01, 5.579e-03, -4.352e-02, 1.564e-02, 1.357e-01, 1.002e-01, 3.791e-02) * s1_2_1;
	r0 += M4(-2.163e-02, -2.472e-02, 5.772e-02, -3.139e-02, 6.861e-02, 3.836e-03, -1.236e-02, -6.318e-02, -2.900e-01, 6.125e-02, -2.084e-01, -1.213e-03, -1.121e-01, 2.040e-02, -1.583e-01, -9.381e-02) * s1_2_2;
	r1 += M4(1.158e-02, -4.188e-02, -7.140e-02, -2.317e-03, 3.896e-03, 4.848e-03, -1.164e-02, -1.029e-03, -8.978e-02, 2.047e-02, 3.210e-01, 6.441e-03, -1.572e-02, -7.363e-02, -1.864e-02, 3.351e-02) * s1_2_2;
	r0 += V4(-3.479e-02, -9.892e-03, -7.584e-03, -3.773e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.545e-02, -2.582e-02, -8.819e-03, 5.238e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-3x8-BOX-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv3
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(5.872e-02, -1.151e-02, -1.448e-02, 9.642e-03, -3.261e-02, -2.241e-03, 2.847e-03, -9.030e-04, 4.914e-02, 1.602e-02, -2.886e-02, -6.425e-03, 4.869e-03, -2.182e-03, -1.962e-03, 2.613e-03) * s0_0_0;
	r0 += M4(7.224e-02, -1.353e-01, -1.727e-02, 6.184e-02, 3.430e-02, 6.881e-02, 1.443e-02, -2.582e-02, -9.456e-03, 3.108e-02, -8.492e-03, -1.094e-02, 3.359e-02, 9.535e-04, -7.020e-04, -3.917e-03) * s0_0_1;
	r0 += M4(-6.061e-03, 7.487e-03, -3.617e-03, -5.974e-03, -3.280e-03, 2.309e-02, 2.533e-04, 1.909e-02, 5.996e-04, -4.723e-03, 1.206e-03, 1.022e-03, -5.364e-03, -3.983e-03, 8.479e-03, 1.210e-02) * s0_0_2;
	r0 += M4(7.406e-02, -1.535e-02, 1.133e-01, -5.052e-03, -1.420e-01, 4.480e-02, -1.067e-01, 2.019e-02, -5.059e-01, -1.519e-01, 3.851e-01, 2.125e-01, 6.017e-02, -3.376e-02, 1.431e-02, -1.608e-02) * s0_1_0;
	r0 += M4(2.529e-01, -1.479e-01, 3.857e-01, -5.535e-01, 2.301e-01, -4.482e-01, 2.075e-01, 8.030e-02, 9.306e-02, -2.280e-01, 4.090e-02, 1.179e-01, -5.045e-01, 4.380e-01, -9.425e-02, 2.247e-01) * s0_1_1;
	r0 += M4(-1.351e-02, 8.914e-03, -3.033e-02, 5.526e-02, -2.349e-02, 1.440e-01, -2.679e-02, 3.577e-02, -2.004e-02, 1.478e-02, -3.666e-03, 1.615e-02, 2.489e-03, 1.234e-01, -4.908e-02, 3.181e-02) * s0_1_2;
	r0 += M4(1.145e-02, 5.494e-03, 1.483e-02, 8.701e-03, -3.628e-02, -7.523e-03, -7.202e-02, -1.165e-02, -2.974e-02, -4.699e-02, 1.380e-01, 4.362e-02, -5.325e-03, -5.171e-03, 2.260e-02, -6.884e-03) * s0_2_0;
	r0 += M4(-3.620e-04, -1.584e-02, 2.291e-02, 7.633e-02, -4.389e-02, 7.297e-02, -4.436e-02, -2.104e-01, -2.179e-02, -3.467e-02, -2.072e-02, 6.420e-02, 7.885e-02, -2.840e-03, -1.752e-01, 1.694e-01) * s0_2_1;
	r0 += M4(-2.355e-03, -1.285e-03, -4.065e-03, 1.155e-02, -1.404e-02, -1.154e-02, -2.656e-02, -2.787e-03, 1.079e-03, 2.315e-03, 3.130e-03, -4.222e-03, -1.570e-02, -1.310e-02, -3.165e-02, 3.654e-02) * s0_2_2;
	r0 += M4(-1.387e-02, 5.052e-03, -7.986e-03, 3.148e-03, 5.579e-02, 1.900e-03, 6.997e-03, 1.286e-03, 7.997e-02, -1.242e-02, 6.039e-04, 4.966e-03, -1.226e-01, -4.823e-02, -5.259e-02, -1.663e-03) * s1_0_0;
	r0 += M4(-1.459e-01, -6.997e-02, 4.757e-02, 1.005e-02, 1.636e-01, 1.753e-01, 2.982e-02, -1.255e-02, 5.330e-02, 1.499e-01, -4.013e-02, -1.282e-02, 5.638e-03, -9.204e-02, -8.886e-03, -1.086e-01) * s1_0_1;
	r0 += M4(-1.014e-02, -8.472e-02, -9.962e-03, -9.588e-03, 2.582e-02, 5.846e-02, 5.951e-03, 3.329e-02, 1.813e-02, -3.789e-04, 1.171e-02, 1.132e-02, -2.857e-03, -2.191e-04, -3.760e-03, -8.271e-03) * s1_0_2;
	r0 += M4(8.355e-02, 6.058e-03, 1.111e-01, -3.111e-02, 5.897e-02, 3.894e-02, 1.107e-01, 1.581e-02, 1.096e-01, 4.467e-03, -2.123e-01, 6.517e-02, 8.425e-03, -5.210e-02, -1.082e-01, -1.642e-01) * s1_1_0;
	r0 += M4(1.430e-01, 1.868e-01, -5.267e-01, -5.366e-02, -4.287e-01, -3.774e-01, -4.161e-02, 1.255e-01, 2.468e-01, 3.466e-01, -9.736e-02, -5.020e-01, 9.496e-02, 2.046e-01, 1.645e-01, 3.178e-01) * s1_1_1;
	r0 += M4(-5.791e-02, -7.240e-02, 3.869e-02, -1.477e-01, 3.357e-02, 4.388e-03, -3.575e-03, -1.997e-02, -3.118e-03, 1.382e-02, -1.389e-02, 1.683e-02, 5.671e-03, 8.069e-04, 9.517e-03, 1.066e-02) * s1_1_2;
	r0 += M4(-1.536e-03, 9.646e-03, 3.772e-02, 2.570e-02, 1.548e-02, 1.103e-03, -1.594e-02, 1.404e-02, -1.141e-02, -5.830e-03, 1.024e-03, -1.440e-03, -1.169e-03, -1.138e-02, 3.198e-03, -9.979e-03) * s1_2_0;
	r0 += M4(-1.332e-02, -8.845e-03, 1.791e-01, 7.544e-02, 1.334e-02, 2.219e-02, -9.302e-02, -9.963e-02, -1.036e-02, -1.896e-02, 1.788e-02, 4.365e-02, 3.358e-03, 1.896e-02, -1.009e-02, 9.212e-03) * s1_2_1;
	r0 += M4(-3.629e-03, -2.668e-02, 3.071e-02, 5.164e-02, 5.102e-03, 1.422e-02, -1.718e-02, -4.576e-02, -1.788e-03, -2.411e-03, -2.842e-03, 1.534e-02, -1.345e-05, -1.790e-03, 3.980e-04, -2.423e-03) * s1_2_2;
	r0 += V4(-2.992e-08, -2.974e-08, -2.989e-08, -2.973e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
