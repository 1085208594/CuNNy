// CuNNy 1x8 BOX
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-1x8-BOX-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(1.342e+00, 1.974e-04, -8.276e-02, -3.833e-01) * s0_0_0;
	r1 += V4(1.472e-01, 1.649e-01, -1.028e-01, 7.639e-01) * s0_0_0;
	r0 += V4(-1.595e+01, -5.979e-01, 5.614e-02, 2.184e-02) * s0_0_1;
	r1 += V4(-8.516e-02, -2.646e-02, 1.008e-02, -2.783e-01) * s0_0_1;
	r0 += V4(9.812e-01, -1.489e-01, 7.526e-01, 4.834e-01) * s0_0_2;
	r1 += V4(2.051e-01, 6.795e-02, 1.285e-01, -2.375e-02) * s0_0_2;
	r0 += V4(-1.027e-02, -3.098e-01, 5.228e-02, 4.943e-02) * s0_1_0;
	r1 += V4(-4.385e-01, 4.365e-01, 3.202e-01, -1.509e-01) * s0_1_0;
	r0 += V4(-2.982e-02, 1.141e+00, -6.767e-01, 6.040e-01) * s0_1_1;
	r1 += V4(1.685e-01, -1.034e-01, -5.718e-01, -4.202e-01) * s0_1_1;
	r0 += V4(3.280e-01, -1.806e-02, -1.062e-01, -3.772e-01) * s0_1_2;
	r1 += V4(-1.543e-01, -1.255e-01, -4.322e-02, 1.140e-01) * s0_1_2;
	r0 += V4(-3.454e-03, -1.334e-02, 2.708e-02, 2.029e-01) * s0_2_0;
	r1 += V4(-6.044e-02, -7.460e-03, 1.817e-02, -1.403e-02) * s0_2_0;
	r0 += V4(3.457e-01, -1.227e-01, 2.170e-01, -3.896e-01) * s0_2_1;
	r1 += V4(1.958e-01, -2.744e-01, 1.812e-01, 9.619e-02) * s0_2_1;
	r0 += V4(-2.483e-02, 7.971e-02, -2.384e-01, -2.092e-01) * s0_2_2;
	r1 += V4(8.347e-02, -1.181e-02, 5.095e-02, -8.602e-02) * s0_2_2;
	r0 += V4(1.135e-01, 4.566e-03, -3.020e-04, -5.132e-05);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.527e-01, 1.635e-01, 3.213e-01, -1.367e-05);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-1x8-BOX-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-2.460e-02, -3.730e-02, 1.201e-02, 1.602e-02, -5.389e-02, -1.440e-01, -2.094e-01, 5.097e-02, 1.743e-01, 2.056e-01, -1.977e-01, 1.272e-02, -2.582e-01, -8.778e-01, 3.776e-02, -8.663e-02) * s0_0_0;
	r1 += M4(-3.891e-02, 1.570e-02, -3.544e-03, 7.264e-03, -1.547e-01, -2.105e-01, -2.448e-01, -2.887e-02, 1.419e-01, 2.603e-01, -1.358e-01, -4.781e-03, -4.834e-02, -6.583e-01, 1.219e-01, 2.483e-03) * s0_0_0;
	r0 += M4(1.448e-02, 1.004e-01, 2.236e-02, 1.210e-02, 2.488e-02, 6.621e-02, 1.392e-01, -6.941e-02, 5.440e-02, 5.724e-02, -1.000e+00, 2.934e-02, -3.658e-01, -4.043e-01, 4.938e-01, -3.041e-02) * s0_0_1;
	r1 += M4(-1.483e-02, 3.174e-02, 4.015e-02, 1.743e-02, -1.111e-01, 2.471e-02, 2.347e-01, -4.454e-02, 7.906e-02, 8.925e-02, -2.113e-01, -2.141e-02, -5.360e-02, -1.934e-01, 3.233e-01, 5.325e-02) * s0_0_1;
	r0 += M4(-1.498e-02, -2.022e-02, -4.717e-02, -1.496e-02, -2.128e-02, -1.603e-01, -1.440e-02, 1.525e-02, 4.711e-02, 9.260e-02, -1.552e-01, -6.507e-02, -1.685e-01, -1.255e-01, 1.228e-01, 5.525e-02) * s0_0_2;
	r1 += M4(-5.267e-03, 3.877e-02, 3.735e-02, 4.778e-03, 7.650e-03, -7.985e-02, -6.505e-02, 5.784e-02, 1.126e-02, 3.438e-02, -1.617e-01, -6.320e-02, 6.161e-02, -6.853e-02, 2.226e-01, 4.165e-02) * s0_0_2;
	r0 += M4(3.649e-02, 5.417e-02, 1.066e-02, 4.417e-03, -2.961e-02, -2.469e-02, 9.301e-02, 2.736e-02, 2.417e-01, 8.422e-01, 6.396e-01, -1.085e-01, 1.155e-01, -2.150e-02, 5.974e-02, 1.050e-01) * s0_1_0;
	r1 += M4(-1.000e+00, 3.673e-02, -2.229e-02, 1.424e-02, 6.063e-01, -8.631e-02, -6.464e-01, -9.595e-02, 1.980e-01, 2.689e-01, -1.000e+00, 9.794e-02, -2.296e-02, -6.997e-01, 7.038e-01, 5.835e-02) * s0_1_0;
	r0 += M4(2.404e-02, -1.000e+00, -4.660e-01, 7.984e-02, -1.311e-01, -1.288e-01, 4.067e-01, -1.000e+00, 4.240e-01, 1.362e-01, -4.110e-01, 4.654e-01, -1.000e+00, -7.604e-01, 1.189e-01, -1.284e-01) * s0_1_1;
	r1 += M4(7.239e-02, 1.098e-02, -6.010e-02, 1.388e-01, -6.018e-02, -2.926e-01, -1.000e+00, -1.486e-02, 5.962e-02, 4.717e-01, -3.096e-01, 1.976e-01, -1.239e-01, -5.991e-01, 2.608e-01, -6.162e-04) * s0_1_1;
	r0 += M4(-1.510e-02, 4.343e-02, 7.779e-02, 1.591e-02, -1.000e+00, 1.632e-02, -6.893e-02, 2.118e-01, 1.062e-01, 1.615e-01, 3.404e-02, -1.086e-01, -3.657e-01, -3.035e-01, 3.534e-02, 3.606e-02) * s0_1_2;
	r1 += M4(1.042e-02, -3.590e-02, 4.821e-02, 3.748e-02, 4.000e-02, -1.104e-01, 4.324e-03, 8.259e-02, -1.655e-02, 1.294e-01, -9.252e-02, -8.698e-02, 2.367e-03, -1.760e-01, 1.959e-01, 4.818e-02) * s0_1_2;
	r0 += M4(-6.035e-02, 5.433e-02, 8.498e-02, 3.111e-02, -6.498e-03, -4.447e-01, 5.010e-02, 1.463e-02, -1.170e-01, 3.584e-01, -3.059e-02, -3.142e-02, -2.908e-01, -2.679e-01, 6.639e-02, -1.082e-01) * s0_2_0;
	r1 += M4(-1.000e+00, -1.000e+00, 9.504e-02, 8.744e-02, -4.365e-01, 4.870e-02, -3.038e-02, 1.034e-01, -1.931e-01, 1.885e-01, -1.077e-01, -8.143e-02, 4.964e-03, -2.628e-01, 9.784e-02, -6.986e-02) * s0_2_0;
	r0 += M4(1.307e-02, 8.770e-02, -4.802e-02, 4.109e-01, 2.222e-01, -1.514e-01, -7.024e-02, 3.529e-01, 8.053e-01, 6.793e-02, -5.687e-02, 2.439e-02, -3.135e-01, -3.603e-01, 5.487e-03, 1.155e-01) * s0_2_1;
	r1 += M4(9.011e-02, 1.077e-01, 2.349e-01, 5.254e-01, -4.751e-02, 5.337e-01, 6.766e-01, 2.901e-01, -7.306e-02, 2.015e-01, -3.792e-01, -1.962e-01, -8.808e-02, -2.319e-01, -1.167e-01, 1.293e-02) * s0_2_1;
	r0 += M4(7.447e-02, -8.169e-03, 5.296e-03, 6.470e-02, 1.536e-01, 1.454e-01, -3.015e-02, 1.665e-01, 7.694e-02, -1.480e-02, 6.912e-02, -3.660e-02, -3.955e-01, -2.034e-03, 6.974e-03, 2.475e-02) * s0_2_2;
	r1 += M4(2.625e-02, -3.704e-02, -7.379e-04, 8.872e-02, 6.774e-02, 1.945e-01, -2.145e-01, -4.968e-02, -7.298e-02, -3.321e-03, -7.995e-02, -8.105e-02, 3.257e-02, -1.330e-02, 8.379e-02, 2.449e-02) * s0_2_2;
	r0 += M4(-4.560e-02, -1.647e-01, 2.938e-01, -5.523e-02, -2.472e-01, -8.012e-01, -1.542e-01, 4.579e-02, 1.302e-02, 4.815e-01, 6.038e-01, 2.711e-02, -1.916e-02, 3.014e-01, 1.421e-02, 2.831e-02) * s1_0_0;
	r1 += M4(-1.771e-01, 2.484e-01, -1.894e-01, -2.920e-02, -8.863e-02, -6.466e-01, 2.298e-01, -3.225e-02, -1.940e-02, 2.983e-01, -6.261e-02, -5.972e-02, -5.724e-02, 1.919e-01, -5.171e-02, 1.791e-02) * s1_0_0;
	r0 += M4(4.623e-02, 6.043e-02, -2.516e-01, -1.434e-01, -3.696e-01, 9.374e-02, -2.111e-01, 4.839e-01, 9.972e-02, -3.784e-01, -7.486e-01, -1.587e-01, 2.243e-02, -1.196e-01, 2.489e-02, -1.730e-01) * s1_0_1;
	r1 += M4(-2.367e-01, 6.933e-02, -2.774e-01, 1.135e-01, -3.278e-01, -2.416e-01, 4.554e-01, -9.282e-02, 2.491e-01, -9.766e-02, 1.389e-02, 9.980e-02, 1.153e-01, -2.862e-01, -8.939e-02, 7.099e-02) * s1_0_1;
	r0 += M4(4.677e-01, -4.856e-02, -1.317e-01, 9.834e-02, -9.605e-02, 3.764e-01, 3.166e-01, -2.764e-01, -2.852e-01, -4.532e-01, 3.479e-02, -6.256e-02, -4.441e-01, -3.115e-01, -5.137e-01, -8.223e-02) * s1_0_2;
	r1 += M4(-5.678e-02, -7.545e-02, 1.243e-01, 1.282e-01, -2.017e-01, 1.341e-01, 3.150e-02, -8.315e-02, 1.277e-01, 2.049e-02, -2.202e-01, -2.730e-02, 1.073e-01, -3.200e-01, -2.124e-01, 2.104e-02) * s1_0_2;
	r0 += M4(1.804e-01, 1.462e-01, 2.478e-01, 1.470e-01, 1.939e-01, 4.285e-01, 1.936e-02, 9.259e-02, -1.185e-01, 1.270e-01, 3.879e-01, 1.092e-01, 4.366e-02, 7.940e-02, 1.167e-01, -4.347e-02) * s1_1_0;
	r1 += M4(-3.899e-01, -5.621e-02, 2.665e-01, 1.505e-01, 2.716e-01, 4.794e-01, -9.778e-02, 5.198e-02, -4.427e-02, -6.049e-01, -3.948e-01, 6.469e-02, -7.887e-01, 1.811e-01, -3.024e-01, 4.784e-02) * s1_1_0;
	r0 += M4(1.441e-01, -3.838e-01, -2.317e-01, -6.180e-01, 1.432e-01, -5.660e-02, -1.853e-01, -1.821e-01, 2.745e-01, 4.315e-02, -1.515e-01, 1.394e-01, 4.079e-01, 5.339e-01, 1.000e+00, -4.274e-01) * s1_1_1;
	r1 += M4(-2.507e-01, -9.519e-01, 2.936e-01, -1.655e-01, 4.575e-01, 5.762e-01, -3.400e-01, 5.383e-02, 5.819e-01, 3.965e-01, 6.630e-01, 2.833e-01, 2.641e-01, -3.948e-01, -5.907e-01, 3.852e-01) * s1_1_1;
	r0 += M4(-5.337e-01, 4.993e-01, 4.775e-01, 3.490e-01, -7.237e-02, -2.168e-01, 1.595e-01, 3.340e-02, -5.578e-02, -2.034e-01, -8.526e-02, -1.037e-01, 1.511e-01, 3.310e-01, -1.387e-01, 5.057e-01) * s1_1_2;
	r1 += M4(3.612e-03, 1.194e-01, 4.752e-01, 4.081e-01, -3.403e-02, 9.423e-02, -2.008e-01, -1.123e-01, -9.726e-02, -6.666e-02, -2.102e-01, -3.842e-01, 1.218e-01, -3.820e-01, -2.309e-01, 1.716e-01) * s1_1_2;
	r0 += M4(-1.056e-01, -7.826e-03, 6.227e-02, -2.508e-01, -4.028e-02, 9.656e-02, 2.526e-02, -2.411e-01, 5.063e-02, -1.853e-01, 6.247e-02, -6.447e-02, -3.325e-02, -4.188e-01, 1.270e-01, -2.027e-02) * s1_2_0;
	r1 += M4(4.092e-01, 1.615e-02, 2.120e-01, -1.426e-01, -7.693e-02, 9.208e-02, -9.758e-02, -8.240e-02, -4.889e-02, -8.569e-03, 1.471e-01, 3.080e-02, -8.487e-01, -1.238e-01, 2.192e-01, 6.277e-02) * s1_2_0;
	r0 += M4(-2.381e-01, -3.207e-01, 1.373e-02, 6.914e-02, 2.163e-01, 3.167e-01, -1.921e-01, 3.113e-02, -2.922e-01, 9.963e-02, -2.472e-01, 3.288e-01, -3.436e-01, -7.884e-01, 1.248e-01, -1.609e-01) * s1_2_1;
	r1 += M4(2.940e-01, -3.135e-01, -5.371e-01, -3.794e-03, 4.003e-01, 1.227e-01, -1.107e-01, 1.440e-04, -3.718e-01, 1.242e-01, -4.197e-02, 5.097e-02, 2.732e-01, -5.580e-03, 1.000e+00, 2.104e-01) * s1_2_1;
	r0 += M4(1.720e-03, -2.196e-01, 4.085e-03, 2.207e-01, 4.098e-01, 1.388e-01, 6.606e-02, 8.365e-02, 1.389e-01, 2.436e-01, 1.116e-01, -2.868e-01, 3.778e-01, -6.938e-01, -1.449e-01, 4.723e-01) * s1_2_2;
	r1 += M4(1.913e-02, -2.272e-01, -1.071e-01, -2.349e-02, 7.581e-03, 4.093e-02, 2.690e-02, 4.018e-02, 5.361e-02, 1.406e-01, 2.646e-01, 4.556e-02, 3.681e-02, -4.394e-01, -1.245e-01, -3.855e-01) * s1_2_2;
	r0 += V4(4.314e-02, 1.063e-01, -1.075e-01, 5.033e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.318e-01, 1.137e-01, -1.082e-01, -1.038e-01);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-1x8-BOX-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv1
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.814e-02, -3.275e-02, 2.985e-02, 3.821e-02, 1.825e-02, -1.624e-02, -6.873e-03, -4.234e-03, -1.289e-03, -8.323e-04, 1.873e-03, -1.568e-04, 4.692e-02, 5.288e-03, 5.090e-03, -2.032e-02) * s0_0_0;
	r0 += M4(3.445e-02, 2.153e-01, -6.408e-02, -5.677e-02, -3.821e-02, 1.716e-02, -2.682e-02, -2.564e-02, -1.193e-02, -4.507e-03, 6.216e-03, -2.596e-03, -3.058e-02, -9.541e-02, 4.338e-02, 8.663e-02) * s0_0_1;
	r0 += M4(1.765e-02, 9.070e-03, 1.391e-03, -1.553e-02, -1.272e-03, -3.384e-02, 1.082e-03, -7.835e-03, -2.191e-02, 5.377e-05, 3.836e-03, 1.129e-02, -4.895e-02, 3.868e-03, -4.192e-03, 4.381e-02) * s0_0_2;
	r0 += M4(1.184e-01, 4.268e-01, -6.284e-01, 3.290e-02, 7.882e-02, -3.162e-02, 3.114e-02, -6.714e-02, 3.314e-03, 2.751e-03, -1.321e-02, -4.413e-03, -8.378e-02, 1.383e-01, -9.837e-02, 7.295e-02) * s0_1_0;
	r0 += M4(1.189e-01, -3.020e-01, 2.417e-01, -1.191e-01, -4.349e-01, 8.423e-02, 5.060e-02, 1.646e-01, 2.033e-01, -2.215e-03, -5.820e-02, -6.421e-02, 4.272e-01, -2.284e-01, 8.450e-02, -6.895e-01) * s0_1_1;
	r0 += M4(-7.251e-02, 1.728e-02, 1.536e-03, 3.260e-02, 5.159e-02, -2.433e-01, 4.430e-02, 8.621e-02, -6.926e-03, 2.052e-01, -2.755e-02, 1.706e-02, -2.814e-02, 2.114e-02, -7.324e-02, 6.070e-02) * s0_1_2;
	r0 += M4(-6.476e-02, -4.584e-02, 9.489e-02, 7.968e-03, -2.058e-02, 1.318e-02, 1.622e-02, -1.648e-02, -2.270e-03, 7.036e-04, 1.001e-02, 9.000e-03, -3.267e-02, 1.785e-03, -2.278e-02, 4.575e-02) * s0_2_0;
	r0 += M4(-2.458e-02, -6.735e-02, 6.908e-02, -7.085e-03, 1.194e-01, -8.178e-02, -1.676e-02, 1.597e-01, 6.763e-02, -3.461e-02, 3.506e-01, 6.860e-02, -5.858e-02, -1.347e-02, 5.736e-02, 8.765e-02) * s0_2_1;
	r0 += M4(-6.809e-02, 3.786e-02, -6.323e-02, 7.494e-02, 6.812e-02, 1.870e-01, -4.963e-02, -2.648e-01, -4.310e-02, 2.213e-02, -3.808e-02, 2.183e-01, 1.657e-02, 2.460e-02, -2.996e-03, -4.709e-02) * s0_2_2;
	r0 += M4(-8.149e-03, 3.652e-03, -3.482e-03, 4.472e-03, 1.659e-02, -1.013e-02, -2.328e-03, 2.975e-03, 3.184e-02, -5.278e-03, -1.301e-03, -7.047e-03, -3.357e-02, 6.929e-03, 1.315e-02, 3.845e-02) * s1_0_0;
	r0 += M4(3.106e-02, -1.230e-02, 4.219e-03, -1.115e-02, 4.670e-02, 3.464e-02, -1.251e-02, -5.655e-02, -9.057e-02, 7.691e-02, 9.595e-02, -1.849e-02, 1.265e-01, 1.255e-01, -2.159e-02, -3.521e-02) * s1_0_1;
	r0 += M4(-3.073e-02, -3.984e-03, 5.041e-03, 1.014e-02, -1.516e-02, 4.186e-02, -3.368e-03, -1.545e-02, 8.750e-04, -1.155e-01, 6.606e-02, 1.095e-01, 5.295e-02, -2.130e-02, 1.137e-02, -4.788e-02) * s1_0_2;
	r0 += M4(6.386e-03, 1.012e-02, -5.302e-03, 8.758e-03, 5.599e-03, -6.372e-02, 3.967e-02, -2.651e-02, -2.803e-02, -3.772e-02, 2.020e-02, -1.031e-02, 4.259e-02, 8.091e-03, 6.917e-02, -2.208e-02) * s1_1_0;
	r0 += M4(1.134e-01, -1.274e-01, 6.142e-02, -1.040e-01, -4.482e-01, 7.176e-02, 1.114e-01, 1.607e-01, 1.830e-01, 1.617e-01, -3.248e-01, -4.869e-02, -7.559e-01, -3.993e-01, -2.434e-01, 2.627e-01) * s1_1_1;
	r0 += M4(1.294e-01, 3.718e-01, -6.627e-02, 1.255e-01, 8.645e-02, -2.838e-01, 4.647e-02, 2.095e-01, -5.827e-02, 1.062e-01, 4.878e-02, 8.801e-03, 5.719e-02, -7.447e-02, 8.862e-02, -1.525e-01) * s1_1_2;
	r0 += M4(-1.581e-02, 1.100e-02, -1.101e-02, -7.397e-03, 1.849e-02, -1.573e-03, -4.197e-03, -1.267e-02, -8.030e-03, -1.489e-02, 2.938e-02, 1.533e-02, 2.564e-02, 1.825e-02, -8.537e-02, -4.353e-02) * s1_2_0;
	r0 += M4(-7.192e-03, -6.316e-02, 1.218e-01, -3.650e-02, 4.948e-02, 1.062e-03, -1.337e-01, 7.982e-02, -9.164e-04, -3.282e-02, 3.129e-02, 2.554e-02, 5.879e-02, 1.028e-01, -1.209e-01, -1.632e-01) * s1_2_1;
	r0 += M4(-7.396e-02, -3.479e-02, 4.877e-02, 1.606e-01, 1.636e-01, 8.080e-02, 5.734e-02, -3.564e-01, 1.874e-02, 9.953e-04, -1.781e-03, -2.276e-02, -1.382e-02, -2.707e-02, 6.426e-03, 5.645e-02) * s1_2_2;
	r0 += V4(-1.469e-08, -2.967e-08, -2.978e-08, -2.984e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
