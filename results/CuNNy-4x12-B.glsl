// CuNNy 4x12 BOX
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x12-BOX-in
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(-1.180e-02, 2.921e-02, -1.708e-02, -3.549e-02) * s0_0_0;
	r1 += V4(-3.333e-02, 3.755e-02, -7.966e-03, 4.193e-01) * s0_0_0;
	r2 += V4(-9.901e-03, 5.099e-03, 1.276e-02, 1.781e-01) * s0_0_0;
	r0 += V4(-6.404e-02, 3.232e-01, -6.895e-01, 2.656e-01) * s0_0_1;
	r1 += V4(2.812e-01, 8.849e-01, -1.357e-02, 9.602e-02) * s0_0_1;
	r2 += V4(-3.796e-02, -3.514e-02, -1.620e-02, -3.232e-01) * s0_0_1;
	r0 += V4(5.030e-02, -3.564e-01, -6.252e-03, -4.889e-03) * s0_0_2;
	r1 += V4(-6.496e-02, 1.997e-02, 2.193e-02, -9.322e-02) * s0_0_2;
	r2 += V4(4.069e-02, 6.738e-01, -6.296e-03, -1.228e-01) * s0_0_2;
	r0 += V4(-2.886e-02, 1.117e-03, 1.275e-02, 2.686e-01) * s0_1_0;
	r1 += V4(3.849e-02, -2.660e-02, 2.349e-02, 1.013e-01) * s0_1_0;
	r2 += V4(1.430e-02, 9.772e-03, 2.062e-03, 1.087e-02) * s0_1_0;
	r0 += V4(-6.032e-01, -6.045e-01, 6.971e-01, -4.214e+00) * s0_1_1;
	r1 += V4(2.097e-01, -9.004e-01, -6.009e-01, -3.998e-01) * s0_1_1;
	r2 += V4(-7.998e-01, 6.749e-03, 7.207e-01, -2.234e-01) * s0_1_1;
	r0 += V4(-1.467e-02, 6.074e-01, 1.234e-03, 2.822e-01) * s0_1_2;
	r1 += V4(2.541e-01, -1.975e-02, -1.701e-02, -1.334e-01) * s0_1_2;
	r2 += V4(8.105e-01, -6.858e-01, -7.025e-01, -4.971e-02) * s0_1_2;
	r0 += V4(3.923e-02, -2.393e-02, 2.260e-03, -2.054e-02) * s0_2_0;
	r1 += V4(-1.334e-02, -2.263e-02, 5.768e-01, -6.918e-02) * s0_2_0;
	r2 += V4(-8.656e-03, -9.668e-03, -1.791e-02, -1.674e-01) * s0_2_0;
	r0 += V4(6.660e-01, -2.099e-02, -3.813e-03, 2.486e-01) * s0_2_1;
	r1 += V4(2.046e-02, 3.414e-02, 2.150e-02, -1.246e-01) * s0_2_1;
	r2 += V4(-8.330e-03, 8.864e-03, 3.935e-02, 5.159e-01) * s0_2_1;
	r0 += V4(-3.362e-02, 4.429e-02, 5.309e-03, -1.706e-02) * s0_2_2;
	r1 += V4(-2.161e-02, -5.611e-03, -5.108e-03, 2.026e-01) * s0_2_2;
	r2 += V4(-8.218e-04, 2.162e-02, -2.705e-02, 1.801e-01) * s0_2_2;
	r0 += V4(1.971e-02, 1.283e-03, -2.700e-04, 2.812e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.571e-01, 1.251e-02, 7.403e-05, -2.179e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.095e-02, 2.144e-04, 1.733e-02, -4.165e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BOX-conv1
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
#define l2(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * in_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.565e-02, -5.352e-02, 1.109e-02, -1.161e-01, -1.208e-01, 1.218e-01, 8.244e-02, 3.186e-02, 4.135e-02, -5.342e-02, -3.671e-03, -5.092e-02, 5.019e-02, 8.152e-02, -5.374e-03, -1.847e-02) * s0_0_0;
	r1 += M4(-2.382e-01, -3.642e-02, -2.232e-01, 6.338e-01, 3.272e-02, -2.888e-02, 3.943e-01, -2.261e-01, -2.513e-02, 5.957e-02, 1.043e-01, -1.046e-01, -1.339e-01, 9.104e-03, 3.779e-01, -2.147e-01) * s0_0_0;
	r2 += M4(-3.121e-02, 9.679e-02, -7.990e-02, 4.135e-02, 7.106e-02, 1.928e-01, 1.114e-01, -2.805e-02, 1.492e-02, 1.364e-01, 4.627e-02, 2.956e-02, 8.478e-02, 1.262e-02, -2.232e-01, -1.312e-02) * s0_0_0;
	r0 += M4(-6.528e-02, 2.863e-01, 9.891e-02, 6.421e-02, -1.529e-02, -1.183e-01, 5.604e-02, -5.589e-02, -8.980e-03, -1.152e-01, 7.350e-02, 4.666e-02, -6.775e-02, 2.272e-01, 2.832e-02, 2.307e-03) * s0_0_1;
	r1 += M4(6.820e-01, 2.310e-01, 4.229e-01, -2.401e-01, -2.440e-01, -3.090e-02, 2.247e-01, 1.154e-01, -1.182e-01, -3.083e-02, -5.389e-01, -1.282e-02, 3.234e-01, 1.638e-01, 1.000e+00, 3.387e-02) * s0_0_1;
	r2 += M4(-2.220e-01, 1.396e-02, 2.913e-01, -1.914e-01, -6.077e-02, 3.063e-01, -1.881e-01, -3.394e-02, -1.053e-01, -2.877e-02, 1.707e-02, -2.119e-02, 2.808e-02, -1.317e-01, 3.008e-01, 1.901e-01) * s0_0_1;
	r0 += M4(1.140e-01, 4.363e-01, -1.573e-02, -9.114e-02, 3.505e-03, -4.586e-02, 6.936e-02, 1.056e-02, -7.855e-03, -2.079e-02, 5.260e-03, 1.698e-04, -4.165e-02, -1.864e-02, 5.174e-02, -1.271e-01) * s0_0_2;
	r1 += M4(3.251e-01, -3.802e-02, 2.686e-01, 2.430e-01, -5.170e-02, -9.894e-04, 3.730e-02, -2.771e-03, -9.515e-02, 7.730e-03, -1.246e-01, 4.509e-02, 2.835e-02, 7.037e-02, 4.463e-01, 9.272e-02) * s0_0_2;
	r2 += M4(-5.909e-02, 8.978e-02, -8.231e-02, -2.250e-01, 2.438e-03, 1.914e-01, -4.320e-01, 3.731e-02, 1.195e-01, -1.074e-01, -2.495e-02, 3.132e-02, 1.173e-02, -5.396e-02, 2.641e-01, 1.083e-01) * s0_0_2;
	r0 += M4(-8.854e-02, -5.366e-01, -6.389e-02, -1.587e-01, -1.559e-01, -1.889e-01, 4.562e-02, 2.808e-05, 3.166e-01, 2.467e-01, -7.971e-02, -1.077e-01, -1.506e-01, 1.829e-01, 3.274e-02, -2.140e-02) * s0_1_0;
	r1 += M4(-1.592e-01, 2.750e-01, 1.797e-01, 3.591e-01, 1.333e-01, 1.259e-01, 2.279e-01, -2.974e-01, -1.565e-02, 1.020e-01, 1.753e-02, -1.000e+00, -6.783e-02, 2.378e-01, 1.843e-01, 1.156e-01) * s0_1_0;
	r2 += M4(2.989e-01, -2.752e-01, 2.288e-01, 1.028e-01, 2.667e-01, 1.900e-01, 1.448e-01, -2.529e-01, 3.018e-01, -3.553e-02, -3.877e-01, 1.270e-01, 3.301e-01, 1.145e-02, -2.841e-02, 9.597e-02) * s0_1_0;
	r0 += M4(-1.690e-02, 2.070e-01, 8.549e-02, 9.891e-01, 6.109e-02, 1.645e-01, 9.949e-02, 7.145e-02, -4.359e-01, -5.084e-01, 1.755e-01, -2.157e-02, 4.759e-01, -7.873e-01, 3.122e-02, 2.380e-01) * s0_1_1;
	r1 += M4(3.932e-02, 7.539e-02, -1.878e-01, -1.899e-01, 4.555e-01, 2.255e-01, 9.083e-02, 8.852e-02, 6.560e-02, 2.479e-01, 2.661e-01, -1.000e+00, 1.710e-01, -6.886e-02, 4.071e-01, 5.202e-01) * s0_1_1;
	r2 += M4(-4.065e-01, -1.891e-01, 3.452e-01, -5.809e-02, 2.047e-02, -1.021e-01, 4.883e-01, 3.172e-01, -3.420e-01, 2.241e-02, 4.862e-01, 2.646e-01, 2.954e-01, 2.735e-02, -4.393e-01, 4.730e-01) * s0_1_1;
	r0 += M4(9.383e-02, 1.869e-02, -8.538e-02, -1.181e-01, -1.846e-02, 2.151e-01, 1.123e-01, -6.318e-03, 1.309e-01, 7.305e-02, 3.643e-01, 4.415e-02, 8.976e-03, 5.030e-02, 1.306e-02, 8.336e-02) * s0_1_2;
	r1 += M4(-9.066e-02, 5.289e-02, -8.550e-02, -3.084e-01, 1.106e-01, -4.513e-02, -3.826e-02, 2.240e-01, 5.138e-02, -2.454e-01, -4.602e-01, -8.273e-02, -9.592e-02, 2.204e-01, 2.245e-01, 3.086e-01) * s0_1_2;
	r2 += M4(-1.357e-01, 5.065e-01, -1.115e-01, -1.328e-02, 4.912e-02, 6.494e-02, -4.105e-02, 6.794e-02, 1.352e-01, 6.697e-02, 1.140e-01, -2.263e-01, 1.613e-01, -6.867e-02, 1.016e-01, 1.747e-01) * s0_1_2;
	r0 += M4(6.670e-02, -1.147e-01, 1.043e-02, 2.518e-02, 3.408e-01, 2.200e-01, 4.945e-02, 2.359e-01, 3.395e-01, 5.895e-01, 1.582e-01, -3.222e-01, 1.352e-01, 5.633e-02, 5.468e-02, 2.085e-01) * s0_2_0;
	r1 += M4(-8.507e-02, 7.721e-02, -2.761e-02, 2.574e-02, -1.711e-02, 2.982e-01, 2.114e-02, -2.545e-01, 2.167e-01, -3.830e-02, -1.649e-01, -6.260e-01, 3.871e-03, 9.799e-04, 2.883e-02, -8.785e-02) * s0_2_0;
	r2 += M4(3.603e-02, -1.491e-01, -3.478e-01, 3.852e-02, -5.615e-03, -3.886e-01, 8.456e-02, 1.977e-01, -3.013e-01, 5.229e-02, -6.527e-01, -2.104e-01, 3.869e-02, 8.418e-02, 1.598e-01, -1.616e-02) * s0_2_0;
	r0 += M4(-3.142e-02, 2.449e-01, -7.315e-03, -2.368e-01, -2.097e-01, -2.325e-01, 1.323e-01, 7.194e-02, -1.500e-01, -5.202e-01, -7.696e-02, 3.412e-01, -5.079e-04, -8.858e-02, 7.169e-02, 5.750e-02) * s0_2_1;
	r1 += M4(6.717e-02, -1.166e-02, 6.725e-02, -8.426e-02, -1.094e-01, 2.529e-01, 1.021e-01, 2.588e-01, -1.298e-01, -2.318e-01, 3.232e-01, 6.401e-02, 2.331e-02, 2.666e-01, 2.541e-02, -1.166e-01) * s0_2_1;
	r2 += M4(-4.579e-02, -4.280e-02, 5.280e-02, -8.495e-02, -3.222e-04, -1.000e+00, 3.702e-02, 2.316e-01, 1.726e-01, -1.000e+00, -5.409e-02, 4.866e-01, 2.140e-02, -2.887e-01, -6.564e-02, 1.233e-01) * s0_2_1;
	r0 += M4(-5.359e-02, 8.033e-02, 1.496e-02, -2.587e-01, -5.411e-02, -4.123e-02, 1.225e-01, -1.428e-01, -4.843e-03, -1.751e-01, -1.000e+00, 3.994e-01, -5.176e-02, 7.064e-02, 6.883e-02, 1.459e-01) * s0_2_2;
	r1 += M4(-6.197e-02, 1.482e-02, 1.546e-02, -5.835e-02, 3.265e-01, 8.177e-02, -2.308e-02, 4.814e-01, 1.408e-01, 3.328e-02, 4.665e-02, 1.344e-01, 1.959e-01, 1.615e-01, 1.944e-02, -8.699e-02) * s0_2_2;
	r2 += M4(-7.485e-02, 2.322e-02, -5.915e-02, 9.651e-02, 5.116e-03, 1.909e-01, 2.982e-01, 2.158e-01, 2.647e-01, -9.014e-03, 3.385e-01, 2.319e-01, 5.495e-02, -1.451e-01, -8.833e-02, 1.169e-01) * s0_2_2;
	r0 += M4(8.479e-03, -6.739e-02, -3.903e-02, -5.205e-03, -2.465e-02, -8.044e-02, -2.216e-03, 1.274e-01, -1.872e-01, -1.073e-01, 1.422e-02, 7.741e-02, 3.796e-02, -1.939e-02, 1.565e-02, -7.984e-02) * s1_0_0;
	r1 += M4(2.899e-02, -2.771e-02, -6.249e-03, -2.867e-02, 6.290e-02, -6.460e-02, -1.337e-01, 1.269e-01, 3.346e-02, -6.766e-02, 9.599e-02, -4.176e-02, 3.291e-02, 5.378e-02, 3.155e-02, -1.351e-01) * s1_0_0;
	r2 += M4(2.887e-02, 8.445e-02, -7.176e-02, -2.426e-02, 7.416e-02, -5.809e-02, 1.419e-01, 5.092e-02, 1.471e-02, -8.082e-03, 4.575e-02, -3.179e-02, -4.641e-02, 2.635e-02, -9.778e-02, -3.402e-02) * s1_0_0;
	r0 += M4(1.848e-02, -6.756e-02, 1.849e-01, -2.759e-02, -1.316e-01, 1.269e-01, -5.477e-02, -7.770e-02, 2.987e-01, -2.913e-01, 8.350e-03, -5.513e-02, 5.637e-02, 1.854e-01, -2.505e-03, 1.349e-02) * s1_0_1;
	r1 += M4(-1.390e-01, 1.050e-02, -1.547e-01, -1.085e-01, 2.143e-02, 8.927e-02, 3.076e-01, 2.762e-01, -1.625e-01, 7.443e-02, 9.712e-02, -7.181e-01, -5.671e-02, 1.603e-01, 4.074e-02, -1.743e-02) * s1_0_1;
	r2 += M4(-2.840e-02, 2.905e-03, 3.402e-02, 2.065e-03, 2.248e-01, 1.754e-01, -2.426e-01, -1.224e-01, 1.767e-01, -4.159e-02, 1.742e-01, -1.342e-01, -2.197e-02, -4.766e-02, -2.717e-01, 1.499e-01) * s1_0_1;
	r0 += M4(2.580e-03, -1.186e-02, 2.990e-02, 2.072e-02, -7.239e-02, -1.121e-01, 1.929e-01, 1.334e-01, -7.245e-02, -3.958e-01, -2.451e-02, 5.119e-02, 1.449e-02, 3.155e-01, -7.331e-02, 7.667e-03) * s1_0_2;
	r1 += M4(2.791e-02, 4.145e-03, 9.247e-03, 6.428e-02, 1.164e-01, 5.381e-02, 5.672e-02, -2.637e-01, -4.940e-01, 2.248e-01, -8.812e-02, 1.843e-02, 1.270e-01, -1.397e-02, -2.224e-01, -5.405e-02) * s1_0_2;
	r2 += M4(4.848e-02, 1.150e-02, 7.469e-02, -1.759e-02, -1.226e-01, -1.361e-02, 6.716e-01, -1.115e-01, 9.220e-02, -1.650e-01, 4.860e-01, 1.696e-01, -2.044e-01, -1.970e-01, -7.816e-02, -5.386e-02) * s1_0_2;
	r0 += M4(3.091e-02, 6.723e-02, 6.460e-02, -2.708e-02, -4.896e-02, -2.674e-01, 8.637e-02, 1.792e-01, 1.461e-02, 1.198e-01, -6.149e-03, 8.594e-02, 9.891e-02, -8.146e-02, -1.294e-03, 1.642e-02) * s1_1_0;
	r1 += M4(4.641e-02, -8.740e-03, -1.072e-01, 4.128e-02, 5.928e-02, -2.038e-01, 1.199e-01, -2.588e-01, -5.880e-03, 4.874e-02, -5.012e-02, 1.694e-01, -6.326e-02, -1.510e-02, -8.077e-02, 1.587e-01) * s1_1_0;
	r2 += M4(-5.085e-02, -7.293e-02, 8.753e-02, -4.275e-02, -1.421e-01, 2.233e-02, 2.425e-01, -1.811e-01, 1.392e-01, 4.804e-02, 8.910e-02, 5.614e-03, -6.825e-02, -2.383e-02, -1.323e-01, 1.089e-02) * s1_1_0;
	r0 += M4(4.126e-03, 2.617e-01, 5.835e-01, 9.635e-02, 1.637e-01, -1.000e+00, -7.801e-02, 1.573e-01, -1.128e-01, -1.289e-01, -8.080e-02, 2.842e-01, -6.880e-02, 2.121e-01, 1.720e-02, -2.942e-01) * s1_1_1;
	r1 += M4(1.470e-01, 1.385e-01, -7.619e-02, 1.931e-01, -1.000e+00, 1.069e-01, -2.588e-01, 6.191e-01, 4.820e-02, 9.369e-02, 4.155e-02, -3.688e-02, 3.870e-01, -8.777e-02, -8.662e-02, -9.509e-02) * s1_1_1;
	r2 += M4(7.093e-02, 3.386e-02, -1.106e-01, 1.382e-01, 8.359e-01, -3.820e-03, -9.779e-01, 1.000e+00, 1.288e-01, -1.000e+00, 3.330e-01, 2.222e-01, 1.168e-01, 2.569e-01, -2.686e-01, -1.029e-01) * s1_1_1;
	r0 += M4(-3.169e-02, -7.571e-02, 4.243e-01, -6.951e-02, 8.977e-02, -4.807e-01, -1.995e-01, -2.940e-01, -7.466e-02, 1.633e-01, 1.277e-02, -1.878e-01, -2.321e-02, 4.132e-01, -1.164e-01, -2.164e-02) * s1_1_2;
	r1 += M4(-1.376e-01, -3.645e-02, -2.088e-02, -1.204e-01, -6.534e-01, -1.704e-02, -9.630e-04, -8.849e-01, 2.752e-01, 5.335e-03, 9.312e-03, 1.077e-01, -8.530e-02, 8.792e-02, -1.888e-02, -2.917e-01) * s1_1_2;
	r2 += M4(-6.781e-02, 9.917e-03, -7.985e-02, -6.280e-03, -3.369e-01, -6.541e-02, 5.890e-02, 2.227e-02, 5.930e-03, -1.000e+00, 1.534e-01, -1.227e-01, -1.456e-02, 8.377e-02, -2.628e-01, -3.836e-02) * s1_1_2;
	r0 += M4(-3.452e-03, -2.793e-02, -2.217e-02, -2.111e-02, -1.959e-02, -5.464e-02, -5.786e-02, 2.842e-01, -2.465e-02, 1.191e-01, 1.749e-02, -1.720e-02, -5.365e-02, 9.606e-02, 2.925e-02, 7.544e-02) * s1_2_0;
	r1 += M4(-4.015e-02, -3.265e-03, 9.460e-02, -3.304e-02, -1.569e-02, -1.874e-01, 3.513e-02, -1.708e-01, 3.304e-02, 1.855e-02, 2.520e-02, -4.744e-02, -2.471e-02, 8.625e-02, -8.327e-02, 8.697e-03) * s1_2_0;
	r2 += M4(-3.075e-03, -6.811e-02, -3.566e-02, 1.757e-02, 5.997e-03, 2.194e-01, 2.531e-01, -4.844e-02, 8.688e-02, 5.816e-02, 6.716e-02, -1.079e-02, 5.089e-02, -3.526e-02, -3.228e-01, 4.872e-02) * s1_2_0;
	r0 += M4(-1.193e-03, 6.209e-03, 2.079e-01, 4.079e-02, -1.248e-01, 1.398e-01, 7.811e-02, -3.481e-01, -1.034e-01, -1.879e-01, 1.394e-02, 1.397e-01, 3.030e-01, 1.622e-01, -5.304e-02, -1.438e-01) * s1_2_1;
	r1 += M4(-1.630e-02, -6.874e-02, -3.480e-02, -1.905e-02, 2.365e-01, 4.150e-01, -8.172e-02, -2.524e-02, -6.751e-02, 4.237e-02, -9.346e-03, 7.757e-02, -1.215e-02, 1.444e-01, 4.088e-02, 2.600e-01) * s1_2_1;
	r2 += M4(-1.788e-02, 5.425e-02, 3.853e-02, -7.937e-02, 2.503e-01, -5.038e-01, -3.912e-02, 9.203e-02, -3.485e-02, 1.744e-02, 1.656e-01, 8.774e-02, -2.527e-02, 3.033e-01, -5.560e-01, -6.328e-02) * s1_2_1;
	r0 += M4(-2.527e-02, -4.515e-02, 3.545e-01, -2.977e-03, -8.393e-02, 1.570e-01, 1.588e-01, 5.759e-02, 5.972e-02, -9.205e-02, 9.798e-03, -7.146e-02, -4.765e-03, 3.814e-01, 3.984e-03, 2.825e-01) * s1_2_2;
	r1 += M4(9.155e-02, -5.456e-03, 1.855e-02, 1.800e-02, 3.426e-02, -5.035e-02, 1.460e-01, -9.696e-02, -2.185e-02, 9.448e-02, -9.503e-02, 1.971e-01, 4.141e-02, 1.567e-01, -4.256e-02, 1.658e-01) * s1_2_2;
	r2 += M4(1.914e-02, -4.258e-02, 5.993e-02, 9.701e-03, -1.069e-01, -2.412e-02, -3.925e-01, -2.815e-01, -1.182e-03, -1.031e-01, 1.074e-01, 7.708e-02, 7.573e-02, 2.141e-01, -3.740e-01, 5.924e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-2.795e-03, -4.032e-01, 5.318e-02, 6.736e-02, 2.144e-01, -3.732e-01, 8.001e-03, 3.910e-02, 2.490e-02, 2.419e-01, -2.712e-02, -9.584e-03, -4.115e-02, 2.276e-01, -4.380e-02, 9.449e-02) * s0_0_0;
	r1 += M4(-2.281e-02, 1.354e-01, -2.567e-01, -1.403e-02, -1.011e-01, -1.075e-01, -1.281e-01, -4.353e-01, -8.892e-02, 1.154e-01, 5.459e-02, 2.344e-01, 1.277e-01, -7.676e-02, 1.524e-02, 3.097e-01) * s0_0_0;
	r2 += M4(-7.614e-02, 1.274e-01, 2.860e-01, -2.629e-01, -2.330e-01, -6.521e-02, 2.913e-01, 5.573e-02, 1.494e-01, -7.887e-02, 5.949e-02, -3.372e-02, 1.107e-01, -1.500e-02, -2.559e-01, -9.609e-03) * s0_0_0;
	r0 += M4(7.788e-02, 9.611e-02, 1.224e-01, 9.410e-02, 1.032e-01, -1.031e-01, -1.789e-01, -2.148e-01, -1.207e-01, -3.039e-01, -1.000e-01, 6.562e-02, 3.556e-02, 6.658e-02, -3.371e-02, -7.110e-02) * s0_0_1;
	r1 += M4(-2.748e-01, -9.523e-02, -2.065e-01, 3.232e-01, -2.576e-01, -1.010e-01, 5.780e-02, 2.939e-01, -3.609e-01, 1.156e-01, 1.150e-01, 2.237e-02, 1.119e-01, 1.765e-02, 1.795e-01, -2.401e-01) * s0_0_1;
	r2 += M4(-1.699e-01, 8.758e-02, -4.636e-03, -2.476e-01, 1.591e-01, 6.949e-02, -7.137e-01, 4.993e-02, 2.403e-01, 7.110e-03, -1.981e-01, 1.234e-01, -5.431e-02, 1.782e-01, 3.702e-02, -6.028e-02) * s0_0_1;
	r0 += M4(2.444e-02, 1.903e-01, 4.373e-02, 3.563e-02, 6.922e-03, 1.126e-01, 4.011e-02, -1.373e-02, 7.272e-03, -1.423e-01, -3.050e-02, 3.367e-02, -4.602e-02, 5.909e-02, 2.635e-02, 1.229e-02) * s0_0_2;
	r1 += M4(1.095e-01, -3.273e-02, -1.129e-01, 1.373e-01, -2.440e-02, 5.535e-02, -3.978e-02, 5.941e-02, -1.172e-01, 6.958e-02, 1.138e-01, 3.219e-03, 3.012e-01, -1.606e-02, -1.094e-01, -3.096e-02) * s0_0_2;
	r2 += M4(-3.309e-02, -5.287e-02, 2.123e-01, 9.454e-03, 1.385e-02, 9.962e-02, -5.556e-02, 5.674e-02, 8.953e-02, -6.630e-03, -1.152e-01, 3.313e-02, -7.736e-02, -1.306e-02, 2.134e-01, -3.837e-02) * s0_0_2;
	r0 += M4(-1.000e+00, 5.924e-01, -1.136e-01, 2.204e-01, 6.037e-02, 8.468e-03, -1.284e-01, -7.601e-02, 1.000e+00, 2.979e-01, 1.762e-01, -2.289e-01, -2.294e-01, 1.667e-01, -4.252e-02, 1.305e-01) * s0_1_0;
	r1 += M4(-7.847e-02, 8.288e-01, -3.299e-01, -1.757e-01, 1.066e-01, -1.165e-01, -3.308e-01, -5.996e-01, -6.651e-02, -2.679e-01, 5.922e-02, 2.679e-01, -7.265e-02, -1.302e-01, -5.958e-02, 3.872e-01) * s0_1_0;
	r2 += M4(5.228e-01, -1.035e-01, -3.487e-01, 2.733e-01, 2.547e-02, -2.981e-01, 1.000e+00, -1.784e-01, -6.270e-01, -1.220e-01, 3.558e-01, 4.481e-01, 6.626e-02, 1.731e-01, -1.529e-01, -1.793e-01) * s0_1_0;
	r0 += M4(-5.435e-03, -5.781e-01, 4.326e-01, 3.668e-01, -2.456e-01, -2.767e-01, 9.587e-01, 1.680e-01, 1.208e-01, 4.849e-01, -5.469e-02, -2.192e-01, 1.301e-01, 2.488e-01, -1.189e-01, 4.155e-02) * s0_1_1;
	r1 += M4(9.338e-01, -2.516e-03, 2.235e-01, 2.324e-02, -4.148e-01, 2.510e-01, 2.376e-01, 9.710e-01, 6.436e-02, -1.573e-02, -2.529e-01, 2.302e-01, -1.948e-01, 2.342e-02, -8.295e-02, 3.631e-02) * s0_1_1;
	r2 += M4(7.453e-01, -1.000e+00, -2.551e-01, 8.552e-02, 2.986e-01, -7.896e-01, -4.197e-03, 2.992e-01, -4.465e-01, -5.137e-01, 3.609e-01, -2.886e-02, -1.467e-01, -7.490e-02, -3.893e-01, -2.976e-02) * s0_1_1;
	r0 += M4(-2.235e-02, -4.306e-03, -2.459e-01, -2.293e-02, 5.618e-02, 3.380e-02, 6.684e-02, -1.036e-02, -1.159e-02, 3.486e-03, 2.456e-01, 2.462e-02, 4.636e-02, 3.326e-02, -6.411e-02, -4.216e-02) * s0_1_2;
	r1 += M4(4.517e-02, 1.990e-01, 8.911e-02, 4.245e-02, -6.325e-02, 9.495e-02, 3.749e-02, -7.807e-02, -6.642e-02, -1.283e-01, -1.048e-01, -1.517e-01, -2.584e-01, -5.420e-02, -5.707e-03, 9.983e-02) * s0_1_2;
	r2 += M4(8.914e-02, 6.034e-02, -2.117e-02, 4.631e-02, 6.014e-02, -1.878e-02, -6.699e-03, 1.109e-01, -1.498e-01, 5.663e-02, 1.436e-01, -4.784e-02, -6.791e-02, 2.983e-02, -1.636e-01, -9.080e-02) * s0_1_2;
	r0 += M4(-3.051e-01, 1.706e-02, 3.009e-02, -3.382e-01, 6.852e-02, -1.027e-01, -1.802e-03, -7.198e-02, -9.032e-02, -5.102e-02, -2.291e-03, 1.580e-01, -2.297e-02, 1.499e-01, -5.549e-03, -1.746e-02) * s0_2_0;
	r1 += M4(-1.392e-02, -9.017e-02, -2.351e-02, 3.214e-01, -1.021e-01, -1.495e-01, 6.801e-02, -2.550e-01, -8.358e-02, -7.827e-02, -2.402e-02, -8.913e-02, 1.255e-01, -2.183e-02, 2.643e-02, 3.101e-02) * s0_2_0;
	r2 += M4(-8.943e-03, 2.937e-02, -1.028e-01, -6.573e-02, -9.943e-02, -2.798e-01, 1.542e-01, -1.114e-01, 5.102e-02, 1.889e-01, -2.260e-01, -1.982e-02, 1.075e-01, 2.072e-01, 1.090e-01, 3.408e-04) * s0_2_0;
	r0 += M4(1.242e-01, 2.548e-01, -5.735e-02, -1.268e-01, 1.073e-01, -3.532e-01, 5.617e-02, -6.971e-01, -1.038e-02, -1.280e-01, 9.921e-03, 1.652e-01, 1.441e-01, -1.012e-01, -4.974e-03, -5.940e-02) * s0_2_1;
	r1 += M4(-1.327e-01, -8.951e-02, -6.250e-02, 7.886e-02, -2.451e-01, -2.487e-02, -1.182e-01, 2.811e-01, 3.062e-01, -6.974e-02, 3.438e-02, -2.667e-01, -9.448e-02, -4.836e-02, -1.017e-03, -1.032e-02) * s0_2_1;
	r2 += M4(-8.761e-02, 8.153e-02, 1.472e-03, -4.176e-03, -8.791e-02, -3.977e-01, 6.485e-01, 3.518e-01, 1.606e-01, 5.132e-01, -6.186e-02, -5.959e-02, 5.016e-03, 3.186e-01, -3.336e-01, -3.345e-02) * s0_2_1;
	r0 += M4(5.606e-02, -4.514e-02, -6.665e-02, 6.562e-02, 4.542e-02, -4.092e-02, 1.291e-01, 7.253e-02, -5.893e-03, 1.314e-01, -9.314e-03, -5.721e-02, 2.196e-03, 6.708e-03, -8.949e-03, 1.439e-01) * s0_2_2;
	r1 += M4(-2.461e-01, -3.491e-02, -5.834e-03, -2.868e-01, -1.008e-01, -6.453e-03, -1.935e-03, 1.376e-02, 2.115e-01, 5.237e-02, 1.132e-02, 1.739e-01, 7.046e-02, -2.529e-02, -1.928e-02, -6.048e-02) * s0_2_2;
	r2 += M4(-2.704e-02, -1.959e-02, -6.890e-02, -6.533e-02, -5.799e-02, 1.295e-01, 3.747e-02, 2.808e-02, 8.769e-02, -4.024e-02, 4.446e-03, 2.929e-02, 9.271e-02, -4.115e-02, 1.237e-01, -1.078e-01) * s0_2_2;
	r0 += V4(-1.241e-03, 9.716e-03, -7.409e-01, -1.818e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.973e-03, -7.064e-03, -3.082e-02, 6.487e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.535e-02, 2.630e-02, -3.589e-03, 6.821e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BOX-conv2
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
#define l2(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(6.114e-02, -1.198e-01, -1.839e-03, -1.509e-01, -2.922e-01, 1.704e-01, 7.437e-04, 1.772e-01, 6.215e-01, -3.758e-01, -6.426e-01, -5.803e-02, -1.469e-01, -7.235e-02, 6.111e-02, -3.185e-02) * s0_0_0;
	r1 += M4(8.625e-02, 3.911e-02, -3.373e-03, -8.683e-04, 4.145e-02, -4.838e-02, 2.032e-03, -6.456e-02, 1.000e+00, -5.070e-01, 2.939e-01, -5.070e-01, -1.443e-01, -1.066e-01, 2.773e-02, 3.943e-02) * s0_0_0;
	r2 += M4(-1.448e-02, 1.231e-02, 4.123e-02, 1.078e-01, -4.575e-02, 3.627e-03, 8.578e-02, 1.127e-02, -4.355e-01, 1.000e+00, 4.172e-01, 3.457e-01, -1.195e-01, -1.278e-01, 1.133e-01, 1.857e-01) * s0_0_0;
	r0 += M4(-1.498e-01, -3.025e-01, 7.442e-02, 2.974e-02, 1.500e-02, 7.738e-02, -1.841e-01, -2.739e-01, 1.142e-01, 5.726e-02, 4.433e-01, -1.566e-01, 1.217e-01, 5.664e-03, 4.409e-01, 3.486e-02) * s0_0_1;
	r1 += M4(-1.016e-01, 1.152e-01, 1.045e-01, -5.904e-02, 1.619e-01, -1.063e-01, 7.311e-02, -5.112e-02, 2.194e-01, -1.510e-01, 1.880e-01, -1.297e-01, -2.619e-01, -2.501e-02, 2.322e-03, 2.342e-01) * s0_0_1;
	r2 += M4(1.186e-02, 1.430e-01, 4.111e-02, 3.842e-01, 4.881e-02, 5.037e-02, 1.499e-01, -1.151e-02, 4.815e-01, 3.316e-01, -2.185e-01, -3.170e-01, -2.114e-01, -4.101e-02, -3.572e-01, -4.834e-01) * s0_0_1;
	r0 += M4(-6.086e-02, -7.736e-02, -5.998e-02, 2.295e-02, -1.885e-01, 1.357e-01, -5.014e-02, -2.224e-01, -1.238e-02, 2.184e-01, 1.509e-01, -7.711e-02, 2.421e-01, -1.139e-01, -7.484e-02, 8.967e-02) * s0_0_2;
	r1 += M4(-8.695e-02, -1.435e-03, -7.644e-02, 1.946e-02, 5.985e-02, 9.243e-03, 1.822e-02, -4.908e-03, 2.712e-02, -2.412e-02, 2.918e-02, -7.982e-02, -1.857e-02, -3.122e-02, -3.552e-02, 8.143e-02) * s0_0_2;
	r2 += M4(2.339e-01, -6.168e-02, -1.350e-01, 1.172e-02, 2.681e-02, 1.379e-01, 1.299e-02, -1.772e-03, 2.914e-01, 1.750e-02, 2.362e-01, -6.974e-02, -5.704e-02, 6.984e-02, 5.452e-02, -2.904e-02) * s0_0_2;
	r0 += M4(-2.062e-01, -3.963e-02, 6.757e-03, 1.441e-01, 8.488e-02, 3.094e-01, 8.229e-02, -1.689e-02, 4.405e-01, 8.831e-01, 1.000e+00, -5.046e-01, 1.368e-01, -5.019e-02, -2.509e-03, 5.373e-02) * s0_1_0;
	r1 += M4(7.511e-02, 5.676e-02, 6.385e-03, 1.142e-02, -1.605e-02, 7.600e-02, 2.987e-02, 7.688e-02, -5.284e-01, -1.000e+00, -3.333e-01, 1.000e+00, 1.364e-01, 5.521e-02, -5.823e-02, -4.030e-02) * s0_1_0;
	r2 += M4(-8.666e-02, -5.974e-02, 8.151e-02, 7.464e-02, 3.430e-02, 1.123e-01, 1.576e-02, 6.149e-02, -1.142e-01, 2.374e-01, -1.000e+00, -1.000e+00, -6.284e-02, -6.280e-02, -3.780e-02, -1.715e-01) * s0_1_0;
	r0 += M4(5.637e-01, -5.406e-01, 2.483e-02, 1.771e-02, -6.222e-01, 3.274e-01, 6.372e-02, -1.968e-01, -3.960e-01, -1.177e-01, 2.365e-02, 6.402e-01, -4.884e-02, -1.820e-02, 1.103e-01, 3.166e-01) * s0_1_1;
	r1 += M4(-3.359e-02, 1.252e-01, 2.881e-01, -1.000e+00, -9.709e-02, 1.668e-01, -1.565e-02, 3.063e-01, 5.738e-02, -4.104e-01, 6.938e-01, 2.976e-01, 8.417e-02, 1.432e-01, 1.505e-01, -2.678e-01) * s0_1_1;
	r2 += M4(-1.480e-01, 1.699e-01, -1.904e-01, 1.988e-01, 6.024e-02, 1.842e-02, -4.504e-01, -1.348e-01, -1.000e+00, 4.607e-01, 1.440e-01, 2.610e-01, -3.020e-01, 3.230e-02, -4.878e-02, -3.028e-02) * s0_1_1;
	r0 += M4(1.621e-01, -2.065e-01, 4.538e-01, -6.118e-02, 1.530e-01, -5.629e-03, -9.124e-02, 4.625e-02, 3.424e-01, -1.463e-01, -4.699e-02, 1.280e-01, 2.665e-01, 7.552e-02, -1.727e-02, -8.270e-02) * s0_1_2;
	r1 += M4(-4.829e-02, 4.832e-03, -1.252e-01, -2.477e-01, 1.521e-02, -7.391e-03, 1.034e-01, 5.578e-02, 7.979e-02, 6.102e-02, -1.613e-01, 1.608e-01, 8.776e-03, 8.204e-02, -2.319e-02, 1.033e-01) * s0_1_2;
	r2 += M4(-1.964e-02, 1.683e-01, 2.275e-02, -1.896e-01, -2.485e-01, 4.896e-02, 1.441e-01, 8.621e-02, 5.109e-01, -1.753e-01, -6.580e-02, 5.906e-02, 1.207e-01, 3.329e-03, 3.500e-02, -8.073e-03) * s0_1_2;
	r0 += M4(1.007e-01, -7.170e-02, 1.666e-02, 4.622e-03, 7.974e-03, 6.374e-02, -2.978e-02, -2.359e-01, -8.324e-02, -2.153e-01, 3.211e-01, 6.350e-01, 1.097e-01, -9.784e-02, -4.447e-04, -8.534e-03) * s0_2_0;
	r1 += M4(-5.199e-02, -2.509e-02, 1.671e-02, -6.067e-02, 2.765e-02, 5.111e-02, 2.516e-02, -3.422e-02, 3.479e-01, -3.606e-01, 5.595e-01, 7.910e-01, -3.679e-02, -1.150e-02, -3.477e-02, -2.488e-02) * s0_2_0;
	r2 += M4(2.263e-02, -3.309e-02, -8.376e-02, 1.064e-01, -1.815e-02, 3.046e-02, -1.251e-03, -2.517e-02, -5.315e-01, -1.115e-02, -5.396e-01, -7.476e-03, -4.651e-02, -3.262e-02, -4.631e-02, -9.782e-02) * s0_2_0;
	r0 += M4(5.705e-02, 1.537e-01, -1.552e-02, -1.383e-01, -3.518e-01, 2.198e-01, 1.597e-02, 1.001e-01, 1.505e-02, -5.207e-02, 2.237e-01, -1.483e-01, 2.632e-02, 3.631e-02, 5.423e-02, -8.619e-02) * s0_2_1;
	r1 += M4(-5.762e-02, 5.547e-02, 9.681e-02, -1.005e-01, -3.765e-02, -1.475e-03, -6.472e-02, -2.601e-02, 9.332e-02, 1.071e-01, 2.574e-02, -2.760e-01, -2.724e-02, 8.736e-02, -1.236e-02, 3.722e-02) * s0_2_1;
	r2 += M4(1.747e-01, 6.099e-03, -1.352e-02, 2.634e-01, -1.507e-01, -1.852e-02, -6.448e-02, 4.241e-02, 4.229e-03, 1.522e-01, 6.243e-01, -3.187e-01, 3.847e-02, 4.449e-02, 8.701e-02, -8.524e-02) * s0_2_1;
	r0 += M4(-7.136e-02, 1.146e-01, -1.968e-01, -4.418e-03, 2.308e-01, -3.152e-02, -9.470e-02, -1.023e-01, 1.020e-01, -2.408e-01, -2.680e-02, -3.310e-01, -2.542e-02, -3.268e-02, -2.987e-02, 7.928e-02) * s0_2_2;
	r1 += M4(-1.425e-03, -3.321e-02, -3.797e-02, -2.141e-02, -1.647e-02, -1.196e-02, -2.596e-02, -8.269e-02, -2.043e-01, 3.474e-02, -1.421e-01, 1.416e-01, 2.944e-02, -7.428e-03, 2.655e-03, 1.527e-02) * s0_2_2;
	r2 += M4(1.272e-01, 2.318e-02, 5.750e-02, 2.231e-01, -2.149e-02, -2.801e-03, 1.855e-03, -5.326e-02, 2.587e-01, 9.910e-02, 8.386e-02, -2.074e-01, 7.135e-02, -4.579e-03, -1.083e-01, 5.223e-02) * s0_2_2;
	r0 += M4(1.863e-01, -1.896e-01, -5.028e-02, 2.275e-02, 2.131e-01, -2.461e-01, 1.609e-02, -5.217e-03, -1.643e-02, 6.564e-02, 6.618e-02, 6.370e-02, 3.470e-01, -1.311e-02, 6.145e-04, -9.070e-02) * s1_0_0;
	r1 += M4(9.708e-03, 2.779e-02, -2.551e-02, 4.616e-02, 1.655e-01, 1.198e-02, -4.771e-02, -4.914e-03, -1.136e-03, 3.354e-02, 1.692e-03, 6.655e-02, 1.041e-02, 1.798e-02, 3.927e-03, -7.478e-02) * s1_0_0;
	r2 += M4(7.774e-02, 4.338e-04, -1.350e-01, -1.702e-01, -6.874e-02, -5.457e-02, -1.081e-01, -5.211e-02, -1.271e-02, 3.299e-02, 1.143e-01, -2.412e-02, 6.646e-02, 7.368e-02, 9.245e-02, -1.205e-02) * s1_0_0;
	r0 += M4(1.871e-01, -1.486e-01, 2.680e-02, 9.313e-02, 2.232e-01, -2.482e-01, 7.724e-03, 9.416e-02, 1.605e-01, 5.117e-02, -9.211e-02, 2.193e-02, 6.114e-01, -8.584e-03, -3.953e-02, 1.696e-01) * s1_0_1;
	r1 += M4(-3.381e-02, 3.680e-02, -4.112e-02, -2.933e-02, 6.634e-02, 1.165e-01, -4.171e-03, -1.016e-01, 3.157e-02, 4.617e-03, 2.542e-02, 7.716e-02, 1.368e-01, 2.702e-02, -3.369e-02, 5.811e-02) * s1_0_1;
	r2 += M4(-3.973e-02, 4.148e-02, 5.115e-02, -4.689e-03, -1.612e-01, 2.621e-01, -7.375e-03, 3.853e-02, 9.402e-02, 8.533e-02, 7.789e-02, 4.159e-02, 7.394e-02, 5.603e-02, -5.142e-02, -1.237e-03) * s1_0_1;
	r0 += M4(8.594e-02, -4.440e-02, 1.267e-02, 1.809e-01, -5.746e-02, -2.070e-02, -1.067e-01, 2.209e-01, -1.610e-02, 5.048e-02, 7.393e-02, -4.242e-02, -2.715e-02, -6.066e-02, 5.549e-02, 1.182e-01) * s1_0_2;
	r1 += M4(-5.659e-02, 2.306e-02, -1.559e-02, -4.853e-02, 1.572e-02, 8.075e-02, -1.230e-02, -5.495e-03, 2.699e-03, 1.135e-02, 1.818e-02, 1.273e-02, 2.016e-02, 1.022e-02, 2.000e-02, -5.779e-02) * s1_0_2;
	r2 += M4(1.428e-01, -2.264e-02, -6.148e-02, -2.282e-02, 1.287e-02, -7.069e-02, -4.928e-02, 5.821e-02, 5.815e-02, 7.450e-02, 2.618e-02, 6.081e-02, 2.591e-02, -7.305e-02, 4.412e-03, 4.144e-02) * s1_0_2;
	r0 += M4(-2.224e-01, -5.996e-01, 6.023e-02, 9.456e-02, 1.011e-01, -4.451e-02, -9.888e-02, -1.772e-01, 5.618e-02, 3.293e-02, 1.513e-01, 1.547e-01, -3.885e-01, 3.699e-02, 2.608e-02, 7.771e-02) * s1_1_0;
	r1 += M4(6.628e-04, 5.550e-02, -2.083e-02, -1.422e-01, -3.301e-02, -9.347e-03, 2.131e-02, 1.348e-02, -1.072e-01, 9.112e-02, -1.100e-02, 2.045e-01, 6.980e-03, 1.318e-01, -4.531e-02, -1.537e-02) * s1_1_0;
	r2 += M4(-3.748e-02, 3.844e-02, -9.755e-02, -5.422e-02, 8.308e-02, -8.863e-02, -1.182e-01, 2.090e-01, -1.798e-02, -1.187e-01, 9.338e-02, -1.397e-01, -8.226e-02, -3.583e-02, -8.644e-03, -8.135e-02) * s1_1_0;
	r0 += M4(4.501e-02, -5.030e-01, 7.512e-02, -3.231e-02, 1.347e-02, 3.255e-01, 1.744e-01, 2.319e-01, -4.123e-01, -2.410e-01, -3.869e-02, 9.585e-02, 4.948e-01, 1.318e-01, -2.549e-01, -5.386e-01) * s1_1_1;
	r1 += M4(-4.188e-02, 9.690e-02, 3.077e-02, -1.913e-01, -2.158e-01, -3.214e-01, -1.072e-01, 2.673e-01, 1.818e-01, 9.140e-02, -1.929e-02, -1.254e-01, -4.571e-02, 2.640e-02, -8.576e-04, 3.283e-01) * s1_1_1;
	r2 += M4(5.980e-02, -1.563e-01, 8.631e-02, -1.202e-01, -3.406e-02, -6.436e-02, 2.983e-01, -7.397e-02, -8.083e-03, -3.694e-01, -1.922e-01, 3.704e-02, 3.636e-02, -1.099e-01, -1.366e-01, -6.359e-02) * s1_1_1;
	r0 += M4(1.541e-01, -5.954e-02, -6.513e-03, 9.125e-02, -3.468e-01, -6.280e-02, 2.606e-02, 3.840e-01, 5.560e-02, 1.876e-01, -1.213e-01, -9.436e-02, -1.576e-01, 4.768e-02, -1.655e-01, 2.311e-02) * s1_1_2;
	r1 += M4(-5.570e-03, 2.481e-02, -3.167e-02, 4.442e-02, 4.187e-02, 1.517e-03, 4.224e-01, -1.685e-01, -1.251e-02, 5.689e-02, -1.411e-02, -6.855e-02, 7.745e-02, -5.739e-02, 2.927e-02, 2.888e-01) * s1_1_2;
	r2 += M4(1.580e-01, 3.073e-02, -1.248e-02, -1.006e-02, -3.711e-01, -5.646e-02, 1.516e-01, 1.519e-01, -1.278e-01, 1.823e-01, 2.345e-01, 5.226e-02, 1.660e-02, 4.839e-02, -7.709e-02, 1.228e-01) * s1_1_2;
	r0 += M4(-9.590e-02, -4.307e-01, -1.004e-01, 3.528e-02, 3.489e-02, -1.508e-02, 7.440e-02, 1.219e-01, 2.326e-02, -2.809e-01, 2.945e-02, 1.949e-01, 2.848e-01, -2.977e-03, 8.078e-02, 5.864e-02) * s1_2_0;
	r1 += M4(9.377e-02, 6.005e-03, -5.588e-02, -1.239e-01, 6.212e-02, 8.847e-03, 1.355e-02, 6.870e-02, 3.639e-02, -4.703e-02, -8.717e-02, -8.831e-02, -1.822e-01, -5.061e-02, 2.411e-02, -5.157e-02) * s1_2_0;
	r2 += M4(7.018e-02, -3.262e-02, -1.837e-01, -5.971e-02, 8.336e-02, 2.950e-02, 1.027e-01, 5.732e-02, 1.891e-02, 1.776e-02, 7.949e-02, 1.454e-02, 8.722e-03, 1.457e-02, -1.039e-02, 2.920e-01) * s1_2_0;
	r0 += M4(-3.154e-01, -6.637e-01, 4.286e-02, 2.571e-01, 1.841e-01, -1.039e-01, -5.858e-02, 1.238e-01, -9.169e-01, -1.884e-03, -1.721e-01, -7.390e-01, 1.352e-02, 1.057e-01, 2.003e-02, -1.445e-01) * s1_2_1;
	r1 += M4(7.805e-02, -6.798e-02, 7.031e-02, -2.389e-01, 1.375e-01, 8.524e-02, -2.599e-03, 1.714e-01, 9.596e-02, 4.072e-01, 9.749e-02, 4.079e-01, 3.712e-03, -1.085e-01, -4.154e-02, 2.214e-01) * s1_2_1;
	r2 += M4(-7.693e-02, -8.296e-02, -1.443e-01, -9.591e-02, 1.236e-01, 1.199e-02, -9.816e-02, 2.595e-02, 5.684e-01, -1.204e-01, -2.979e-01, 1.259e-01, 7.407e-02, -7.648e-02, 3.783e-01, -1.187e-01) * s1_2_1;
	r0 += M4(-3.052e-02, -6.680e-02, 1.997e-02, 8.667e-02, -2.743e-02, -2.404e-02, 7.497e-02, 7.661e-02, 2.706e-01, -7.165e-02, -3.841e-02, -5.633e-02, 1.687e-02, -7.540e-02, 2.395e-02, -1.516e-01) * s1_2_2;
	r1 += M4(1.755e-02, -1.875e-02, 9.040e-02, -8.375e-02, -4.576e-02, 8.425e-02, 6.171e-02, 4.910e-02, -8.960e-02, 1.156e-01, -5.516e-02, -2.340e-01, -3.022e-02, 4.312e-02, 3.676e-02, 4.923e-03) * s1_2_2;
	r2 += M4(1.791e-02, -3.845e-02, 1.600e-02, -3.732e-02, 8.469e-02, 2.272e-02, 3.083e-03, 4.870e-02, 8.960e-02, 5.397e-02, 1.867e-02, 2.667e-01, 3.957e-01, 8.721e-03, -2.322e-02, -5.167e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-1.751e-01, 1.829e-01, 8.947e-03, -1.672e-01, 2.543e-01, -2.415e-01, 2.405e-02, 4.883e-02, -2.838e-01, 2.666e-01, -1.041e-01, -2.337e-01, 9.840e-02, -1.469e-01, -2.576e-02, 1.707e-01) * s0_0_0;
	r1 += M4(-3.733e-02, 6.870e-02, 1.367e-02, 4.573e-02, 1.203e-01, -5.591e-02, 9.159e-02, 1.514e-01, -1.724e-01, -3.238e-02, 1.575e-03, -3.983e-02, -4.212e-02, -1.460e-02, -6.371e-02, -3.793e-02) * s0_0_0;
	r2 += M4(2.720e-02, 9.219e-02, 4.285e-02, -3.770e-02, 1.677e-01, -2.840e-02, -1.911e-01, -2.201e-01, -2.775e-02, 1.640e-01, 1.860e-01, 1.501e-01, -1.613e-02, -4.648e-02, -7.438e-02, -1.097e-01) * s0_0_0;
	r0 += M4(-3.526e-01, 1.656e-01, -1.413e-01, -1.151e-01, -1.279e-01, 1.761e-01, 9.333e-02, -5.595e-01, -3.258e-01, 2.561e-01, 7.744e-02, -2.523e-02, -1.935e-01, -6.543e-02, 7.197e-02, 1.198e-01) * s0_0_1;
	r1 += M4(-6.903e-02, 2.790e-02, 5.808e-02, -3.404e-02, -2.129e-02, 5.969e-02, -1.650e-01, 2.368e-01, -9.762e-02, 2.990e-02, -6.411e-03, 6.294e-02, -3.965e-02, 7.823e-02, 9.693e-03, 3.231e-02) * s0_0_1;
	r2 += M4(1.422e-01, 1.294e-01, 5.018e-02, 1.199e-01, 1.032e-01, -7.209e-03, -1.428e-01, -3.607e-01, 1.352e-01, -3.402e-02, 1.410e-02, -1.582e-01, -1.165e-01, -1.995e-01, 6.921e-02, -9.988e-02) * s0_0_1;
	r0 += M4(-3.559e-01, 1.421e-01, 1.070e-01, -2.621e-01, -5.712e-01, 9.162e-03, -1.392e-01, 1.084e-01, -4.771e-02, 3.990e-02, 1.074e-01, -4.241e-02, 2.295e-01, -1.023e-01, -2.583e-02, 5.993e-02) * s0_0_2;
	r1 += M4(1.229e-02, 2.642e-02, 3.296e-03, -4.336e-02, 4.788e-02, -2.856e-02, 1.645e-01, 3.563e-01, -2.992e-02, -5.245e-03, 2.857e-02, 8.618e-02, 7.167e-02, -5.455e-03, -2.925e-03, 1.450e-01) * s0_0_2;
	r2 += M4(1.326e-01, 3.617e-02, 9.167e-02, 5.627e-02, 3.121e-02, -1.486e-01, 1.204e-01, 1.538e-01, -6.104e-02, -3.542e-02, -2.214e-03, -6.242e-02, 1.708e-03, 6.965e-02, -1.126e-01, -9.700e-02) * s0_0_2;
	r0 += M4(-1.780e-01, 2.881e-01, 7.809e-02, 2.396e-01, -3.203e-01, 6.035e-01, 2.394e-01, -4.526e-01, -4.381e-01, 4.645e-01, 8.904e-03, -3.780e-02, 1.829e-03, -7.931e-02, -2.603e-03, -1.450e-01) * s0_1_0;
	r1 += M4(-3.749e-02, 3.883e-02, 6.885e-03, -5.083e-02, -6.063e-02, 1.564e-01, 6.401e-02, 3.201e-01, -1.178e-01, 5.707e-02, -3.902e-02, -8.453e-02, 2.359e-01, 5.343e-02, -8.627e-02, 8.517e-02) * s0_1_0;
	r2 += M4(-9.546e-02, 9.669e-02, 2.290e-01, -1.257e-01, 3.068e-01, -1.021e-01, -3.489e-01, -2.440e-01, 8.202e-02, -5.792e-02, 8.631e-02, -3.505e-02, 9.419e-02, -5.582e-02, -1.003e-01, -2.803e-01) * s0_1_0;
	r0 += M4(-1.049e-01, 2.480e-01, -3.154e-01, -8.100e-03, -3.040e-01, 2.276e-01, 2.370e-02, -3.154e-01, -2.401e-01, 4.097e-01, 1.101e-01, 2.364e-02, 1.445e-01, -2.732e-01, -1.150e-01, -7.201e-02) * s0_1_1;
	r1 += M4(2.389e-01, -1.470e-02, 2.728e-01, -2.613e-01, -1.201e-01, 3.791e-02, 2.014e-01, 4.602e-01, 4.235e-02, -6.054e-02, 8.443e-02, 7.247e-02, 3.849e-01, 1.903e-01, 1.460e-01, -1.526e-01) * s0_1_1;
	r2 += M4(-4.777e-02, 3.096e-01, 2.685e-01, 5.042e-02, -2.866e-02, -8.195e-03, -6.308e-01, 4.682e-02, 1.605e-01, 6.146e-02, -1.773e-02, -9.836e-02, -1.428e-01, 4.462e-01, 3.290e-01, 2.611e-01) * s0_1_1;
	r0 += M4(-3.137e-01, 1.164e-01, -3.825e-02, -1.724e-01, 1.121e-01, 5.948e-02, -1.050e-02, 2.244e-01, -4.026e-01, 2.848e-01, 1.697e-01, -3.321e-01, 2.897e-01, -3.449e-02, 2.319e-01, -1.575e-02) * s0_1_2;
	r1 += M4(9.471e-02, 3.502e-02, 1.226e-01, -1.835e-01, 1.160e-01, -5.779e-02, 2.255e-01, 1.134e-01, -1.896e-02, 4.057e-02, -3.159e-02, -6.692e-02, -1.087e-01, 3.183e-02, -7.272e-02, 2.590e-01) * s0_1_2;
	r2 += M4(4.472e-01, -8.713e-02, 7.368e-02, -6.337e-02, 1.364e-01, 1.342e-01, -4.677e-02, 1.825e-01, 1.771e-01, 6.665e-02, 4.068e-02, 6.603e-02, 2.022e-01, 4.530e-02, -2.988e-01, -2.561e-01) * s0_1_2;
	r0 += M4(-1.750e-03, -4.340e-02, -5.417e-03, -8.650e-02, -5.973e-01, -3.097e-02, -1.405e-01, -3.046e-02, -2.383e-01, 3.752e-01, 4.769e-02, -2.223e-01, -9.886e-02, 1.636e-01, -2.816e-02, 1.387e-01) * s0_2_0;
	r1 += M4(-6.976e-03, -1.066e-02, -2.190e-02, -1.608e-02, 8.210e-02, -2.053e-01, 1.756e-01, 2.977e-01, -7.940e-02, 4.497e-03, -2.375e-02, 9.497e-02, 1.067e-01, -3.631e-03, 2.166e-02, 1.104e-01) * s0_2_0;
	r2 += M4(-1.265e-01, -3.110e-02, -8.830e-02, 7.581e-03, 5.263e-02, -1.376e-01, -1.806e-01, -1.608e-01, -4.771e-02, 2.301e-02, 1.734e-01, 5.816e-02, -2.106e-03, -4.037e-02, 5.127e-02, -1.072e-01) * s0_2_0;
	r0 += M4(-2.191e-02, 1.723e-01, 7.233e-02, -4.534e-01, 7.910e-02, -2.842e-02, -2.874e-02, 3.091e-01, 5.519e-02, 3.218e-01, 3.354e-02, -3.311e-01, 7.260e-02, -2.374e-01, -1.791e-01, 1.506e-01) * s0_2_1;
	r1 += M4(-1.654e-01, 1.262e-01, -6.186e-02, -1.627e-01, 1.294e-01, -7.301e-02, 7.387e-02, 1.383e-01, -9.252e-02, 8.187e-02, -2.943e-03, -2.017e-01, 8.325e-02, 2.449e-02, 7.204e-02, -2.829e-02) * s0_2_1;
	r2 += M4(5.392e-02, 2.768e-02, 1.033e-02, -2.533e-02, 1.060e-01, -1.176e-02, -2.017e-01, -1.056e-01, -7.212e-03, 1.608e-02, 1.134e-01, 1.685e-01, -3.256e-01, -3.274e-02, 7.711e-02, 1.227e-01) * s0_2_1;
	r0 += M4(7.875e-02, 4.745e-02, 6.734e-02, -7.315e-02, 1.316e-01, -1.608e-01, 5.593e-02, 1.317e-01, -2.275e-01, 1.760e-01, -6.173e-02, -1.232e-01, 9.160e-02, 5.058e-03, 1.225e-01, -2.026e-01) * s0_2_2;
	r1 += M4(-8.565e-02, 5.346e-02, -9.279e-02, -3.366e-02, -2.907e-02, 8.040e-02, 4.556e-03, -5.003e-02, 1.550e-02, -8.028e-05, -6.051e-02, 1.234e-02, -1.582e-02, -5.166e-03, -1.155e-01, -4.271e-02) * s0_2_2;
	r2 += M4(-2.047e-01, 7.042e-02, -5.872e-02, 8.811e-02, 5.341e-02, 1.955e-02, 1.661e-01, -4.770e-02, -9.593e-02, -1.535e-02, 1.964e-01, -7.890e-02, -1.386e-01, 1.763e-02, 2.629e-02, -3.242e-01) * s0_2_2;
	r0 += V4(-5.176e-03, -1.097e-02, -5.423e-03, 2.234e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-5.021e-03, -2.445e-03, -4.418e-03, -1.691e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-7.523e-03, -4.677e-03, -1.699e-02, 3.145e-04);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BOX-conv3
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
#define l2(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(8.803e-02, 5.018e-02, 1.366e-01, -1.886e-01, -5.471e-02, -5.292e-02, -1.126e-02, 1.000e-01, 5.454e-02, -5.100e-02, -6.987e-02, -2.109e-01, -1.322e-01, -4.229e-01, -6.344e-02, 1.135e-01) * s0_0_0;
	r1 += M4(8.743e-02, 6.693e-02, 1.715e-02, -7.205e-02, -9.583e-03, -2.629e-02, 3.338e-02, 9.290e-03, -5.373e-02, 2.949e-02, 1.511e-01, -6.273e-02, -8.323e-02, -2.305e-01, -1.294e-01, -2.652e-02) * s0_0_0;
	r2 += M4(-8.277e-03, 2.848e-03, 2.609e-02, 1.270e-02, -2.081e-02, -3.528e-02, 9.272e-02, 6.691e-03, -2.460e-02, -1.346e-02, 4.875e-02, 1.539e-02, 2.949e-02, -4.441e-03, -9.520e-02, 4.890e-02) * s0_0_0;
	r0 += M4(-9.175e-02, -2.349e-01, 2.425e-01, 2.024e-01, 8.046e-02, -1.679e-01, 2.349e-01, -2.926e-01, 1.129e-01, 2.906e-01, -2.307e-01, 2.480e-01, -1.610e-03, 2.027e-01, -1.283e-01, -3.189e-01) * s0_0_1;
	r1 += M4(1.243e-02, -1.383e-01, 1.265e-02, 1.883e-01, -2.249e-01, -1.397e-01, 1.708e-01, 1.694e-03, 4.085e-01, -9.040e-03, -8.654e-02, 1.304e-01, 1.204e-01, 1.638e-01, 6.693e-02, -5.542e-01) * s0_0_1;
	r2 += M4(1.935e-02, 2.777e-03, -7.273e-02, -2.655e-02, -2.986e-03, 8.897e-02, -8.062e-02, -2.850e-02, 3.005e-02, 2.838e-02, -6.611e-02, 1.309e-02, -6.622e-02, -1.160e-02, -7.379e-03, -5.756e-02) * s0_0_1;
	r0 += M4(-6.223e-02, -3.993e-02, 1.311e-01, -4.083e-01, -9.951e-02, 3.106e-02, 1.184e-01, 3.946e-02, 7.739e-02, -1.595e-02, 1.402e-02, -9.280e-02, 2.099e-03, -3.228e-01, 2.081e-01, -2.707e-01) * s0_0_2;
	r1 += M4(-7.253e-02, -1.451e-01, 9.301e-02, -7.940e-02, 8.106e-02, 5.495e-02, -8.388e-02, 1.244e-01, 1.204e-01, -3.883e-02, -6.176e-02, -1.840e-01, 1.976e-01, 2.052e-03, -3.942e-02, -1.605e-01) * s0_0_2;
	r2 += M4(9.061e-03, 1.751e-03, 1.849e-02, -7.414e-03, -3.312e-02, -4.537e-02, 1.950e-02, 4.822e-02, -4.518e-03, -5.422e-02, -5.170e-02, 1.671e-02, 3.566e-02, -1.070e-02, 2.437e-02, 2.508e-02) * s0_0_2;
	r0 += M4(-3.333e-02, 1.029e-01, 3.748e-02, -3.288e-01, 1.141e-01, 8.185e-02, 1.479e-01, -5.730e-02, 1.143e-01, -7.263e-02, 2.032e-01, -1.489e-01, 6.205e-02, -2.295e-01, 1.052e-01, 4.001e-01) * s0_1_0;
	r1 += M4(1.337e-01, 2.199e-01, -1.021e-01, -1.470e-01, 2.603e-02, -2.193e-01, -1.136e-01, 2.170e-02, 1.629e-01, -8.002e-02, 2.939e-01, 2.315e-02, 1.076e-01, 1.184e-02, 1.280e-01, -4.138e-02) * s0_1_0;
	r2 += M4(5.008e-02, 1.003e-02, -7.072e-02, 2.831e-02, -9.845e-03, 1.281e-02, 2.287e-02, -6.672e-02, -1.058e-03, -2.830e-02, 1.333e-01, 1.215e-01, 8.268e-02, 1.241e-02, 2.204e-03, -2.863e-02) * s0_1_0;
	r0 += M4(-2.402e-02, -4.016e-01, 2.197e-01, 3.032e-01, -7.260e-02, -2.783e-01, -1.890e-01, -3.252e-01, 2.218e-02, 3.820e-01, 1.744e-01, 4.772e-01, 1.332e-01, 3.545e-01, 2.555e-01, -4.503e-01) * s0_1_1;
	r1 += M4(2.262e-01, -1.021e-01, -3.674e-02, -1.255e-01, -6.553e-01, -4.209e-01, 1.420e-01, 1.609e-01, 3.317e-02, 3.492e-02, -6.023e-02, 6.194e-01, 1.201e-01, -3.665e-01, 1.948e-01, 1.617e-01) * s0_1_1;
	r2 += M4(-4.497e-02, -1.072e-01, 3.037e-01, -1.270e-01, 1.145e-01, 1.078e-01, 6.977e-03, -2.495e-01, 3.368e-01, -8.916e-02, -1.440e-01, 1.385e-01, 1.577e-01, -1.115e-01, -1.217e-01, 2.917e-01) * s0_1_1;
	r0 += M4(-1.933e-01, -1.788e-01, -2.299e-01, -4.309e-01, -1.916e-01, -9.799e-02, -2.902e-01, 1.486e-01, 1.521e-01, -1.221e-01, 1.392e-01, 5.411e-03, 7.991e-03, -1.201e-01, 2.180e-02, -4.377e-02) * s0_1_2;
	r1 += M4(-7.115e-02, 1.284e-03, 4.530e-01, -6.270e-01, -7.164e-01, 2.324e-01, 2.565e-01, 8.996e-02, -1.083e-01, -2.040e-02, -1.595e-01, -8.640e-03, 5.236e-03, 1.667e-01, -1.179e-01, 1.661e-01) * s0_1_2;
	r2 += M4(-6.471e-02, -5.799e-02, 1.225e-01, 5.748e-02, 2.220e-02, 1.184e-01, -8.713e-02, -9.380e-02, -9.101e-03, -2.525e-02, -1.146e-02, 3.889e-02, 3.500e-02, 4.819e-02, 2.933e-02, -1.509e-02) * s0_1_2;
	r0 += M4(-2.348e-02, 7.009e-02, -2.423e-02, -4.166e-01, -5.439e-02, -9.620e-03, -5.151e-03, -9.351e-02, 3.807e-02, 4.251e-02, 7.954e-02, -1.233e-01, 3.844e-02, -4.511e-02, -1.155e-01, -1.090e-01) * s0_2_0;
	r1 += M4(-2.857e-02, 1.267e-02, -1.782e-01, -7.527e-02, -8.036e-02, 5.129e-02, -1.714e-01, 3.218e-02, 1.166e-01, 2.194e-02, 1.519e-01, -1.736e-02, -4.686e-02, 2.341e-01, 1.767e-01, -1.206e-01) * s0_2_0;
	r2 += M4(2.679e-02, -2.817e-03, -4.375e-02, -2.157e-02, -3.163e-03, 9.517e-04, -2.026e-02, -1.772e-02, -1.179e-01, -9.156e-02, 2.197e-02, 1.461e-01, -2.418e-02, -8.085e-02, 8.220e-02, 5.065e-02) * s0_2_0;
	r0 += M4(-6.560e-02, 5.519e-02, 3.353e-02, -1.066e-01, -6.570e-02, 1.201e-02, 1.180e-02, 1.438e-01, 1.246e-01, 6.368e-02, -1.810e-03, 3.838e-01, -8.497e-02, 1.722e-04, 1.426e-02, -6.499e-02) * s0_2_1;
	r1 += M4(-1.079e-01, -1.217e-01, -8.459e-02, -1.373e-01, 6.589e-02, 1.628e-01, 6.441e-02, -2.442e-02, -6.458e-02, 4.625e-02, 3.716e-01, 1.557e-01, -3.741e-02, 7.438e-03, -2.173e-01, -5.467e-02) * s0_2_1;
	r2 += M4(4.766e-03, 5.790e-02, 8.719e-02, 3.463e-02, 1.539e-02, 8.389e-03, -1.106e-01, -5.414e-02, -5.701e-02, -3.408e-02, 4.206e-02, 3.232e-01, -1.208e-02, -4.173e-02, 1.253e-02, -5.386e-02) * s0_2_1;
	r0 += M4(4.154e-02, 1.223e-02, -6.284e-02, -1.847e-01, 9.887e-02, 3.064e-02, 2.885e-02, -2.549e-01, 1.691e-02, 2.501e-02, -1.456e-02, 1.127e-01, -7.208e-02, -8.244e-03, -3.638e-02, 1.360e-01) * s0_2_2;
	r1 += M4(-8.273e-03, 4.007e-02, -9.051e-02, -7.083e-02, 1.700e-01, -1.018e-01, 6.871e-02, -4.945e-02, -9.264e-02, 4.308e-02, -1.430e-02, 8.806e-02, 1.471e-02, 4.966e-02, 6.818e-02, -3.349e-01) * s0_2_2;
	r2 += M4(1.267e-02, 7.825e-02, -1.987e-02, -1.714e-01, 6.673e-03, -4.676e-02, -1.136e-01, 6.237e-02, -6.770e-02, -3.497e-02, 1.927e-02, 1.724e-02, -4.655e-04, -5.479e-03, -1.669e-02, 5.049e-02) * s0_2_2;
	r0 += M4(9.614e-03, 2.666e-03, 7.288e-02, -8.196e-02, 4.921e-02, 1.927e-02, -3.253e-02, -2.241e-01, 3.055e-03, 2.938e-01, 8.899e-02, -1.767e-01, -1.779e-01, -2.077e-01, -2.081e-02, 3.387e-01) * s1_0_0;
	r1 += M4(1.486e-01, -2.883e-02, -6.114e-02, 5.361e-02, -5.078e-02, 8.432e-02, 1.179e-01, -9.898e-02, -1.991e-01, 4.128e-03, -9.768e-02, 1.410e-01, 1.133e-01, -1.017e-01, -1.160e-01, -9.020e-03) * s1_0_0;
	r2 += M4(2.374e-02, -2.920e-03, 3.769e-02, -2.278e-02, -1.902e-02, 1.152e-01, -3.348e-02, -8.586e-02, 5.362e-02, 2.973e-02, -5.113e-02, -1.016e-02, 1.686e-02, 5.817e-02, -5.152e-03, 8.185e-02) * s1_0_0;
	r0 += M4(1.304e-01, -1.204e-02, -3.373e-02, -1.509e-01, -2.385e-01, -4.787e-01, -3.087e-01, 6.551e-02, -1.086e-01, -1.916e-01, -3.603e-01, 1.711e-02, -1.175e-01, -1.715e-01, 1.742e-01, -7.522e-01) * s1_0_1;
	r1 += M4(-4.190e-02, -2.042e-01, 1.204e-01, -5.195e-02, -1.603e-01, -8.218e-02, -1.124e-01, -9.144e-02, -5.942e-01, -1.727e-01, 4.101e-01, 1.741e-02, -3.917e-01, 1.241e-01, 8.364e-02, -2.410e-01) * s1_0_1;
	r2 += M4(-3.454e-03, 2.989e-03, -3.381e-02, -4.368e-04, -6.238e-02, -9.184e-02, 8.266e-02, 1.323e-01, 1.216e-01, 1.611e-01, -5.523e-02, -1.320e-01, 1.131e-02, -3.651e-02, 1.605e-01, -7.933e-02) * s1_0_1;
	r0 += M4(6.869e-02, 3.292e-02, -3.791e-02, -1.987e-01, 1.490e-01, 8.619e-02, 8.003e-02, -2.395e-01, -2.961e-01, -2.370e-02, -5.850e-02, 1.547e-03, 5.957e-03, 1.768e-01, 9.512e-02, 1.147e-01) * s1_0_2;
	r1 += M4(1.585e-02, 1.658e-01, 7.534e-02, 2.141e-02, 7.062e-02, -4.744e-02, 7.412e-02, -6.636e-02, -9.788e-02, -2.404e-02, -2.958e-02, -6.558e-02, -4.908e-01, 8.359e-02, 4.873e-02, 1.188e-01) * s1_0_2;
	r2 += M4(8.836e-04, 3.870e-02, -9.829e-02, -2.206e-02, 1.425e-02, 3.522e-02, -6.018e-02, -6.193e-02, 8.457e-03, -3.140e-02, 1.053e-01, 6.645e-03, 2.514e-02, 8.177e-02, -5.133e-02, 1.055e-02) * s1_0_2;
	r0 += M4(1.380e-01, 3.235e-02, 1.609e-02, -6.291e-02, -1.057e-01, -9.303e-02, -1.910e-01, -5.315e-04, -2.881e-01, 2.515e-01, -2.284e-02, -6.975e-01, 1.481e-01, 1.110e-01, -6.207e-02, 4.183e-01) * s1_1_0;
	r1 += M4(8.844e-02, -5.247e-02, -1.655e-01, -4.083e-02, -4.027e-01, 6.194e-02, -5.516e-02, -1.945e-02, 3.344e-01, 5.597e-01, -3.793e-01, 1.678e-02, -1.368e-01, -7.665e-01, -2.286e-01, 4.977e-02) * s1_1_0;
	r2 += M4(1.230e-02, 2.818e-02, -2.705e-02, -8.482e-02, 3.789e-02, 9.270e-02, -2.765e-02, -3.181e-02, 2.306e-01, 2.845e-02, -2.224e-01, 6.834e-02, 6.012e-02, 1.584e-01, 6.644e-02, -1.150e-01) * s1_1_0;
	r0 += M4(2.362e-01, 2.867e-02, 5.161e-01, -8.911e-01, 2.303e-01, -2.128e-01, -3.940e-01, 9.458e-02, -1.327e-01, 2.206e-02, -7.395e-03, 1.003e-01, -5.773e-01, -1.899e-01, 8.565e-02, -1.000e+00) * s1_1_1;
	r1 += M4(3.799e-01, -2.684e-01, 4.158e-01, -1.635e-01, -5.071e-02, -3.859e-01, 2.586e-01, -1.655e-01, -4.858e-04, -1.820e-01, 3.136e-01, -4.326e-01, -2.542e-01, 1.919e-01, -7.133e-01, 1.077e-01) * s1_1_1;
	r2 += M4(-6.049e-03, 7.497e-02, 4.668e-01, 1.217e-01, -4.567e-01, 4.820e-01, 4.307e-01, 5.293e-01, -2.420e-01, -1.618e-01, 2.744e-01, 3.682e-01, 4.675e-01, 5.341e-01, -3.403e-01, -3.625e-01) * s1_1_1;
	r0 += M4(5.093e-01, -2.264e-01, 5.148e-02, -3.849e-01, -7.480e-02, -1.557e-01, 6.035e-02, -1.513e-01, 1.329e-01, -6.653e-02, -1.187e-02, 4.010e-01, -3.466e-01, -1.158e-01, -1.597e-01, -2.370e-01) * s1_1_2;
	r1 += M4(1.308e-01, -2.252e-02, 2.333e-01, -2.642e-02, 3.110e-02, 4.012e-02, -5.978e-02, 2.083e-01, -2.265e-01, -6.290e-02, -1.528e-01, -3.844e-02, 3.108e-01, 4.260e-02, 7.227e-02, -2.679e-01) * s1_1_2;
	r2 += M4(9.691e-02, 2.530e-01, -2.635e-01, -5.249e-02, -3.543e-03, 8.814e-02, 6.274e-02, -4.562e-02, -8.252e-02, -5.892e-02, -1.951e-02, -9.256e-03, 9.325e-02, 9.641e-02, 7.962e-03, -1.477e-02) * s1_1_2;
	r0 += M4(-4.447e-03, 4.594e-03, 4.101e-02, -4.454e-02, -4.635e-02, -7.536e-03, 1.062e-02, 2.133e-01, 7.151e-02, 4.869e-02, -1.339e-02, 1.204e-01, -2.910e-02, 6.518e-02, -9.071e-02, -1.485e-01) * s1_2_0;
	r1 += M4(5.083e-02, -2.418e-03, -1.256e-01, -8.460e-03, 2.713e-02, -3.627e-02, -2.782e-02, 4.487e-02, -1.998e-01, -4.665e-02, -7.664e-02, 6.051e-02, -9.721e-02, 9.187e-02, 1.723e-01, -4.989e-03) * s1_2_0;
	r2 += M4(1.923e-02, 2.076e-02, -1.605e-02, 6.121e-03, 4.211e-03, -2.031e-02, -4.295e-02, -4.450e-02, -1.479e-02, 7.920e-03, -2.277e-02, -6.844e-03, 2.814e-02, -1.456e-02, 3.043e-02, 6.029e-02) * s1_2_0;
	r0 += M4(7.018e-02, 3.657e-03, -3.556e-02, -4.058e-01, -5.587e-02, 3.704e-02, 1.013e-01, 5.237e-02, -7.976e-02, -8.877e-04, -2.973e-02, -1.304e-01, 9.232e-02, 3.714e-02, 1.253e-01, 3.916e-01) * s1_2_1;
	r1 += M4(-1.252e-01, 1.755e-01, 3.728e-01, -1.363e-01, 1.430e-01, -1.994e-01, -2.554e-01, 5.331e-02, 6.800e-02, -2.014e-01, -1.150e-01, 5.915e-02, 1.491e-01, -2.789e-01, 1.011e-02, 4.948e-03) * s1_2_1;
	r2 += M4(6.530e-02, -8.619e-02, 6.504e-02, 2.620e-02, -6.860e-02, 1.003e-01, 7.378e-03, -9.866e-02, 5.812e-02, 1.012e-01, 4.777e-03, -1.914e-01, 2.633e-02, -3.438e-02, -3.454e-02, 1.623e-01) * s1_2_1;
	r0 += M4(1.575e-01, -4.275e-02, 1.265e-02, 1.950e-01, 9.792e-03, 7.605e-04, -6.255e-02, -2.058e-01, 4.746e-02, 1.506e-02, 4.042e-02, -1.541e-01, -1.922e-02, 1.058e-01, -7.855e-02, -3.243e-01) * s1_2_2;
	r1 += M4(8.850e-02, -3.220e-02, 1.252e-01, 1.021e-01, -9.607e-02, 1.149e-01, 1.518e-01, -4.739e-02, 1.560e-01, -9.009e-02, 4.163e-02, 3.624e-02, -1.594e-01, 1.543e-01, 9.846e-02, 8.837e-02) * s1_2_2;
	r2 += M4(-6.706e-03, -1.092e-01, 4.766e-03, 6.368e-02, 1.326e-02, 4.351e-02, 6.935e-04, -6.221e-02, -1.045e-02, 1.800e-03, -3.574e-02, 4.906e-02, 4.019e-02, 7.352e-03, 2.617e-02, -2.328e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.241e-02, -2.609e-01, 4.369e-01, -2.845e-01, -2.266e-02, -6.675e-02, -1.687e-01, 4.177e-03, 3.384e-02, 8.343e-02, 5.515e-02, 1.768e-01, -1.343e-01, -1.683e-01, 8.554e-02, 2.977e-01) * s0_0_0;
	r1 += M4(1.933e-01, -2.195e-01, -3.768e-02, 3.066e-02, -5.099e-03, -5.937e-02, -7.343e-03, -2.662e-02, -1.695e-01, 2.662e-01, 1.283e-01, 1.016e-01, 1.037e-01, 4.485e-02, 8.520e-02, 1.180e-02) * s0_0_0;
	r2 += M4(9.880e-03, 3.732e-04, 9.111e-02, -5.440e-02, 6.468e-03, 1.331e-02, -3.034e-02, -2.486e-02, 2.916e-02, 5.668e-02, -6.087e-02, -1.651e-03, -7.148e-03, -5.234e-03, 2.528e-02, 1.662e-02) * s0_0_0;
	r0 += M4(8.770e-02, -2.535e-02, -5.782e-02, 3.682e-01, -8.859e-02, -5.136e-02, -2.690e-01, 1.691e-01, 1.812e-01, 5.366e-01, -1.529e-01, 3.917e-01, -8.516e-02, 3.389e-01, -2.698e-01, 3.381e-01) * s0_0_1;
	r1 += M4(-1.867e-01, -1.080e-01, 1.286e-02, 3.394e-01, 1.751e-01, 1.209e-01, 5.319e-02, -1.123e-01, 1.026e-01, -1.150e-01, -3.659e-01, 1.565e-01, -2.100e-01, 1.417e-01, -3.749e-01, 2.159e-01) * s0_0_1;
	r2 += M4(4.398e-02, 1.012e-01, -8.887e-02, 2.770e-02, 9.862e-03, -4.648e-02, 5.389e-02, 1.671e-02, 1.965e-03, 8.824e-03, -9.417e-02, 6.860e-02, -1.536e-02, 1.211e-01, -1.048e-01, 7.463e-02) * s0_0_1;
	r0 += M4(-3.690e-02, -1.221e-02, -3.389e-02, 6.441e-02, 9.036e-03, 1.044e-01, 4.580e-02, 1.549e-01, 8.419e-02, 8.214e-02, -5.039e-02, -2.268e-01, -7.659e-02, 7.152e-02, 1.039e-01, -2.407e-01) * s0_0_2;
	r1 += M4(-2.753e-02, 1.240e-02, -1.249e-02, -3.250e-02, 3.140e-01, -2.284e-02, -1.692e-01, 7.260e-03, 8.800e-02, 9.535e-02, 1.988e-02, -2.280e-01, -1.704e-01, -4.100e-02, -1.096e-01, -2.612e-02) * s0_0_2;
	r2 += M4(-2.305e-02, -2.420e-02, 4.159e-02, 2.288e-02, 3.137e-02, 1.890e-02, -8.521e-03, -1.432e-02, -3.711e-02, -4.107e-02, 2.361e-02, 1.010e-03, 1.611e-02, -8.226e-03, 9.639e-02, 3.686e-02) * s0_0_2;
	r0 += M4(1.544e-01, 1.567e-01, 1.143e-01, 1.839e-01, 2.457e-03, -5.105e-02, 1.727e-02, 2.101e-01, -1.194e-02, -2.109e-02, 1.499e-02, 5.629e-02, 1.432e-01, -2.401e-02, -7.303e-02, 4.338e-01) * s0_1_0;
	r1 += M4(2.488e-01, -4.580e-01, -2.082e-01, -2.315e-02, -4.323e-02, -1.442e-01, -1.575e-01, 1.027e-01, 1.748e-01, 1.407e-01, 1.716e-01, -9.704e-02, -2.025e-02, -1.753e-01, 1.823e-01, -4.825e-02) * s0_1_0;
	r2 += M4(-1.374e-01, 1.418e-01, 8.620e-02, -2.176e-02, 5.977e-02, -5.611e-02, -8.193e-03, -9.694e-02, -3.512e-02, -7.265e-02, 9.097e-02, 1.021e-01, -1.314e-01, -5.735e-02, 3.763e-02, -1.008e-01) * s0_1_0;
	r0 += M4(-2.147e-01, 1.836e-01, -4.082e-02, -3.567e-01, 1.947e-01, 3.062e-01, 4.350e-01, 3.076e-01, 1.699e-02, 3.263e-01, 1.431e-01, -4.357e-02, -3.273e-01, 1.750e-01, 7.005e-02, -4.603e-01) * s0_1_1;
	r1 += M4(3.720e-01, -1.340e-01, 3.505e-01, -1.434e-01, 1.570e-01, 6.176e-01, -4.681e-02, -3.717e-02, -5.805e-02, 4.199e-01, 2.358e-01, 1.484e-01, 1.152e-01, 3.897e-01, 2.503e-03, 9.838e-02) * s0_1_1;
	r2 += M4(5.920e-02, -3.844e-02, 3.067e-02, 4.522e-03, 1.758e-01, -9.653e-02, 1.147e-01, -2.785e-02, -5.982e-02, 5.945e-02, 1.542e-02, 1.807e-01, 1.492e-01, 1.960e-01, 2.794e-02, 1.912e-01) * s0_1_1;
	r0 += M4(8.810e-02, 4.452e-02, 4.064e-02, 4.415e-02, 1.870e-01, 2.703e-01, 5.144e-02, 1.133e-01, 4.326e-02, 3.008e-03, 2.218e-02, 2.848e-01, -1.282e-04, 7.584e-02, 9.263e-02, 1.311e-01) * s0_1_2;
	r1 += M4(-1.767e-02, -2.868e-02, -8.442e-02, -1.260e-02, -2.288e-01, -2.564e-02, -2.752e-01, 3.355e-01, -1.184e-01, 1.646e-01, -3.372e-01, 1.613e-01, 6.910e-02, -3.967e-02, -5.739e-01, -1.305e-02) * s0_1_2;
	r2 += M4(-1.069e-02, -1.456e-02, -4.455e-02, -5.963e-02, 5.750e-02, 1.035e-01, -1.441e-02, -1.342e-01, -3.018e-02, 1.746e-02, -2.863e-02, -1.125e-02, -2.510e-02, 9.054e-03, 5.012e-02, 5.035e-02) * s0_1_2;
	r0 += M4(5.389e-02, -9.717e-03, 3.094e-02, 4.766e-02, -2.638e-02, -4.004e-02, 5.844e-02, -1.174e-01, 2.018e-02, 6.282e-02, -3.431e-02, -3.485e-02, -3.720e-02, -8.841e-05, 1.146e-02, -1.016e-01) * s0_2_0;
	r1 += M4(-1.403e-01, 1.750e-01, -4.065e-01, 6.589e-02, 8.775e-02, -6.425e-02, -3.201e-02, 3.529e-02, -2.079e-02, 8.813e-02, 1.545e-01, -1.473e-02, 8.029e-02, 7.642e-02, -2.322e-02, 1.031e-02) * s0_2_0;
	r2 += M4(4.805e-02, 6.775e-02, -3.341e-02, -4.655e-02, 7.996e-02, 5.591e-02, -3.368e-02, -8.063e-02, -3.310e-02, -6.668e-02, 1.650e-02, 5.167e-02, 8.582e-03, -3.630e-02, 4.924e-02, 7.364e-02) * s0_2_0;
	r0 += M4(-6.966e-02, 2.928e-02, -1.086e-01, -8.471e-02, -2.118e-01, -6.516e-02, -4.662e-02, 1.164e-01, 8.770e-02, 9.682e-02, 9.012e-03, 2.129e-01, 3.712e-02, -1.309e-02, -3.677e-02, 1.431e-01) * s0_2_1;
	r1 += M4(-8.131e-02, 1.566e-01, -1.606e-01, -1.852e-01, -4.053e-02, 7.812e-02, -2.083e-01, 2.477e-02, -6.911e-02, -8.539e-02, 2.939e-01, -3.074e-03, -1.117e-01, 1.948e-01, 1.421e-02, -1.198e-02) * s0_2_1;
	r2 += M4(2.378e-02, 8.584e-02, 4.633e-02, -8.390e-02, 2.963e-01, -2.263e-01, -4.124e-02, -1.632e-01, -7.639e-02, -1.343e-01, 3.512e-02, 2.151e-01, -4.436e-02, -3.573e-02, -9.854e-02, 1.244e-01) * s0_2_1;
	r0 += M4(-1.773e-02, -2.380e-02, 4.220e-03, 1.077e-01, -1.743e-01, -5.018e-02, 1.439e-02, -2.978e-01, -2.397e-02, 3.047e-02, 3.578e-02, 3.798e-01, -1.883e-01, 1.204e-02, 1.349e-01, 2.397e-01) * s0_2_2;
	r1 += M4(2.289e-02, 5.590e-02, -5.625e-02, -2.586e-02, 1.639e-02, -1.509e-01, -1.465e-02, -1.745e-01, -6.014e-02, 1.373e-02, 2.053e-02, 1.447e-01, 4.210e-02, -5.785e-02, -2.511e-01, -7.172e-03) * s0_2_2;
	r2 += M4(-1.923e-03, -9.201e-03, -2.258e-02, 2.762e-02, 8.258e-02, -3.132e-03, -3.337e-03, 5.182e-02, -1.852e-02, 4.606e-02, -4.245e-02, -2.547e-02, -9.438e-03, -2.536e-02, 5.361e-02, 2.199e-02) * s0_2_2;
	r0 += V4(-4.892e-03, -5.832e-03, -1.337e-02, -1.045e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.038e-02, -1.065e-02, 2.326e-03, -3.699e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(-3.306e-03, 1.937e-02, -2.528e-03, -9.180e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BOX-conv4
//!HOOK LUMA
//!COMPUTE 24 8 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 3 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv3_pt))
#define l1(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv3_pt))
#define l2(x, y) V4(conv3_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv3_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(3, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1, r2;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-8.540e-02, 6.273e-02, -1.763e-02, 6.333e-02, -2.040e-01, -7.730e-03, 1.097e-01, -3.721e-02, -1.128e-01, -5.627e-02, -2.270e-02, 1.096e-02, 2.230e-01, 2.502e-02, -2.252e-01, -2.858e-02) * s0_0_0;
	r1 += M4(-2.424e-02, 2.552e-02, -1.155e-01, 5.308e-03, 2.709e-04, -1.064e-02, 5.279e-02, -2.130e-02, -1.069e-02, -1.459e-02, 1.890e-01, -1.950e-02, -5.334e-02, 3.310e-02, 8.476e-03, -1.461e-02) * s0_0_0;
	r2 += M4(-1.965e-02, 5.917e-02, -3.957e-03, -8.074e-02, 5.794e-03, -2.063e-02, -1.291e-02, 7.920e-04, 9.043e-03, -1.307e-02, 4.283e-02, 3.670e-02, 1.352e-01, -1.861e-01, 1.573e-02, 1.197e-01) * s0_0_0;
	r0 += M4(2.744e-02, -1.161e-01, -2.310e-01, -1.595e-01, -2.051e-02, -3.659e-02, 7.157e-02, 2.349e-02, 2.214e-03, 3.846e-02, 1.900e-01, 5.185e-02, -4.294e-02, -2.408e-01, 1.285e-01, -1.558e-01) * s0_0_1;
	r1 += M4(1.337e-01, 3.849e-02, 6.645e-02, -9.723e-03, -7.136e-02, -3.905e-03, -1.344e-01, -6.205e-03, -8.796e-03, 7.947e-04, -2.879e-02, 2.827e-02, -1.020e-01, 3.462e-03, -1.043e-01, 3.898e-02) * s0_0_1;
	r2 += M4(-7.739e-02, -2.218e-02, 2.115e-01, -1.356e-02, 7.002e-02, 1.405e-02, -4.961e-02, 5.330e-02, 4.017e-02, 9.052e-02, 2.873e-03, 2.456e-02, -3.473e-02, 3.897e-01, -3.074e-02, -1.480e-02) * s0_0_1;
	r0 += M4(1.612e-01, -1.082e-01, 6.938e-02, 1.679e-02, -1.612e-01, 5.510e-03, 1.911e-02, 5.666e-03, 7.466e-02, 8.562e-02, -1.784e-01, 6.042e-02, 2.488e-02, -2.650e-01, 1.314e-01, -1.548e-01) * s0_0_2;
	r1 += M4(2.467e-02, 4.464e-04, 1.191e-03, -1.163e-02, -8.477e-03, 5.569e-03, -1.174e-01, 6.974e-03, -2.479e-03, -1.480e-02, 5.238e-02, -7.802e-03, -7.564e-02, -5.217e-03, -1.551e-01, -6.487e-03) * s0_0_2;
	r2 += M4(7.312e-03, -5.341e-02, -1.550e-03, 3.546e-02, -3.017e-03, 9.812e-02, 4.153e-02, -2.858e-02, -1.038e-02, 1.529e-01, 4.963e-02, -1.776e-02, -2.350e-02, -2.222e-02, 8.345e-02, -1.262e-02) * s0_0_2;
	r0 += M4(1.137e-01, -2.649e-01, 1.173e-01, -6.218e-02, 8.251e-02, 1.679e-02, 3.260e-02, -5.539e-02, -4.505e-02, 6.616e-02, -8.287e-03, -2.608e-02, 6.162e-02, -9.536e-02, 6.030e-02, -1.615e-01) * s0_1_0;
	r1 += M4(3.349e-01, 4.919e-02, -3.017e-02, 3.772e-02, 4.160e-02, 5.072e-02, -1.692e-01, 3.548e-02, 4.635e-02, 1.151e-01, -2.013e-02, 3.069e-02, -3.873e-01, 2.999e-01, 1.019e-01, 1.017e-01) * s0_1_0;
	r2 += M4(2.526e-02, -6.455e-01, 3.444e-02, 2.913e-02, -6.103e-02, 1.145e-01, -1.020e-01, 8.653e-02, -6.714e-02, 6.014e-02, 4.443e-02, 6.621e-02, 2.831e-02, -2.993e-01, -1.645e-01, 9.869e-02) * s0_1_0;
	r0 += M4(1.467e-01, 5.845e-01, 2.143e-01, -1.406e-01, -1.857e-01, -3.628e-02, 6.747e-02, -7.933e-02, 3.786e-02, -2.147e-02, -3.233e-01, 1.045e-01, -2.119e-01, 1.858e-01, 1.971e-02, 4.700e-03) * s0_1_1;
	r1 += M4(3.969e-01, 1.997e-01, 1.292e-01, 2.608e-01, 1.117e-01, -9.529e-02, -1.715e-01, -2.692e-02, 2.096e-01, 6.781e-02, 3.451e-02, 6.901e-02, 2.924e-02, 6.796e-01, -1.059e-01, 4.989e-01) * s0_1_1;
	r2 += M4(9.538e-02, 2.482e-01, -5.136e-02, -4.484e-01, -1.996e-03, 2.916e-04, -1.717e-01, 2.744e-01, 1.043e-01, 1.395e-01, 2.755e-01, 1.856e-01, 4.553e-01, 3.115e-01, -2.514e-02, -3.032e-01) * s0_1_1;
	r0 += M4(-3.044e-02, -4.539e-01, -2.255e-01, 1.261e-02, 1.073e-01, 1.582e-01, 2.239e-02, 1.499e-01, 5.147e-02, -1.936e-01, 2.396e-01, -1.069e-01, -4.419e-02, -1.260e-01, -4.053e-02, -1.754e-01) * s0_1_2;
	r1 += M4(8.776e-02, -4.506e-02, 7.106e-03, 1.784e-02, 1.474e-03, 1.093e-02, -3.036e-02, 3.395e-02, -5.139e-02, -1.279e-02, -4.690e-02, 7.207e-04, -1.501e-01, -5.641e-02, -2.258e-02, 8.424e-02) * s0_1_2;
	r2 += M4(1.099e-02, -3.292e-02, 2.956e-01, 4.211e-02, -6.247e-03, 1.472e-01, -4.013e-01, -1.632e-01, -3.481e-02, 9.017e-02, 5.785e-02, -1.911e-02, -4.475e-03, -1.411e-01, -2.806e-01, 8.576e-02) * s0_1_2;
	r0 += M4(-3.232e-02, 7.787e-02, 5.679e-02, -7.708e-02, -2.372e-01, -1.076e-01, 6.507e-02, 4.527e-02, 7.609e-02, -8.011e-02, -9.629e-03, -6.518e-02, 2.810e-01, -7.794e-02, -5.216e-03, 1.231e-02) * s0_2_0;
	r1 += M4(1.753e-01, -8.996e-03, -9.824e-02, -5.656e-04, -1.111e-01, -5.532e-03, 5.874e-02, -2.235e-02, -6.870e-02, 3.148e-02, -1.958e-03, 1.534e-02, 8.719e-02, -9.266e-02, -2.702e-02, -1.784e-02) * s0_2_0;
	r2 += M4(1.223e-01, 2.038e-01, 1.488e-01, -1.742e-01, -7.828e-02, 1.416e-01, 3.392e-02, 2.299e-02, 2.054e-04, 7.901e-02, -2.730e-02, 1.071e-01, 5.675e-03, -1.181e-01, 3.749e-02, -6.275e-02) * s0_2_0;
	r0 += M4(6.655e-02, -3.725e-01, -9.302e-02, 7.272e-02, -9.891e-02, -1.590e-01, -4.348e-02, -1.383e-01, 3.984e-02, -2.249e-01, -8.968e-02, -2.151e-01, -1.883e-02, -7.850e-02, 7.624e-02, -1.385e-01) * s0_2_1;
	r1 += M4(2.017e-01, 2.910e-02, -3.742e-02, -4.887e-02, 2.206e-02, 1.518e-01, -5.062e-03, 7.562e-02, 2.597e-01, 1.662e-02, 1.209e-01, 3.442e-02, -4.424e-02, -1.144e-03, 2.895e-01, -3.666e-02) * s0_2_1;
	r2 += M4(1.487e-01, -3.580e-01, 3.291e-01, 2.329e-01, 3.233e-01, -4.137e-02, 2.274e-01, 6.074e-01, 5.314e-01, -4.346e-01, -5.370e-01, -3.174e-01, -3.850e-01, 1.362e-01, -1.480e-01, 1.228e-01) * s0_2_1;
	r0 += M4(-5.840e-02, 1.222e-01, -3.149e-02, -5.256e-02, -2.799e-02, 1.104e-01, 8.854e-02, -6.083e-02, 5.176e-02, -1.030e-01, -5.409e-02, -1.013e-01, -2.300e-01, -1.724e-01, -2.299e-02, 4.689e-02) * s0_2_2;
	r1 += M4(2.870e-02, -1.849e-02, 1.360e-01, -6.109e-04, -1.896e-02, 3.351e-02, -5.879e-02, 2.174e-02, -7.790e-02, 1.095e-02, -2.874e-01, -1.318e-03, 1.947e-02, -5.717e-02, 1.152e-01, -2.973e-02) * s0_2_2;
	r2 += M4(-5.826e-02, 1.033e-01, 3.327e-01, -6.178e-02, -1.388e-01, -7.536e-02, 4.131e-01, -1.704e-01, -3.923e-02, 7.444e-02, -4.976e-01, 4.293e-02, -9.627e-02, -2.731e-01, -5.370e-03, 8.512e-02) * s0_2_2;
	r0 += M4(-1.532e-02, 4.813e-02, -3.896e-02, 5.042e-02, 1.144e-01, 2.166e-02, -1.183e-01, 4.186e-02, -2.260e-01, -1.204e-02, -1.057e-01, -3.529e-02, -1.062e-01, -4.359e-03, 4.550e-02, 1.662e-01) * s1_0_0;
	r1 += M4(-5.766e-02, -2.761e-02, -2.920e-01, -2.293e-02, 1.695e-02, -8.856e-03, 3.573e-02, 1.044e-02, 1.274e-01, 8.284e-03, -5.983e-03, 4.082e-03, -3.582e-01, 4.797e-02, -1.040e-01, 1.005e-02) * s1_0_0;
	r2 += M4(5.461e-03, -1.976e-02, 2.396e-02, -3.669e-02, 2.443e-03, 6.038e-02, 5.048e-02, 1.672e-02, 1.310e-02, -3.414e-02, 3.402e-02, -6.557e-03, -5.330e-02, 3.022e-02, 8.068e-02, -5.749e-02) * s1_0_0;
	r0 += M4(-5.857e-02, 1.180e-01, -3.258e-01, -3.750e-04, 8.395e-02, -2.032e-02, -1.352e-02, 1.695e-02, -1.303e-01, -6.483e-02, -1.908e-01, -5.456e-02, 1.974e-02, 5.658e-02, 1.317e-01, -1.475e-01) * s1_0_1;
	r1 += M4(-4.412e-02, 1.676e-02, 1.365e-02, -1.543e-02, -5.196e-02, 9.955e-03, 1.093e-01, -2.725e-02, 1.388e-01, 4.589e-02, -9.269e-02, 1.853e-02, -2.449e-02, -1.165e-02, 3.396e-03, -9.227e-03) * s1_0_1;
	r2 += M4(-2.815e-02, -1.568e-01, -2.513e-02, 3.261e-02, -5.773e-02, -6.808e-02, 5.691e-02, -3.796e-02, 1.193e-03, 5.446e-02, -4.188e-02, -7.301e-02, 3.752e-02, -3.292e-01, 2.959e-01, 5.473e-02) * s1_0_1;
	r0 += M4(1.002e-01, -8.075e-04, 1.457e-01, 6.051e-02, 2.979e-05, 3.739e-02, 6.476e-02, -4.156e-02, 1.626e-02, -1.519e-01, -1.048e-01, 4.649e-02, -1.842e-01, -1.646e-01, 5.549e-02, -1.134e-01) * s1_0_2;
	r1 += M4(-1.028e-01, 3.436e-03, 1.873e-01, 1.018e-02, 1.420e-02, -2.046e-02, 8.152e-02, 1.297e-02, 2.569e-01, 3.207e-02, -7.161e-02, 2.887e-02, -2.362e-02, 4.940e-03, 5.431e-02, 4.555e-03) * s1_0_2;
	r2 += M4(1.315e-02, 4.971e-02, 1.518e-01, -4.467e-03, 6.252e-02, 1.198e-02, -2.049e-02, 8.093e-02, -3.531e-02, 1.106e-01, 1.107e-01, 1.182e-02, -1.630e-02, 2.023e-02, -1.365e-02, -2.619e-02) * s1_0_2;
	r0 += M4(-1.949e-01, 1.087e-01, -2.858e-02, 7.465e-03, -5.169e-02, -1.004e-03, -4.753e-02, 1.237e-02, 6.135e-02, -6.087e-02, -2.738e-03, -5.484e-02, -1.010e-01, -3.683e-02, -1.893e-01, -1.909e-01) * s1_1_0;
	r1 += M4(5.112e-02, -1.265e-01, 3.408e-02, -8.382e-02, -4.234e-02, -2.110e-02, -2.360e-02, -5.583e-03, -9.888e-02, 2.615e-02, 7.054e-02, 1.103e-03, 7.246e-01, 9.525e-03, 4.097e-04, 4.935e-02) * s1_1_0;
	r2 += M4(4.562e-03, -4.380e-02, -8.025e-02, -1.121e-01, 5.968e-02, -7.005e-02, 1.467e-02, -1.504e-02, 3.000e-02, -1.386e-01, 2.176e-02, -6.416e-02, 7.597e-02, -1.921e-02, 4.186e-02, 9.306e-02) * s1_1_0;
	r0 += M4(-1.085e-01, -4.702e-01, 2.053e-01, 1.694e-01, -1.056e-01, 2.510e-01, 9.906e-02, 5.728e-02, -6.702e-02, 2.063e-03, 4.530e-02, -1.999e-02, 8.851e-02, -1.252e-02, 4.272e-01, 5.369e-01) * s1_1_1;
	r1 += M4(2.237e-01, 2.705e-01, -5.210e-02, 3.196e-01, -5.142e-01, 4.431e-01, 7.868e-02, 9.057e-02, -3.350e-01, -6.995e-02, 4.070e-02, -2.987e-02, 6.074e-01, 2.617e-02, 8.203e-02, -3.652e-02) * s1_1_1;
	r2 += M4(-8.571e-03, -2.881e-01, -5.682e-01, -3.301e-02, -1.470e-01, 7.653e-02, 1.890e-01, 3.683e-02, 1.233e-02, -7.520e-01, 9.023e-02, 2.365e-01, 9.411e-02, -8.673e-02, -5.103e-01, -1.354e-01) * s1_1_1;
	r0 += M4(-1.483e-01, 6.230e-01, -1.104e-01, 1.633e-01, -8.405e-03, -2.705e-01, 3.803e-01, -3.747e-02, 3.354e-02, 8.727e-02, 1.102e-01, -1.394e-01, -2.815e-02, -5.530e-02, -4.021e-02, -1.470e-01) * s1_1_2;
	r1 += M4(8.083e-02, -1.780e-02, -2.418e-02, 7.125e-03, -5.211e-02, -5.835e-02, 3.666e-02, 1.510e-01, -1.572e-01, 6.372e-02, 5.164e-02, 4.384e-02, -6.692e-02, 1.270e-02, -6.472e-02, 2.117e-02) * s1_1_2;
	r2 += M4(8.633e-03, 1.044e-02, -1.901e-01, 1.062e-01, 9.009e-02, 1.961e-01, 2.241e-01, 1.347e-01, 1.952e-02, 3.208e-01, 3.078e-01, -1.882e-01, 3.010e-03, -1.769e-01, -2.042e-02, 4.339e-02) * s1_1_2;
	r0 += M4(-2.085e-01, 3.845e-02, 6.736e-02, 1.013e-01, 1.419e-01, 5.195e-02, -3.958e-03, -2.967e-02, -1.690e-01, 2.419e-02, -5.779e-04, 5.118e-02, 2.068e-01, 1.525e-03, -3.047e-02, -1.637e-01) * s1_2_0;
	r1 += M4(-8.483e-03, 1.294e-01, -8.279e-03, 6.393e-02, 3.053e-02, -1.390e-02, 5.424e-02, -9.311e-03, -1.132e-02, -1.618e-02, -7.730e-02, -3.487e-03, -3.818e-01, -1.581e-02, -2.078e-01, -1.285e-02) * s1_2_0;
	r2 += M4(-4.257e-02, -1.771e-01, 8.665e-02, -1.306e-01, 9.042e-03, -1.264e-01, -5.863e-02, -1.606e-02, -3.441e-02, -1.960e-01, 4.188e-02, -2.746e-04, -1.249e-01, -3.820e-01, 3.612e-02, 1.335e-01) * s1_2_0;
	r0 += M4(2.484e-01, 5.502e-01, -7.678e-02, 1.129e-01, -2.547e-01, -1.420e-01, -4.338e-02, -1.669e-02, -4.635e-02, -7.846e-02, -4.530e-02, -2.763e-02, -1.446e-01, -2.716e-01, 2.988e-02, -2.209e-01) * s1_2_1;
	r1 += M4(-1.072e-01, 3.724e-02, -5.549e-03, -8.265e-03, 2.571e-01, 1.160e-02, 1.903e-02, -3.222e-03, 1.548e-01, -4.060e-03, 1.463e-01, 6.083e-03, -3.777e-01, 1.030e-01, -1.596e-01, 9.611e-02) * s1_2_1;
	r2 += M4(2.335e-01, 4.166e-02, 8.574e-01, 1.301e-01, -1.971e-01, 8.031e-02, -2.179e-01, -1.082e-01, 6.659e-02, -2.725e-01, -9.254e-02, -8.239e-02, 1.274e-01, 8.148e-02, 2.307e-01, -1.382e-01) * s1_2_1;
	r0 += M4(-4.235e-02, 1.502e-01, -5.974e-02, 5.481e-02, 1.739e-01, 1.561e-01, 1.224e-02, 9.487e-02, 2.615e-01, 2.591e-03, 1.450e-02, -7.736e-03, 2.483e-01, -1.774e-01, -7.766e-02, 1.709e-01) * s1_2_2;
	r1 += M4(7.126e-02, -2.680e-02, -1.741e-02, -2.484e-02, -7.741e-02, 2.530e-02, 3.466e-02, 1.445e-02, -6.413e-02, -1.568e-02, 3.934e-02, -1.691e-02, 8.823e-02, 1.218e-02, 6.626e-02, 2.501e-03) * s1_2_2;
	r2 += M4(-1.959e-02, -1.384e-02, 1.204e-01, -4.589e-02, 1.037e-01, 8.215e-02, -3.562e-01, 1.640e-01, -1.709e-01, 3.587e-02, -2.725e-01, 3.812e-02, 1.194e-01, -1.161e-01, 2.144e-01, 6.574e-02) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-4.207e-02, -1.309e-02, 3.695e-02, -1.184e-01, -1.023e-01, 5.935e-03, -8.066e-02, 4.506e-02, -2.712e-01, -8.019e-03, -1.578e-02, -7.609e-02, -1.513e-01, -1.892e-03, 1.419e-01, 1.773e-03) * s0_0_0;
	r1 += M4(-1.950e-02, 7.991e-03, -1.729e-02, -5.618e-03, 9.206e-02, 1.731e-02, -2.961e-01, -5.524e-03, 5.898e-02, 1.462e-02, 4.870e-02, 2.719e-03, -6.357e-02, 6.193e-02, -4.999e-01, 2.391e-02) * s0_0_0;
	r2 += M4(-7.143e-03, -2.597e-02, -1.011e-02, 4.506e-02, 5.741e-02, 3.327e-02, 6.281e-02, 1.255e-03, 2.828e-02, 1.315e-01, -6.064e-02, 1.954e-02, -1.421e-02, 4.111e-02, 5.762e-02, 3.737e-04) * s0_0_0;
	r0 += M4(9.589e-02, -8.534e-02, -5.449e-01, 2.132e-02, -1.755e-01, 4.778e-02, 8.541e-02, 1.717e-02, 1.822e-01, -2.413e-01, 2.989e-01, -5.122e-02, -2.865e-01, 1.178e-01, 1.213e-01, 5.350e-02) * s0_0_1;
	r1 += M4(2.049e-01, 7.892e-04, -1.143e-02, 1.099e-02, 9.002e-03, -3.802e-02, -1.735e-01, -1.360e-02, 1.123e-01, -2.504e-02, -1.035e-01, 2.595e-02, -6.724e-03, 2.448e-01, -4.044e-01, 5.034e-02) * s0_0_1;
	r2 += M4(-6.541e-03, 2.793e-01, -1.038e-01, -1.311e-01, -1.212e-02, -2.966e-01, -1.577e-01, 2.159e-03, 6.419e-02, 8.156e-02, -6.285e-02, -6.960e-02, -8.837e-02, 1.936e-01, 8.280e-02, 8.130e-02) * s0_0_1;
	r0 += M4(-1.416e-01, -6.468e-02, 3.604e-02, -7.294e-02, -2.517e-01, -8.669e-03, -1.776e-01, -1.672e-02, -1.405e-01, 2.128e-01, 1.302e-01, 1.002e-02, -1.271e-01, 5.511e-02, 5.404e-02, 1.526e-01) * s0_0_2;
	r1 += M4(-2.246e-02, 1.826e-02, 8.889e-02, -1.041e-02, 2.200e-02, 1.734e-02, -2.590e-01, -2.401e-03, 1.441e-01, 2.244e-04, -3.497e-02, 7.734e-03, -1.754e-01, 2.570e-02, -3.004e-01, 7.259e-03) * s0_0_2;
	r2 += M4(3.214e-02, -2.103e-01, 1.322e-01, 5.828e-02, 1.402e-02, 1.802e-01, 3.630e-02, -5.538e-02, 4.730e-02, -4.247e-02, -3.252e-01, -4.389e-02, -6.311e-03, 1.182e-01, 1.021e-01, 2.364e-02) * s0_0_2;
	r0 += M4(-5.860e-02, -2.523e-02, -4.627e-02, 1.037e-01, -9.600e-02, 6.706e-02, 8.909e-02, 1.261e-01, -3.626e-02, -2.120e-02, -1.753e-01, 7.234e-02, -1.217e-01, 6.658e-02, -1.791e-02, -1.405e-02) * s0_1_0;
	r1 += M4(-1.986e-01, 8.140e-02, -1.294e-01, -1.238e-02, -2.746e-01, -1.105e-02, -2.157e-01, -6.061e-02, -1.349e-01, -1.738e-02, 2.345e-02, -9.671e-03, 3.444e-01, 1.177e-01, -5.425e-01, -2.393e-02) * s0_1_0;
	r2 += M4(2.327e-02, 8.156e-03, -5.669e-03, 7.660e-02, 3.123e-02, 1.582e-01, -2.850e-02, -1.485e-02, 7.115e-02, 2.615e-01, 2.306e-02, 2.291e-02, 1.016e-02, -8.196e-02, -2.896e-02, -4.199e-02) * s0_1_0;
	r0 += M4(-1.276e-01, -1.239e-01, 3.625e-02, -5.488e-01, -4.364e-01, -4.023e-01, -1.452e-01, -3.193e-01, 8.981e-02, 4.233e-01, 1.898e-01, 2.354e-01, -3.179e-01, 6.509e-02, -2.636e-01, 3.311e-01) * s0_1_1;
	r1 += M4(-9.007e-01, 3.638e-01, -5.064e-02, -1.978e-01, -2.824e-01, -2.986e-01, -2.478e-01, 2.146e-01, -3.369e-01, 2.085e-01, -1.871e-01, 2.384e-01, 4.132e-01, -2.643e-01, -4.468e-01, 2.769e-01) * s0_1_1;
	r2 += M4(1.462e-01, -5.309e-01, -4.992e-01, -5.513e-01, -3.257e-01, -1.000e+00, -1.242e-01, 1.966e-01, -2.669e-01, 3.974e-01, 3.776e-01, -2.606e-01, 6.230e-01, 1.321e-01, 1.958e-02, 2.604e-01) * s0_1_1;
	r0 += M4(1.184e-01, 1.296e-01, -2.241e-01, 2.372e-01, -3.341e-01, 4.098e-02, 1.362e-01, -1.635e-01, -8.335e-02, -3.838e-01, -1.703e-01, 8.487e-02, -2.379e-01, 2.988e-01, 7.612e-03, 3.915e-02) * s0_1_2;
	r1 += M4(4.620e-02, -1.469e-02, -2.013e-01, -5.126e-02, -1.152e-01, 5.728e-03, -2.343e-01, -5.229e-03, -5.318e-02, 8.185e-03, -2.878e-02, -2.980e-03, 9.163e-02, 1.494e-02, -5.914e-01, 1.071e-02) * s0_1_2;
	r2 += M4(7.352e-02, -6.850e-02, -3.389e-01, 3.644e-02, -2.964e-02, 2.079e-01, -5.950e-02, -3.329e-02, 6.237e-02, 9.812e-02, 3.886e-01, 4.145e-02, 1.544e-01, -1.978e-01, -1.101e-02, 6.859e-02) * s0_1_2;
	r0 += M4(3.664e-02, -9.917e-03, 2.134e-02, -3.967e-02, -1.718e-01, 1.294e-01, -6.443e-04, 1.678e-02, -2.049e-02, 1.304e-01, -5.212e-02, 4.679e-04, -4.558e-01, -1.782e-01, 1.371e-02, -4.714e-02) * s0_2_0;
	r1 += M4(1.016e-01, -1.020e-02, -2.227e-02, -9.638e-03, 1.470e-01, -4.493e-02, -3.288e-01, 2.215e-02, -6.310e-02, 3.967e-02, -8.341e-02, 1.132e-02, -1.255e-01, -1.349e-02, -3.634e-01, -2.082e-02) * s0_2_0;
	r2 += M4(-5.433e-02, 3.739e-01, -9.197e-02, -5.198e-02, -8.473e-03, -5.061e-02, 1.777e-02, -8.937e-02, 3.301e-02, -1.299e-01, -1.626e-01, 1.382e-01, -8.132e-02, 4.176e-02, -6.905e-03, -3.481e-02) * s0_2_0;
	r0 += M4(-7.791e-02, -9.431e-04, 1.047e-02, 1.363e-01, -3.772e-01, -2.292e-01, -1.005e-02, -3.211e-02, 3.419e-02, 5.282e-03, 1.070e-01, 1.328e-02, -4.486e-01, 2.474e-01, 2.338e-02, 1.390e-02) * s0_2_1;
	r1 += M4(-9.314e-02, 2.923e-02, -1.403e-01, 1.036e-03, 5.165e-02, -2.645e-02, -4.678e-01, -5.914e-03, -1.542e-02, 7.045e-02, 8.582e-02, 2.291e-03, -2.108e-01, 9.974e-03, -4.431e-01, 7.141e-03) * s0_2_1;
	r2 += M4(2.166e-01, -3.526e-01, 1.442e-01, -1.439e-01, -1.216e-01, -2.375e-01, 9.598e-02, 2.652e-02, 1.401e-01, 3.261e-01, -2.003e-01, 2.258e-02, -1.394e-01, 3.656e-01, -1.392e-02, 8.206e-03) * s0_2_1;
	r0 += M4(-8.565e-02, -5.648e-02, -3.442e-02, -4.387e-02, -3.091e-01, -9.337e-02, 6.009e-03, 2.144e-02, -1.834e-01, 7.544e-02, 2.768e-02, -5.117e-02, -4.490e-01, 6.243e-02, -1.188e-02, 6.819e-02) * s0_2_2;
	r1 += M4(2.315e-02, -5.539e-03, 2.217e-02, -1.246e-02, 1.964e-02, -3.940e-03, -1.688e-01, 1.782e-02, 6.517e-03, 9.713e-03, -9.238e-02, 1.397e-02, -1.506e-02, -1.138e-02, -2.135e-01, -1.689e-02) * s0_2_2;
	r2 += M4(-8.579e-02, -5.629e-02, 1.207e-02, -3.848e-02, -1.812e-02, -1.357e-02, -3.488e-01, 4.229e-02, 6.099e-02, 1.119e-01, 1.790e-01, 2.097e-02, 9.017e-02, -8.066e-02, -1.837e-01, -7.028e-02) * s0_2_2;
	r0 += V4(-1.065e-01, 3.767e-03, -4.631e-03, 1.679e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-3.856e-04, 9.002e-03, -8.794e-02, -4.406e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(1.083e-02, 1.213e-02, -1.491e-03, -4.598e-03);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r2));
}

//!DESC CuNNy-4x12-BOX-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(0, 0)) + vec2(0.5)) * conv4_pt))
#define l1(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(1, 0)) + vec2(0.5)) * conv4_pt))
#define l2(x, y) V4(conv4_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(3, 1) + ivec2(2, 0)) + vec2(0.5)) * conv4_pt))
shared V4 G[3][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
			G[2][ay][ax] = l2(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(1.407e-01, 7.351e-02, 1.096e-01, -7.310e-02, 6.274e-02, -6.748e-02, -1.397e-02, 9.683e-04, 1.298e-02, -1.294e-02, -5.648e-03, -1.920e-03, 1.395e-02, -1.234e-02, -1.243e-02, 1.309e-03) * s0_0_0;
	r0 += M4(-1.353e-01, -1.484e-01, 1.664e-01, 4.730e-02, -5.204e-02, 3.949e-02, 8.076e-04, 2.047e-02, 1.959e-02, -2.008e-02, 4.457e-03, -8.005e-03, 6.320e-03, 4.046e-02, 3.292e-03, -2.521e-02) * s0_0_1;
	r0 += M4(-1.014e-01, 3.378e-03, -1.341e-01, -6.323e-02, 9.553e-03, -1.568e-02, -2.482e-03, -9.506e-03, -1.240e-03, 6.102e-03, -3.204e-03, -1.326e-03, -1.690e-02, -1.652e-02, 1.810e-02, -5.691e-03) * s0_0_2;
	r0 += M4(-2.884e-01, -1.660e-02, 2.635e-01, -2.187e-01, -3.315e-01, 1.480e-01, 1.518e-01, 1.046e-01, -1.149e-01, 1.239e-02, 7.886e-02, -2.127e-02, 3.035e-02, 5.530e-02, 1.587e-01, -4.949e-02) * s0_1_0;
	r0 += M4(-4.920e-02, 3.657e-01, 3.615e-01, -3.357e-01, 2.807e-02, 1.774e-01, 7.393e-04, -2.898e-01, 1.121e-01, -1.195e-01, -2.039e-02, 4.431e-02, 1.548e-01, -4.651e-01, -1.489e-01, 2.665e-01) * s0_1_1;
	r0 += M4(2.634e-01, 3.808e-01, 2.026e-01, 7.832e-02, -3.639e-03, -7.189e-03, 4.419e-04, 1.351e-02, 3.303e-03, -2.961e-02, 1.016e-02, 6.754e-03, 1.192e-02, 1.837e-02, 1.408e-02, -1.982e-02) * s0_1_2;
	r0 += M4(3.854e-02, 1.779e-01, -1.971e-01, -1.028e-01, 1.465e-02, -2.070e-02, 8.163e-03, -3.405e-02, 6.536e-02, -3.650e-02, 8.281e-02, -2.778e-02, 5.934e-02, 5.797e-02, -2.259e-01, 3.218e-02) * s0_2_0;
	r0 += M4(4.378e-02, 1.448e-01, -1.040e-01, -1.984e-01, -1.326e-03, -9.143e-03, -2.306e-02, 4.396e-02, 3.772e-02, -2.295e-02, 2.587e-01, -4.091e-01, -5.310e-03, 2.925e-02, 5.530e-02, -1.206e-01) * s0_2_1;
	r0 += M4(-8.834e-02, 6.128e-02, 1.973e-01, 4.549e-02, -1.524e-03, -1.196e-03, 2.857e-03, 8.874e-03, -2.398e-03, 1.666e-02, 1.072e-03, -4.779e-03, 3.704e-03, -1.099e-02, 1.427e-02, -1.198e-02) * s0_2_2;
	r0 += M4(2.667e-02, -8.890e-03, -1.284e-02, 3.032e-03, -7.068e-03, 4.814e-04, 4.422e-03, -6.762e-04, -1.322e-01, 1.225e-01, 4.381e-02, 2.460e-01, -1.208e-02, 4.515e-03, 1.347e-02, -5.193e-03) * s1_0_0;
	r0 += M4(9.763e-03, 1.029e-03, -1.314e-02, -2.214e-02, -2.484e-02, -1.598e-03, -6.390e-03, 1.068e-03, 6.960e-03, -1.569e-01, -2.210e-01, -1.645e-03, -3.477e-02, 7.478e-03, 1.801e-02, 3.191e-02) * s1_0_1;
	r0 += M4(5.240e-03, 1.178e-02, -4.574e-03, -5.509e-03, 1.071e-02, -1.276e-02, 5.754e-03, 7.953e-04, 7.871e-02, 2.325e-01, -3.725e-03, 4.078e-02, -3.214e-03, -9.185e-03, -3.396e-04, -1.535e-03) * s1_0_2;
	r0 += M4(-7.690e-02, 4.879e-02, 5.239e-02, -8.696e-03, 1.046e-02, -7.428e-04, -1.692e-02, 1.772e-03, -8.364e-02, 1.880e-01, -2.274e-01, -1.474e-02, -8.423e-02, -1.223e-02, -1.100e-01, 1.486e-02) * s1_1_0;
	r0 += M4(-2.924e-01, -3.610e-01, 3.342e-01, 2.885e-01, 5.059e-01, 2.364e-02, 1.557e-01, 4.897e-02, -1.236e-01, 6.749e-02, -3.333e-01, 7.745e-02, -1.816e-01, -4.033e-01, -2.064e-01, -3.471e-01) * s1_1_1;
	r0 += M4(2.706e-02, -5.924e-02, -1.538e-02, 5.747e-02, -6.266e-03, 1.042e-01, 1.503e-02, 2.708e-02, -1.163e-01, -3.303e-02, -9.264e-02, -8.352e-02, 2.589e-02, 4.747e-02, 1.008e-02, 3.553e-02) * s1_1_2;
	r0 += M4(-9.205e-04, 7.292e-03, 1.327e-02, -1.698e-02, -3.595e-03, 5.938e-04, 6.953e-03, -1.969e-03, 2.384e-02, -1.121e-01, -3.183e-01, -5.264e-02, 6.179e-03, 5.109e-03, -1.857e-03, -1.147e-02) * s1_2_0;
	r0 += M4(-3.162e-02, -2.826e-02, 5.724e-02, 4.164e-02, -3.699e-02, -4.214e-03, 1.448e-01, 8.941e-03, 4.960e-02, 4.928e-02, -3.540e-01, 1.343e-01, 2.704e-03, -3.149e-03, -5.259e-03, -3.054e-02) * s1_2_1;
	r0 += M4(1.583e-03, 1.075e-03, -1.947e-02, -1.038e-02, 8.112e-04, -3.058e-02, 1.176e-02, 7.837e-02, 2.299e-01, -8.393e-02, 1.521e-01, 1.939e-01, 3.304e-03, 1.327e-02, -1.037e-02, -2.134e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2];
	r0 += M4(-3.908e-02, -6.790e-03, 8.388e-03, -5.581e-03, 1.112e-02, 1.741e-02, -2.530e-02, 1.872e-03, 9.273e-02, -1.853e-02, -2.760e-02, -4.280e-03, 2.075e-02, 7.744e-04, -3.082e-02, 1.625e-03) * s0_0_0;
	r0 += M4(-8.012e-03, 2.466e-01, -8.813e-02, -6.324e-03, 1.060e-01, -1.208e-01, -1.059e-02, 1.351e-02, -3.059e-02, 1.243e-01, -1.796e-02, -2.662e-02, -7.022e-02, -4.438e-02, 9.692e-02, 7.887e-03) * s0_0_1;
	r0 += M4(-3.349e-03, 7.603e-03, -1.255e-03, -1.003e-02, -1.978e-02, 8.172e-02, -1.824e-02, 2.167e-02, 1.350e-03, -3.479e-02, 4.868e-03, 5.340e-04, 4.314e-04, 1.309e-02, 3.816e-03, -5.846e-03) * s0_0_2;
	r0 += M4(-1.345e-02, -2.900e-03, 2.983e-02, -2.276e-02, -6.274e-02, 8.708e-03, 1.364e-02, -7.199e-03, 2.505e-01, 1.042e-01, -3.523e-01, -6.367e-02, 2.276e-02, -2.165e-03, 9.594e-02, -1.836e-02) * s0_1_0;
	r0 += M4(-1.333e-01, 3.607e-02, 9.888e-02, 2.699e-01, 2.623e-01, -2.061e-01, 3.605e-01, -3.276e-01, 6.909e-02, 2.307e-01, -2.688e-02, -3.475e-01, -2.060e-01, 3.754e-01, -5.229e-01, 2.822e-01) * s0_1_1;
	r0 += M4(1.910e-03, -2.984e-02, -5.741e-03, -2.150e-03, -3.175e-04, -6.374e-03, -3.846e-02, 7.051e-02, 1.056e-03, -4.386e-03, -1.297e-02, 1.782e-02, 1.347e-03, -2.887e-02, 1.766e-02, 4.236e-02) * s0_1_2;
	r0 += M4(1.156e-02, 1.000e-03, -1.935e-02, 3.536e-04, -7.367e-03, 2.004e-02, -8.019e-02, 2.925e-02, -1.098e-02, -1.076e-02, 2.180e-02, 2.167e-02, -2.150e-03, -1.500e-03, -5.153e-03, 7.734e-03) * s0_2_0;
	r0 += M4(1.205e-02, 1.477e-02, -5.432e-02, -1.630e-02, -3.114e-02, 1.435e-02, 1.419e-02, 2.583e-02, -1.455e-02, -1.617e-02, 2.661e-02, 2.467e-02, -2.520e-02, 3.556e-04, -1.568e-02, 5.749e-02) * s0_2_1;
	r0 += M4(-6.408e-04, 7.455e-03, 8.525e-04, -2.167e-02, -4.701e-04, 5.596e-03, 1.839e-03, -1.684e-02, 1.107e-03, -1.014e-03, 4.078e-03, 8.769e-03, 7.671e-03, -1.483e-03, -1.294e-02, 6.402e-03) * s0_2_2;
	r0 += V4(-2.635e-08, -2.986e-08, -2.988e-08, -2.728e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
