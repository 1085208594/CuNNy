// CuNNy 4x32 TEST
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-4x32-TEST-in
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1, r2, r3, r4, r5, r6, r7;
	r0 = V4(0.0); r1 = V4(0.0); r2 = V4(0.0); r3 = V4(0.0); r4 = V4(0.0); r5 = V4(0.0); r6 = V4(0.0); r7 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(8.028e-02, -1.910e-03, 1.267e-02, 2.010e-01) * s0_0_0;
	r1 += V4(-3.501e-02, 1.479e-01, -4.081e-03, 1.385e-02) * s0_0_0;
	r2 += V4(-7.739e-02, -1.066e-01, 1.740e-01, 1.122e-02) * s0_0_0;
	r3 += V4(4.974e-02, -3.988e-02, -1.808e-02, 2.120e-02) * s0_0_0;
	r4 += V4(-9.520e-03, 3.038e-01, 1.074e-02, -1.975e-02) * s0_0_0;
	r5 += V4(-1.111e-01, -2.568e-01, 1.345e-01, -3.523e-02) * s0_0_0;
	r6 += V4(1.389e-02, -1.115e-02, 1.702e-02, -2.568e-01) * s0_0_0;
	r7 += V4(-1.811e-01, -5.082e-03, -2.281e-02, -1.233e-01) * s0_0_0;
	r0 += V4(6.610e-02, 9.159e-03, -2.783e-02, -1.429e-01) * s0_0_1;
	r1 += V4(1.957e-01, -1.632e+00, -2.422e-01, -6.737e-03) * s0_0_1;
	r2 += V4(-2.076e-01, 1.587e-01, 3.115e-01, -1.677e-02) * s0_0_1;
	r3 += V4(-2.388e-02, -1.212e-02, 3.838e-01, 3.949e-03) * s0_0_1;
	r4 += V4(-3.459e-04, -3.564e-01, -1.891e-02, 2.423e-02) * s0_0_1;
	r5 += V4(-1.893e-02, 1.333e-01, -2.309e-01, -2.349e-01) * s0_0_1;
	r6 += V4(-2.301e-02, -2.942e-03, 2.703e-02, -4.596e+00) * s0_0_1;
	r7 += V4(-5.476e-02, -8.152e-02, -6.378e-02, 1.354e-02) * s0_0_1;
	r0 += V4(8.070e-02, -6.013e-03, -3.294e-02, -9.448e-02) * s0_0_2;
	r1 += V4(-1.504e-01, 1.531e-01, 2.329e-01, -1.141e-02) * s0_0_2;
	r2 += V4(2.851e-01, 6.568e-02, 5.150e-02, 1.983e-03) * s0_0_2;
	r3 += V4(-5.780e-03, 5.630e-02, -5.310e-02, -1.601e-02) * s0_0_2;
	r4 += V4(4.277e-04, -4.075e-02, -1.456e-01, 1.806e-03) * s0_0_2;
	r5 += V4(1.027e-02, 1.260e-01, -4.042e-02, -2.154e-01) * s0_0_2;
	r6 += V4(8.815e-03, 6.761e-03, -4.454e-02, 5.514e-03) * s0_0_2;
	r7 += V4(1.276e-02, 5.844e-02, -2.478e-02, 1.418e-01) * s0_0_2;
	r0 += V4(9.865e-02, 1.182e-03, -2.481e-02, 9.447e-03) * s0_1_0;
	r1 += V4(-1.093e-01, -6.860e-02, -2.495e-03, -2.803e-01) * s0_1_0;
	r2 += V4(1.042e-01, 2.163e-01, -1.753e-01, 2.659e-01) * s0_1_0;
	r3 += V4(3.169e-01, 4.711e-02, 3.345e-03, 3.604e-01) * s0_1_0;
	r4 += V4(9.975e-03, 2.821e-02, 6.519e-02, -1.243e-01) * s0_1_0;
	r5 += V4(-6.291e-02, 2.253e-01, -2.374e-02, 4.026e-02) * s0_1_0;
	r6 += V4(1.763e-02, 2.254e-01, -1.498e-02, 2.468e-01) * s0_1_0;
	r7 += V4(-1.350e-01, 6.182e-02, -6.888e-02, -1.314e-01) * s0_1_0;
	r0 += V4(8.754e-02, -3.683e-01, 3.916e-01, 9.741e-02) * s0_1_1;
	r1 += V4(-4.845e-02, 2.257e-01, -2.948e-01, 4.366e-01) * s0_1_1;
	r2 += V4(1.965e-01, -1.314e-01, -2.714e-01, -2.574e-01) * s0_1_1;
	r3 += V4(-1.208e-01, 1.979e-01, -3.912e-01, -3.526e-01) * s0_1_1;
	r4 += V4(1.636e-01, 9.933e-02, 1.837e-01, 2.358e-01) * s0_1_1;
	r5 += V4(1.061e-01, -1.977e-01, -7.939e-02, 2.508e-01) * s0_1_1;
	r6 += V4(-7.045e-02, 5.962e-02, 2.510e-01, -1.211e-01) * s0_1_1;
	r7 += V4(3.350e-01, -5.508e-02, -9.953e-02, -3.074e-02) * s0_1_1;
	r0 += V4(-1.666e-02, 1.174e-02, -3.189e-01, -8.323e-02) * s0_1_2;
	r1 += V4(-8.550e-02, -8.851e-02, 3.115e-01, 3.088e-02) * s0_1_2;
	r2 += V4(-2.881e-01, -2.281e-01, -8.760e-02, -2.196e-03) * s0_1_2;
	r3 += V4(3.926e-02, -2.629e-01, 7.733e-02, 1.054e-02) * s0_1_2;
	r4 += V4(-1.731e-02, -2.310e-02, -1.980e-01, -9.790e-02) * s0_1_2;
	r5 += V4(-1.258e-01, -3.797e-02, -1.294e-01, 2.019e-01) * s0_1_2;
	r6 += V4(3.568e-02, -4.664e-03, 1.886e-01, 1.343e-01) * s0_1_2;
	r7 += V4(2.387e-02, 7.706e-03, 7.205e-02, 1.163e-01) * s0_1_2;
	r0 += V4(-8.273e-02, -1.200e-03, 7.915e-03, -1.233e-01) * s0_2_0;
	r1 += V4(1.382e-01, 3.551e-02, -4.424e-04, 6.852e-03) * s0_2_0;
	r2 += V4(-2.779e-02, -1.235e-01, -4.054e-04, -3.057e-01) * s0_2_0;
	r3 += V4(-3.838e-01, 2.016e-01, 4.519e-03, 5.803e-02) * s0_2_0;
	r4 += V4(7.886e-02, -1.234e-02, -7.581e-02, -6.129e-02) * s0_2_0;
	r5 += V4(-3.651e-02, 5.017e-02, 1.400e-02, -5.630e-03) * s0_2_0;
	r6 += V4(1.522e-01, 1.259e-01, -1.952e-01, -3.093e-02) * s0_2_0;
	r7 += V4(-4.515e-03, 6.812e-02, -5.217e-02, 2.879e-01) * s0_2_0;
	r0 += V4(8.154e-02, 3.643e-01, -3.133e-02, -1.556e-01) * s0_2_1;
	r1 += V4(-1.730e-01, -5.321e-03, -9.738e-03, -1.618e-01) * s0_2_1;
	r2 += V4(4.845e-03, -1.401e-02, -2.496e-02, 3.018e-01) * s0_2_1;
	r3 += V4(1.634e-01, -1.332e-01, -1.606e-02, -9.501e-02) * s0_2_1;
	r4 += V4(-5.670e+00, 4.798e-03, 2.326e-01, 2.034e-01) * s0_2_1;
	r5 += V4(-2.177e-02, 4.137e-02, -5.063e-02, -3.335e-03) * s0_2_1;
	r6 += V4(-2.822e-01, -3.640e-01, -2.529e-01, -5.653e-02) * s0_2_1;
	r7 += V4(1.649e-02, 6.947e-03, 1.160e-01, -1.479e-01) * s0_2_1;
	r0 += V4(8.524e-03, -8.399e-03, 2.543e-02, 2.861e-01) * s0_2_2;
	r1 += V4(2.591e-01, 1.889e-02, 9.673e-03, -2.713e-02) * s0_2_2;
	r2 += V4(8.815e-03, 1.626e-01, 2.338e-02, 1.737e-03) * s0_2_2;
	r3 += V4(-2.753e-02, -6.715e-02, 9.612e-03, 9.059e-03) * s0_2_2;
	r4 += V4(4.422e-02, 3.885e-03, -5.530e-02, -1.572e-01) * s0_2_2;
	r5 += V4(-8.063e-02, -8.076e-02, -2.583e-02, 2.330e-03) * s0_2_2;
	r6 += V4(1.532e-01, -3.308e-02, 2.394e-02, -1.970e-02) * s0_2_2;
	r7 += V4(-1.199e-02, 3.775e-02, 1.340e-01, -1.333e-01) * s0_2_2;
	r0 += V4(-1.890e-01, 8.941e-03, 7.641e-03, -1.349e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-2.772e-03, 1.792e-02, 5.082e-03, 2.223e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
	r2 += V4(5.240e-03, 5.971e-04, 5.259e-03, 7.332e-06);
	r2 = max(r2, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r2));
	r3 += V4(-1.856e-02, -2.352e-03, 7.861e-03, 6.430e-03);
	r3 = max(r3, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r3));
	r4 += V4(1.984e-02, -4.193e-04, -8.621e-05, 2.456e-03);
	r4 = max(r4, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), vec4(r4));
	r5 += V4(-1.241e-01, 3.733e-03, 4.797e-02, 4.425e-03);
	r5 = max(r5, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), vec4(r5));
	r6 += V4(5.765e-03, 4.588e-04, -4.464e-04, 1.215e-02);
	r6 = max(r6, V4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), vec4(r6));
	r7 += V4(-1.952e-04, -3.919e-02, 2.152e-02, -3.856e-03);
	r7 = max(r7, V4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), vec4(r7));
}

//!DESC CuNNy-4x32-TEST-conv1
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * in_pt;
			r = in_gather(p, 0);
			g = in_gather(p, 1);
			b = in_gather(p, 2);
			a = in_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02F4F5FC, 0x02071702, 0x2DFBEA08, 0xF6D5FF04);
	r1 = D(r1, s0_0_0, 0xE9011B08, 0x0C150202, 0xFAE0FFFC, 0x090A02FA);
	r2 = D(r2, s0_0_0, 0x0B1C00FB, 0x0408F3FB, 0x0700EFF6, 0x04F908FB);
	r3 = D(r3, s0_0_0, 0xECFDF1FE, 0xEFF7FA02, 0xE7FCEBFE, 0xFDCFFCF7);
	r4 = D(r4, s0_0_0, 0xE105FEFD, 0x0EDBF4F9, 0xDE01F909, 0xFCFF0BFC);
	r5 = D(r5, s0_0_0, 0xFF19FE07, 0xFE1AFEFB, 0xFA1A100D, 0x0CF3E703);
	r6 = D(r6, s0_0_0, 0x03EC0505, 0xECFCFDFC, 0x0202D5FE, 0x25FDE6FB);
	r7 = D(r7, s0_0_0, 0xFA1A0606, 0xFE02FC03, 0xFC17FBF5, 0x1CF7F801);
	r0 = D(r0, s0_0_1, 0xFFF800F9, 0x00F013F8, 0x00EF00F1, 0x0D26CCFB);
	r1 = D(r1, s0_0_1, 0xDE000704, 0x19EB0EFE, 0x074A810B, 0x05F82701);
	r2 = D(r2, s0_0_1, 0x000E0606, 0x00F0F604, 0x1911E806, 0x04091009);
	r3 = D(r3, s0_0_1, 0xFDFF0EFB, 0xF0111705, 0x0805FF02, 0xF0F4D4F6);
	r4 = D(r4, s0_0_1, 0x052007F6, 0xD70B1304, 0x0618EB02, 0xFAE3FFFA);
	r5 = D(r5, s0_0_1, 0x09F62D0F, 0x0E0F270A, 0xE1EA2FDB, 0xFF1CFEF8);
	r6 = D(r6, s0_0_1, 0x081BC10A, 0x111FE8F6, 0xF4F6A6F6, 0x0E06F108);
	r7 = D(r7, s0_0_1, 0x011ABADD, 0xF425E307, 0xF425E301, 0xEA0911F3);
	r0 = D(r0, s0_0_2, 0x02070F02, 0x070703FC, 0x111717F6, 0xECFC4003);
	r1 = D(r1, s0_0_2, 0x04F20E03, 0x050B0806, 0xFF0701FB, 0xF8FE0CFE);
	r2 = D(r2, s0_0_2, 0xF6D112FD, 0x06FE08FD, 0xFAF4FFFF, 0xF60104FB);
	r3 = D(r3, s0_0_2, 0x020AFAFF, 0x0304F009, 0x10FA14FF, 0x113907FA);
	r4 = D(r4, s0_0_2, 0xF4CE280C, 0x02F0070C, 0xF0F514FC, 0x14E5D9FD);
	r5 = D(r5, s0_0_2, 0x00FCDFEF, 0x15EDFA09, 0x4709E9D7, 0xF7ED0800);
	r6 = D(r6, s0_0_2, 0xFC0B27F5, 0xE308FA04, 0xF4F4150A, 0x1DED1CEF);
	r7 = D(r7, s0_0_2, 0x00CF0CF7, 0x0D061204, 0xFCF4FBF2, 0xF0061FFD);
	r0 = D(r0, s0_1_0, 0x0506FA01, 0x21D6F8F8, 0x080FFF09, 0xF5EE2D0E);
	r1 = D(r1, s0_1_0, 0xF0FF06ED, 0xD8F5FC0C, 0x000112FE, 0xFF122907);
	r2 = D(r2, s0_1_0, 0x16DAE9F4, 0xF71EEB07, 0xFC20F0F6, 0x110EF011);
	r3 = D(r3, s0_1_0, 0x0E8115FC, 0xFCFBFE00, 0xFEDFF4F9, 0xF8210320);
	r4 = D(r4, s0_1_0, 0x00F91107, 0x1C250C0F, 0xEFD8EDF3, 0xD718FCF6);
	r5 = D(r5, s0_1_0, 0x0CC8F7F5, 0xF2150A0D, 0xF0000908, 0x0A07EEF7);
	r6 = D(r6, s0_1_0, 0xEDF7ECEC, 0xF8D9FB02, 0xFAF6EEFF, 0x05092109);
	r7 = D(r7, s0_1_0, 0xFEF4F70D, 0xFBEFFEF3, 0xE6DE07FA, 0xFCF8E808);
	r0 = D(r0, s0_1_1, 0xF63B0104, 0xC8FFFB10, 0xFFFF16EF, 0xEDF6D601);
	r1 = D(r1, s0_1_1, 0x151EF907, 0xF8FAAFFC, 0x04D60801, 0x08EEE0F6);
	r2 = D(r2, s0_1_1, 0x05B4FB07, 0xFBDE71FD, 0xF4FE1D0F, 0xF51D1734);
	r3 = D(r3, s0_1_1, 0x052CDA0B, 0xE40C0B05, 0xEB0FF0FC, 0xBA9DFA03);
	r4 = D(r4, s0_1_1, 0xEBE50AFE, 0xFA1619F6, 0xDEF1E802, 0xE1043A13);
	r5 = D(r5, s0_1_1, 0xF208F003, 0xC8DE2608, 0x1210EF0E, 0xED1E9F05);
	r6 = D(r6, s0_1_1, 0x19000310, 0x17D009FF, 0x06FC3EFC, 0x0D13AC09);
	r7 = D(r7, s0_1_1, 0xC0E11CE1, 0x0299E6F8, 0xEA192B11, 0xF715030F);
	r0 = D(r0, s0_1_2, 0xFDF20F05, 0x01F6E3FB, 0xF7160C0D, 0xD8061507);
	r1 = D(r1, s0_1_2, 0x0208F7FC, 0xE5051703, 0xF8061800, 0x03F8E903);
	r2 = D(r2, s0_1_2, 0x08142EFE, 0x0E06E4F8, 0xD90021ED, 0x0EFEFA14);
	r3 = D(r3, s0_1_2, 0xF6141101, 0xFBF302FE, 0xF1043203, 0xFB090EF7);
	r4 = D(r4, s0_1_2, 0xFB1003FC, 0x1204DE06, 0xFB1C0DF9, 0x1CE9D7F2);
	r5 = D(r5, s0_1_2, 0x1000F8FE, 0x170B0514, 0xFCD9E90E, 0x12E73B00);
	r6 = D(r6, s0_1_2, 0x00070304, 0x2602ED05, 0xF40EFA00, 0xFDF83104);
	r7 = D(r7, s0_1_2, 0x1602EFE8, 0x1CF4E5F8, 0xFD1DC209, 0xF5050C05);
	r0 = D(r0, s0_2_0, 0x03FFFBFF, 0x03190B08, 0x04EEFF01, 0x1404EEFC);
	r1 = D(r1, s0_2_0, 0x1CF7EA06, 0x02EEE101, 0xFE040604, 0xF9F8F806);
	r2 = D(r2, s0_2_0, 0x151F02FC, 0xFCE0F7F9, 0xD4EAE513, 0xEFD6001D);
	r3 = D(r3, s0_2_0, 0x07010301, 0x08FB0EFA, 0xF81FF009, 0xE2E61BF0);
	r4 = D(r4, s0_2_0, 0xF10D020A, 0xF9FE0B09, 0x032DFB0B, 0xF21FF7F6);
	r5 = D(r5, s0_2_0, 0x01130DF8, 0x1906F0F1, 0xFB0B001F, 0xEDE5F405);
	r6 = D(r6, s0_2_0, 0x030A0D02, 0xF11B00FB, 0xE0F5F209, 0x00051FF9);
	r7 = D(r7, s0_2_0, 0x1B0620F5, 0xF5EB0D10, 0x06DD0F04, 0x04EB01FF);
	r0 = D(r0, s0_2_1, 0x06D80203, 0x3B19FB02, 0xF81FFFE8, 0xFBFEE9FA);
	r1 = D(r1, s0_2_1, 0x26F8FCFD, 0x19FF10F2, 0x04FBF7FE, 0xFEFAF5F6);
	r2 = D(r2, s0_2_1, 0x18220B18, 0x0C26F80B, 0xFBF7010A, 0xFD020020);
	r3 = D(r3, s0_2_1, 0x09000606, 0x2A24F4EF, 0xFD06FD02, 0xFD510718);
	r4 = D(r4, s0_2_1, 0x0914E909, 0xF1F8FCEA, 0x04DD02FE, 0x00040218);
	r5 = D(r5, s0_2_1, 0x14180F07, 0xF5140EF7, 0x1C02FEFE, 0xF7F3ED0E);
	r6 = D(r6, s0_2_1, 0xF9C80DF9, 0xF71C0F02, 0x000EF509, 0xF0EDCDFF);
	r7 = D(r7, s0_2_1, 0x120DF4BE, 0xF224F5FD, 0x24181501, 0x03FF0DFF);
	r0 = D(r0, s0_2_2, 0xFE0201FB, 0x08EEF500, 0x020B0207, 0xE911F1F7);
	r1 = D(r1, s0_2_2, 0x0DEE0C05, 0x10040307, 0x04F70A02, 0xFFFFF908);
	r2 = D(r2, s0_2_2, 0x19090DFF, 0x04090109, 0x08E414F9, 0xFD07022B);
	r3 = D(r3, s0_2_2, 0x0207FFFC, 0x16F70EFD, 0x001BFDFC, 0xF7060207);
	r4 = D(r4, s0_2_2, 0xFEF5EEF2, 0xFAFBE8FE, 0x00ED0D0A, 0xF8E5FD0A);
	r5 = D(r5, s0_2_2, 0x0F060408, 0xF21FE3EF, 0xFAEEF9D0, 0x0218FA02);
	r6 = D(r6, s0_2_2, 0x09EDF801, 0x0B0F1503, 0x10F50104, 0xFB061E05);
	r7 = D(r7, s0_2_2, 0x02DAFEC3, 0xFB14160E, 0xF5DE0608, 0x0805F101);
	r0 = D(r0, s1_0_0, 0x10F902FC, 0xED080CFC, 0xD8DF08F8, 0xD8F30034);
	r1 = D(r1, s1_0_0, 0x24FD0A27, 0xF6091C00, 0x0BF8FA03, 0x03090B15);
	r2 = D(r2, s1_0_0, 0xF1FD021B, 0xFD05020B, 0xF4001A15, 0xFBFE0601);
	r3 = D(r3, s1_0_0, 0x0DF706FB, 0xDAFC0E12, 0x0BFDFAFB, 0xF1C30C14);
	r4 = D(r4, s1_0_0, 0xFD18F107, 0xF8080D1E, 0x0016121F, 0x0C0EFEFB);
	r5 = D(r5, s1_0_0, 0x0D0CF100, 0xEDF8111B, 0xF11C1C23, 0xECF5FB05);
	r6 = D(r6, s1_0_0, 0xF6E30DCC, 0x14FDF721, 0x1102050D, 0x01FD1903);
	r7 = D(r7, s1_0_0, 0x0906030C, 0x1FF509FC, 0x1200EC21, 0x17E40C14);
	r0 = D(r0, s1_0_1, 0xFF000808, 0x18070008, 0x15FBF9F2, 0x38FC06DC);
	r1 = D(r1, s1_0_1, 0xF3F20019, 0xE30713FB, 0x4B050004, 0xDC0EFB12);
	r2 = D(r2, s1_0_1, 0x17EA00FC, 0xFA01060A, 0xE8F0060F, 0xFD07F4F9);
	r3 = D(r3, s1_0_1, 0xDEFBFF06, 0x21F9FB17, 0xD306042C, 0x0F0229AF);
	r4 = D(r4, s1_0_1, 0x0FF8E7E7, 0xFA20F40C, 0x1CFD1EEC, 0x2314070D);
	r5 = D(r5, s1_0_1, 0xEEFBFEDE, 0x041C09D1, 0x40221232, 0xD80109F7);
	r6 = D(r6, s1_0_1, 0x0DF2E8EF, 0x30F81AE5, 0xFDF9E7EA, 0x02161BDF);
	r7 = D(r7, s1_0_1, 0x20F5F4F8, 0xE908F4F4, 0xE3ED15DA, 0x11CBF516);
	r0 = D(r0, s1_0_2, 0xECFFF602, 0x0FEA12FC, 0x1EF11CED, 0xF9F9100C);
	r1 = D(r1, s1_0_2, 0x17FEF7F6, 0x2400F81B, 0xEEFDFB03, 0xFBFE0E0C);
	r2 = D(r2, s1_0_2, 0xFC0AF920, 0x03020100, 0x030F090A, 0x02FE0F0A);
	r3 = D(r3, s1_0_2, 0x08FE03F9, 0x07E6FDE9, 0x06FBFF04, 0x07FB00C8);
	r4 = D(r4, s1_0_2, 0xE7140F11, 0x12050109, 0xDC10F205, 0xE30516F8);
	r5 = D(r5, s1_0_2, 0xF3FFF504, 0xFAF21EE2, 0xEEEB170F, 0xCB19E61E);
	r6 = D(r6, s1_0_2, 0xFAF2FFFA, 0xE4E8FDF2, 0xF3F5EE14, 0xF905FDEF);
	r7 = D(r7, s1_0_2, 0x0700F405, 0xEB0DEE02, 0xB8F0DC0B, 0xB40CFE09);
	r0 = D(r0, s1_1_0, 0xFC00FDFB, 0x1C1E1D46, 0x24EC1508, 0x0A1AF82F);
	r1 = D(r1, s1_1_0, 0xFE26F600, 0x16CB250E, 0x00FF0200, 0xEB46FB07);
	r2 = D(r2, s1_1_0, 0x15EBFCD7, 0xEC0AFAF2, 0xE7FFF2E8, 0x0314100E);
	r3 = D(r3, s1_1_0, 0xF459EA0C, 0xD8FBDCF7, 0xED27F212, 0x1BAF1014);
	r4 = D(r4, s1_1_0, 0xDF0E2302, 0xFB1F0E01, 0xEAD7FA0E, 0xF4CEF8FD);
	r5 = D(r5, s1_1_0, 0x10FB1402, 0x040BFFF7, 0xF316CF13, 0xDCFDE341);
	r6 = D(r6, s1_1_0, 0xFEFAF0EE, 0xFEF4EAEE, 0x0218DBFB, 0x0B1DD82E);
	r7 = D(r7, s1_1_0, 0x07DB060C, 0x0829FF13, 0x120DF6E8, 0x1F10F0FD);
	r0 = D(r0, s1_1_1, 0xFA2AFDFC, 0x082CFA26, 0x0416F219, 0xE511E6F1);
	r1 = D(r1, s1_1_1, 0xF41F0D19, 0xBDF1FC0C, 0xD601E5FF, 0x2FFC160D);
	r2 = D(r2, s1_1_1, 0xED100209, 0xB9F7FD0B, 0x2DF3C2CD, 0x1B08FFFE);
	r3 = D(r3, s1_1_1, 0x22EE1F00, 0x1F0B11F3, 0x0D0AED31, 0xCFEDE715);
	r4 = D(r4, s1_1_1, 0xF1332BE7, 0xFACEF5D9, 0x1ACCFEF3, 0x0109FA19);
	r5 = D(r5, s1_1_1, 0x4B8F241A, 0xF107FED3, 0xFA146210, 0x07F7F41B);
	r6 = D(r6, s1_1_1, 0x1F260203, 0x0B0F07EF, 0x08171A22, 0xE4F003ED);
	r7 = D(r7, s1_1_1, 0x0C0B28F4, 0xF104F812, 0x0F06E50A, 0x05D2000C);
	r0 = D(r0, s1_1_2, 0xFA00040E, 0xEF350602, 0x1507E6F8, 0xED041125);
	r1 = D(r1, s1_1_2, 0x0E002E0C, 0x100C0A1D, 0xFEFF1208, 0xFD001702);
	r2 = D(r2, s1_1_2, 0xEC031AEC, 0x160900FC, 0x11EFF705, 0x00060700);
	r3 = D(r3, s1_1_2, 0xF4FE030A, 0xF0FAE605, 0x41080B18, 0xFF0A08F3);
	r4 = D(r4, s1_1_2, 0x1F0F1804, 0xB212F60A, 0x13F30F2A, 0x1602F7E3);
	r5 = D(r5, s1_1_2, 0x81F1F506, 0xF9F5060A, 0x260D5A13, 0xFE090D1F);
	r6 = D(r6, s1_1_2, 0x1605CB0B, 0x14FF08F8, 0xEBFFED22, 0x1F04F601);
	r7 = D(r7, s1_1_2, 0xF6F5310D, 0xD5FC000A, 0x0703A910, 0xF9111906);
	r0 = D(r0, s1_2_0, 0x08000300, 0x150F163A, 0xF71FFC11, 0x0415F735);
	r1 = D(r1, s1_2_0, 0xFB18250E, 0x181D01D9, 0xFB050004, 0x060F2506);
	r2 = D(r2, s1_2_0, 0x00A5FEFE, 0x0603FD06, 0x0AF216ED, 0x04FEF604);
	r3 = D(r3, s1_2_0, 0xF3292BFD, 0x04F51502, 0xFE0FEFFE, 0x1FE0E923);
	r4 = D(r4, s1_2_0, 0x07CBFD02, 0x01EA0314, 0xF813ED00, 0x02BEE818);
	r5 = D(r5, s1_2_0, 0xFC05F301, 0xE11B38F2, 0xFC03F8E7, 0x191AE626);
	r6 = D(r6, s1_2_0, 0xED240C13, 0xE6FCEF0A, 0xE91F1C08, 0x0001F80F);
	r7 = D(r7, s1_2_0, 0x06B1120B, 0xFC02F613, 0x0EE40F04, 0x0600E50E);
	r0 = D(r0, s1_2_1, 0x0BFF2803, 0xEBBC00F9, 0xF0154D1A, 0xF22508F4);
	r1 = D(r1, s1_2_1, 0xE716EDF7, 0xD7F5F2E9, 0xF90C05F9, 0xFEFB0E15);
	r2 = D(r2, s1_2_1, 0x2B0DDE09, 0x29F5ED12, 0x04092F04, 0x0A091F0C);
	r3 = D(r3, s1_2_1, 0xF0F7ECFD, 0x17F9E5F9, 0xFA160715, 0x210908EC);
	r4 = D(r4, s1_2_1, 0x08A20400, 0x0BB3FDFB, 0xD30FF4ED, 0xF3C317EF);
	r5 = D(r5, s1_2_1, 0xFC9FE4F3, 0xF4F54318, 0xDE08FA39, 0x1430E615);
	r6 = D(r6, s1_2_1, 0x0A070CF8, 0xE31216EF, 0xE016EF14, 0xF2E6D8B8);
	r7 = D(r7, s1_2_1, 0x080D7FF8, 0x0EE2F9EB, 0x0329F6DC, 0x06FDEA07);
	r0 = D(r0, s1_2_2, 0xFA040806, 0xF8DE17F4, 0xF6121806, 0x0B04FC16);
	r1 = D(r1, s1_2_2, 0x00EAE1F9, 0xDD1EDCEF, 0xF00200FF, 0xFB01F604);
	r2 = D(r2, s1_2_2, 0x00F201DF, 0xFD01F404, 0x08131FF6, 0xFE020305);
	r3 = D(r3, s1_2_2, 0x0C04FC01, 0xEA11C9EE, 0x01F1020B, 0xDB06161D);
	r4 = D(r4, s1_2_2, 0x0CE20BEB, 0x10092006, 0xF8EFB3F8, 0x1EE2FAE9);
	r5 = D(r5, s1_2_2, 0xFEF526E2, 0x12DCF8EA, 0x0D050118, 0x1002EF18);
	r6 = D(r6, s1_2_2, 0x0A120202, 0xFCEFF8FF, 0xFC183006, 0xEAE00A21);
	r7 = D(r7, s1_2_2, 0xF4F722E8, 0xEBE1F60C, 0xFEFDF1FC, 0xF71004FF);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02020A03, 0x281A0400, 0xD9F5F60D, 0x14D21415);
	r1 = D(r1, s0_0_0, 0x2113FF10, 0x05FDEC17, 0xED01F8F4, 0x020305F4);
	r2 = D(r2, s0_0_0, 0x2A150601, 0x0805FCF9, 0xDC150C02, 0xFF06FDF5);
	r3 = D(r3, s0_0_0, 0xFE0901FB, 0x310AEDFE, 0x29FB10F6, 0x0A0B19CD);
	r4 = D(r4, s0_0_0, 0x0C1017EE, 0xFE00FBE2, 0x09F9F334, 0x020C0414);
	r5 = D(r5, s0_0_0, 0x0DF5F801, 0xF4F7D3F2, 0xF7F2F1EC, 0xFA0E090B);
	r6 = D(r6, s0_0_0, 0x030D12E5, 0x12F425FB, 0x170E09F7, 0xF10FF72C);
	r7 = D(r7, s0_0_0, 0xE802FCF6, 0xF90A0C1A, 0x13FF05CB, 0xF909F5E3);
	r0 = D(r0, s0_0_1, 0x02F904FB, 0x31E50AF3, 0x051AE60F, 0xBDE8D3F0);
	r1 = D(r1, s0_0_1, 0x00FA1408, 0xCCF418F8, 0xC4EF0FFD, 0x1309F7F6);
	r2 = D(r2, s0_0_1, 0x02FA0F07, 0xE2F8F201, 0x2414E50B, 0x1AFE0802);
	r3 = D(r3, s0_0_1, 0x19FC0E0A, 0x3D0A1819, 0x17F6F5E5, 0x90D3E5F8);
	r4 = D(r4, s0_0_1, 0x1FF921F4, 0xD3191302, 0x0DF90201, 0x02F80F02);
	r5 = D(r5, s0_0_1, 0xE4FD0A0D, 0xBB0725EF, 0x2420152A, 0xE3F7EEE9);
	r6 = D(r6, s0_0_1, 0xC1150310, 0xF7080908, 0xF1FF09EA, 0xE214DAFE);
	r7 = D(r7, s0_0_1, 0xD4131304, 0xD6F8F509, 0xDAE5D9FA, 0x95102414);
	r0 = D(r0, s0_0_2, 0xF7FB05FF, 0x34D911EA, 0x13FFF7FA, 0xFD19FB06);
	r1 = D(r1, s0_0_2, 0xF4F5130F, 0x1A02311B, 0x34FF070A, 0xFE06F2FF);
	r2 = D(r2, s0_0_2, 0xD4E31E09, 0xED05FA03, 0x2BF5F7FA, 0x160705FE);
	r3 = D(r3, s0_0_2, 0xE3FC0102, 0x2E0011F8, 0x02021DED, 0x3519271B);
	r4 = D(r4, s0_0_2, 0xC80BF2FA, 0xF2FEF70B, 0x21FF28F7, 0xFB0AF7EC);
	r5 = D(r5, s0_0_2, 0xE5F7FC07, 0xE0EED702, 0x14E910F8, 0x060CEDFC);
	r6 = D(r6, s0_0_2, 0xFC0EFA1A, 0x09FFE7F6, 0xC8FDEB08, 0x1AFD0605);
	r7 = D(r7, s0_0_2, 0x2D06070C, 0xCDF6F41C, 0xA92EECFF, 0x0C08F80E);
	r0 = D(r0, s0_1_0, 0x030CFCFE, 0x06DFEC0B, 0x0DED141D, 0x1BE8EE11);
	r1 = D(r1, s0_1_0, 0x0EF0F6FD, 0xF7E1D8EB, 0xFBF9F914, 0x06FB030A);
	r2 = D(r2, s0_1_0, 0xFD01FB10, 0x060A0606, 0x313D2418, 0x0CF30209);
	r3 = D(r3, s0_1_0, 0xFA1B1CCF, 0xEF19FBF8, 0x0403F904, 0x32080D1D);
	r4 = D(r4, s0_1_0, 0xFC13F80C, 0x19EC03FF, 0xC522E716, 0xFBE3E2F2);
	r5 = D(r5, s0_1_0, 0xF3FF1A22, 0xDCF8100B, 0xC6DAD410, 0x0EEBDA02);
	r6 = D(r6, s0_1_0, 0xED0B17F4, 0x17020915, 0x2DFC1A28, 0xF7F7F7F4);
	r7 = D(r7, s0_1_0, 0x010CE6F8, 0xFF13F8E9, 0x050DF8E5, 0xFB17100B);
	r0 = D(r0, s0_1_1, 0xFF0CED27, 0xC68127FD, 0x26021100, 0x0816FAF2);
	r1 = D(r1, s0_1_1, 0xEA0B00E3, 0x8135E303, 0xFE73EEF3, 0x13140EFC);
	r2 = D(r2, s0_1_1, 0x0C27FE13, 0x4FEFFDFC, 0x0419EF02, 0x1E10FF0D);
	r3 = D(r3, s0_1_1, 0xF502DD09, 0xF2D12D01, 0x1081BE0F, 0x0AEB0412);
	r4 = D(r4, s0_1_1, 0x0AEE2C1D, 0x4217F1FA, 0xA0131081, 0x51DD0B1F);
	r5 = D(r5, s0_1_1, 0xE6082802, 0xE3320819, 0xFACE2B21, 0x22D0EE02);
	r6 = D(r6, s0_1_1, 0xE9030EEA, 0x3D070216, 0xB7FEEFDE, 0xBF2812FE);
	r7 = D(r7, s0_1_1, 0x37224325, 0xF2F331D4, 0xF70207D6, 0xDB120BF5);
	r0 = D(r0, s0_1_2, 0x2BE80D00, 0xCC28F7FD, 0x2C0BFE12, 0x1B180104);
	r1 = D(r1, s0_1_2, 0xEBF60602, 0x06091825, 0xF5200301, 0x050EFFFF);
	r2 = D(r2, s0_1_2, 0x0115F90E, 0xE103FD04, 0x0801FCF3, 0x02FE0A08);
	r3 = D(r3, s0_1_2, 0xFBFE0EFC, 0xDBE6F3FE, 0x06E716FF, 0x32000C40);
	r4 = D(r4, s0_1_2, 0x4BFDF602, 0x00E41904, 0xE1EA0510, 0x070A02F4);
	r5 = D(r5, s0_1_2, 0x19FFEAED, 0x2E0FFE07, 0xF31D4EFE, 0xF6A00FE9);
	r6 = D(r6, s0_1_2, 0x1D040D1E, 0x1118F0DA, 0xE8FAD3FD, 0x06F90109);
	r7 = D(r7, s0_1_2, 0x15FC02F5, 0xE516F2E8, 0x221AF2F1, 0x0C0D17FF);
	r0 = D(r0, s0_2_0, 0xFCF901F3, 0x2CFEF722, 0x06E4F311, 0x06A7D803);
	r1 = D(r1, s0_2_0, 0x05F8E707, 0x000FE6CE, 0x03FDFFFB, 0xFE0F0304);
	r2 = D(r2, s0_2_0, 0x0B0FF303, 0x00FFF5D9, 0x23110FE0, 0xFBFD0805);
	r3 = D(r3, s0_2_0, 0x080AF90B, 0x00F80002, 0x04050B0E, 0x0B06FB1E);
	r4 = D(r4, s0_2_0, 0x08100127, 0x07F00CF9, 0xF5FBD118, 0xE9CAE3C9);
	r5 = D(r5, s0_2_0, 0x15FBF301, 0x100110FF, 0xFE0C13F1, 0xFE11FC0C);
	r6 = D(r6, s0_2_0, 0x11E1FCEA, 0xEDFA1108, 0x11FE000F, 0xF514E2FD);
	r7 = D(r7, s0_2_0, 0xFAEB2EDC, 0x0B07F80B, 0x06FB0C0F, 0x1709F306);
	r0 = D(r0, s0_2_1, 0xF6F905F1, 0x11FBF72B, 0x0E0E0BF6, 0x17F5F8EE);
	r1 = D(r1, s0_2_1, 0xE90501EB, 0xE0C7E6B8, 0x020306E9, 0x0F020EFB);
	r2 = D(r2, s0_2_1, 0x16EEF91B, 0x0082F82F, 0xFBFDF6F6, 0x02020AF8);
	r3 = D(r3, s0_2_1, 0xF8F50703, 0xE5E7040B, 0x15F1EE16, 0xF7F513E1);
	r4 = D(r4, s0_2_1, 0x101F01ED, 0x141DE5ED, 0xC9EFF60B, 0xFF81F538);
	r5 = D(r5, s0_2_1, 0x1DFAFB0E, 0xEFD91ED7, 0x131409EE, 0x06241802);
	r6 = D(r6, s0_2_1, 0x1A2E06F9, 0x03FB1A0B, 0x00D101F4, 0xFF1AF1F3);
	r7 = D(r7, s0_2_1, 0x01CDF82A, 0x1CF4FBF0, 0xF4F7101B, 0x12F401FC);
	r0 = D(r0, s0_2_2, 0xFEFE0DF8, 0xD61BF6FC, 0xF1F5EB0A, 0x0AF1F8FD);
	r1 = D(r1, s0_2_2, 0xD705FD04, 0xDFCD1C2A, 0x040701FA, 0x04020600);
	r2 = D(r2, s0_2_2, 0xFB0917EF, 0xFFCA0305, 0xCEF0FC06, 0xEF000A00);
	r3 = D(r3, s0_2_2, 0xF806FD00, 0xD00BFAF6, 0x0EECF809, 0xE8E01AF7);
	r4 = D(r4, s0_2_2, 0xFCF82100, 0x050D1413, 0x060CFD0D, 0x0CE50103);
	r5 = D(r5, s0_2_2, 0x0F39FCE9, 0x1A0D2228, 0xF0030EE8, 0x06F6E9F1);
	r6 = D(r6, s0_2_2, 0x1F0916FF, 0x09FFFBFF, 0xECF007FA, 0x1AB8F517);
	r7 = D(r7, s0_2_2, 0x09F216EC, 0x0B1616F9, 0xFDF91817, 0xFEF40511);
	r0 = D(r0, s1_0_0, 0x00010700, 0x11F736DC, 0x0AF5EC08, 0x110900E2);
	r1 = D(r1, s1_0_0, 0x0304FA0E, 0xFB1CFA22, 0xFBFA071B, 0xF4EE04FB);
	r2 = D(r2, s1_0_0, 0xF4F107D7, 0xF9FB0603, 0xF9E8D2D2, 0x00FDE904);
	r3 = D(r3, s1_0_0, 0x230400FC, 0x17F303E7, 0xEF0DF801, 0xFFF7EEEF);
	r4 = D(r4, s1_0_0, 0xFEF00FFB, 0x02010106, 0x36F5ECEF, 0xECFA0804);
	r5 = D(r5, s1_0_0, 0xFA1B040C, 0x19EFBAEA, 0x0BFFE518, 0xE2FA1F0F);
	r6 = D(r6, s1_0_0, 0x01DF2B09, 0xE7FC0DF2, 0x0DD716FD, 0xF6EA0AF8);
	r7 = D(r7, s1_0_0, 0x0401FF11, 0x0A040704, 0xFA0A141A, 0x18FE0A1B);
	r0 = D(r0, s1_0_1, 0xFEFBFCFE, 0xC00D231B, 0xED090029, 0xF609F37F);
	r1 = D(r1, s1_0_1, 0xFEF4F30F, 0x0522B4E3, 0x11F5FA3E, 0xDCFC1223);
	r2 = D(r2, s1_0_1, 0xFC1B1A07, 0x0C0E0503, 0x17F8F6E4, 0x12FAFC00);
	r3 = D(r3, s1_0_1, 0xE0FCE4E7, 0x1F0D02D1, 0x26F31302, 0x1F12CE3F);
	r4 = D(r4, s1_0_1, 0xD90B27FD, 0xF6EEEC0C, 0x0303F7C5, 0x05F10D03);
	r5 = D(r5, s1_0_1, 0xD2141A20, 0xDAB216DB, 0x1C00E8F6, 0x02EA0A3D);
	r6 = D(r6, s1_0_1, 0x161ED92A, 0xF4E9DDEC, 0xE50E22FA, 0xDCF71400);
	r7 = D(r7, s1_0_1, 0x1CFCF10E, 0x170B230E, 0x36EBC9E7, 0x27D70A10);
	r0 = D(r0, s1_0_2, 0x1B0DFC12, 0x111A2D03, 0xD5F7FD1D, 0x111108ED);
	r1 = D(r1, s1_0_2, 0x190BF40E, 0x1B0204D5, 0xFB04FEB8, 0x10F609F1);
	r2 = D(r2, s1_0_2, 0xFF180A00, 0x00FF04FF, 0xDA120BF3, 0xFD01F81F);
	r3 = D(r3, s1_0_2, 0xF702F205, 0xC7F3E8FE, 0xBF0D080F, 0x0DF3AAF3);
	r4 = D(r4, s1_0_2, 0xDEE72208, 0x17EC0ECB, 0x14F9E701, 0xFAFD03EA);
	r5 = D(r5, s1_0_2, 0xE90A0815, 0x20192025, 0x2DE009F8, 0xF1F10714);
	r6 = D(r6, s1_0_2, 0xE5F2EDF1, 0xE21A1B02, 0xF006FC06, 0xFBFF1209);
	r7 = D(r7, s1_0_2, 0xDC070EE0, 0xC71AFB0B, 0x0FFAFCEC, 0x12EEE909);
	r0 = D(r0, s1_1_0, 0x04000602, 0xED0C2D07, 0x120805E6, 0xF1D71902);
	r1 = D(r1, s1_1_0, 0x04F5FC06, 0x2D11C80D, 0xF8E3F600, 0xFE1AFCF1);
	r2 = D(r2, s1_1_0, 0xE2E714EC, 0x060C0A02, 0x170000EA, 0x05FA09F6);
	r3 = D(r3, s1_1_0, 0xF420FDFC, 0x0025140F, 0xFF30F418, 0xF601E9F3);
	r4 = D(r4, s1_1_0, 0x1C3525F4, 0xFF24F3DB, 0xFF004220, 0x0717F60B);
	r5 = D(r5, s1_1_0, 0x04F50114, 0x1FF5F2E2, 0x2807D722, 0x162E14FD);
	r6 = D(r6, s1_1_0, 0xF2F2131D, 0xFEFC1015, 0xF713F40D, 0x010F04F2);
	r7 = D(r7, s1_1_0, 0xF115FE06, 0xFCFAFF09, 0xFE1C380B, 0xEA161104);
	r0 = D(r0, s1_1_1, 0xF7E20103, 0xC2C0131A, 0x3A2FFC12, 0x1726F65D);
	r1 = D(r1, s1_1_1, 0x0E3200EE, 0x81C9F552, 0x1C5E0002, 0x00FB0AE3);
	r2 = D(r2, s1_1_1, 0xCEF918E1, 0x0B1BF4EC, 0x0410E3FB, 0x1A21F9FE);
	r3 = D(r3, s1_1_1, 0x81FDF1F4, 0xFCEFEEE8, 0xF7C1E104, 0x051E2BEE);
	r4 = D(r4, s1_1_1, 0x14FCE0F5, 0x0A15DFF8, 0xB0153C31, 0x111804F9);
	r5 = D(r5, s1_1_1, 0xD2F9E607, 0x1C1CE518, 0x11020533, 0x1E191905);
	r6 = D(r6, s1_1_1, 0x1E142025, 0xFD22E413, 0x24170918, 0xFFF5C112);
	r7 = D(r7, s1_1_1, 0x1129EFF5, 0xF9F00C01, 0xFB08E7F8, 0xDAFE1E05);
	r0 = D(r0, s1_1_2, 0x60FB0D13, 0xF51CFD1C, 0x12F8E8EE, 0x290416E6);
	r1 = D(r1, s1_1_2, 0xE4F6021B, 0x04E3FA54, 0xF4F40E19, 0xF804F909);
	r2 = D(r2, s1_1_2, 0xE3FE1317, 0xFD0A0243, 0x01FFFF1A, 0x0DEB05F3);
	r3 = D(r3, s1_1_2, 0xFFF3F5FD, 0xBEE61113, 0xF6042001, 0x4715E91F);
	r4 = D(r4, s1_1_2, 0x21CBF0D0, 0x24EA0910, 0xD6D20313, 0xEA13E207);
	r5 = D(r5, s1_1_2, 0xF7140511, 0xE60DFF12, 0xB3EA21CE, 0x0AC92827);
	r6 = D(r6, s1_1_2, 0xFF2DFDDC, 0x81D712E5, 0xF2E1090A, 0x281708CE);
	r7 = D(r7, s1_1_2, 0x21FEF204, 0x81EC091E, 0xEAF2F7F3, 0x1BF82404);
	r0 = D(r0, s1_2_0, 0xF7080B03, 0x00EDF7F7, 0xF50602F5, 0xF3B2FA09);
	r1 = D(r1, s1_2_0, 0x0D0503F6, 0xE5C40004, 0x05FE0302, 0x0CF0F402);
	r2 = D(r2, s1_2_0, 0x06DFF6F6, 0x05F2FD04, 0x13420EFA, 0xFB040500);
	r3 = D(r3, s1_2_0, 0x06EEF7F5, 0xF00CFE05, 0x10040201, 0xE729261E);
	r4 = D(r4, s1_2_0, 0xF4D6FDFD, 0xE6FC02FB, 0x01F5D4F8, 0x06EE100C);
	r5 = D(r5, s1_2_0, 0x11EFF7FE, 0xF6FFBFC6, 0x180301F8, 0xE10F120E);
	r6 = D(r6, s1_2_0, 0xFA0BF9F7, 0x0E01171C, 0x170AE9F4, 0xEFB4E706);
	r7 = D(r7, s1_2_0, 0xDD031005, 0x0DF804FC, 0xE80D2003, 0xF31607FD);
	r0 = D(r0, s1_2_1, 0x03FEF605, 0x0DF1E9FB, 0xF8D4F2F2, 0x0309161B);
	r1 = D(r1, s1_2_1, 0x08EB27F2, 0x22E0191A, 0x06F207FF, 0x0C18FAF4);
	r2 = D(r2, s1_2_1, 0xE5E616E3, 0xED8901FB, 0x34FC2832, 0x18100000);
	r3 = D(r3, s1_2_1, 0xEE0BF703, 0xECF806EA, 0xFF0DE7FF, 0xDEFCFF0D);
	r4 = D(r4, s1_2_1, 0x09F41D0B, 0xF5F9FA0D, 0xDEF7F1F2, 0xC6C5F8F1);
	r5 = D(r5, s1_2_1, 0xE41903EA, 0xFF10E503, 0x031F0C04, 0x1335320E);
	r6 = D(r6, s1_2_1, 0xFCF80F0F, 0xF821E60B, 0x04CCEBF2, 0x2028E603);
	r7 = D(r7, s1_2_1, 0xEEC0F0FC, 0xECCCFFEE, 0xE2E0DEEB, 0x0C0A1108);
	r0 = D(r0, s1_2_2, 0x022004F6, 0x0CFEFB15, 0x12E1EAFE, 0x000FF914);
	r1 = D(r1, s1_2_2, 0x04F30718, 0x1E3A031E, 0x04FD0402, 0x1D06FCFE);
	r2 = D(r2, s1_2_2, 0xDC281505, 0xF1F807F5, 0x00E52322, 0xFE01FE0C);
	r3 = D(r3, s1_2_2, 0x0EF402FC, 0xD3D804FF, 0x07140804, 0xE3E7FD0D);
	r4 = D(r4, s1_2_2, 0xE5131307, 0xFED7FE02, 0xF927FFE7, 0x282FFC11);
	r5 = D(r5, s1_2_2, 0x08BE0500, 0xF214F4E5, 0xEDF6162E, 0x0CEEFD0E);
	r6 = D(r6, s1_2_2, 0x0CF80800, 0x51FFECF0, 0xF7081C16, 0xECF100E9);
	r7 = D(r7, s1_2_2, 0xD7FC130E, 0xE915F802, 0x02F6EBE8, 0xEEEDF80A);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCF900F1, 0xE4CF06F9, 0xEA0AF411, 0x2D0F1A06);
	r1 = D(r1, s0_0_0, 0xEEF00AF2, 0x08FE17CA, 0xFDF603F9, 0xF90B0120);
	r2 = D(r2, s0_0_0, 0xE6EB0926, 0x090B0109, 0x0A040003, 0x02F9FC31);
	r3 = D(r3, s0_0_0, 0xDFE30515, 0x10E6031F, 0xF0FF14FF, 0x09810395);
	r4 = D(r4, s0_0_0, 0x06F40D0B, 0x05ECFE16, 0xF9EA03FB, 0xF903000F);
	r5 = D(r5, s0_0_0, 0xE609010E, 0xD813FA2A, 0x0CF30A3B, 0xFCF80230);
	r6 = D(r6, s0_0_0, 0xFAFC0103, 0xEC030548, 0x0B1B00F4, 0xE02AEBF8);
	r7 = D(r7, s0_0_0, 0x0AF200FD, 0xD4F80202, 0x0A16FF29, 0xE2D5F0EF);
	r0 = D(r0, s0_0_1, 0x0E0106BE, 0x0DE90DE7, 0x2307F57F, 0xEDFBF3DC);
	r1 = D(r1, s0_0_1, 0x12FBFB39, 0x210B1AFB, 0x27EE0802, 0x0001FBF8);
	r2 = D(r2, s0_0_1, 0xBBDB0D0E, 0xE5FB0205, 0xF0FEF42D, 0x0B0800FE);
	r3 = D(r3, s0_0_1, 0x21010690, 0xAD0D0C19, 0x00160F2D, 0xF1AF08EC);
	r4 = D(r4, s0_0_1, 0xE71707E0, 0xE70DFEBE, 0xF60EFD26, 0xF4130319);
	r5 = D(r5, s0_0_1, 0x1701FA13, 0x04F31C2E, 0xDD15F6DA, 0x08C80EA1);
	r6 = D(r6, s0_0_1, 0x3F0AFEBB, 0x89E4FAFF, 0x12D913FC, 0xFFE6FB0C);
	r7 = D(r7, s0_0_1, 0x08D0127F, 0xD3F00B15, 0xDCF9F9DB, 0x1ED2170C);
	r0 = D(r0, s0_0_2, 0xEC07FC0D, 0xEAE40E5B, 0x0107ED3E, 0xF5071301);
	r1 = D(r1, s0_0_2, 0x200CFF2A, 0x0CF707C4, 0xED0AFBF7, 0x0000FD19);
	r2 = D(r2, s0_0_2, 0x211315C7, 0xFFFFFF01, 0x09F703E8, 0x0705FE1E);
	r3 = D(r3, s0_0_2, 0xFDFEFE16, 0x26F807F0, 0xF50CFBA9, 0xF8FDF70F);
	r4 = D(r4, s0_0_2, 0x0F16175B, 0x09FDF546, 0x080B2281, 0xFE10DE29);
	r5 = D(r5, s0_0_2, 0xF7020A0D, 0x0B01F4D0, 0x0AE0D453, 0x07060B40);
	r6 = D(r6, s0_0_2, 0xEB11F8ED, 0xECF30919, 0xEA0B100F, 0x0B0D0AF2);
	r7 = D(r7, s0_0_2, 0x1315FA0E, 0xEC0BF2BE, 0xE90A0EBD, 0x0EFA0305);
	r0 = D(r0, s0_1_0, 0xFEFEFE0B, 0xD9E101EF, 0x0928211E, 0x0C2411E3);
	r1 = D(r1, s0_1_0, 0xE0DC00F6, 0xBDA0F1F7, 0x0CFE06FA, 0x16E90905);
	r2 = D(r2, s0_1_0, 0xF205063C, 0xF7071026, 0xD6E4095A, 0x0BF40425);
	r3 = D(r3, s0_1_0, 0xE1D7D4D2, 0x0715E810, 0xF8FCFFFD, 0xAA9F1719);
	r4 = D(r4, s0_1_0, 0x070C1017, 0x1916F042, 0xF51BDBE2, 0x080717CC);
	r5 = D(r5, s0_1_0, 0xD513F802, 0x15E0EEF5, 0x0B03102D, 0xF7C21EED);
	r6 = D(r6, s0_1_0, 0x03DFF50A, 0x220712EE, 0x1CFDECF7, 0x001004D4);
	r7 = D(r7, s0_1_0, 0x1DF9F816, 0x0802F413, 0x0F22FED9, 0xE8A2D2F0);
	r0 = D(r0, s0_1_1, 0x01040722, 0xF50DF001, 0x05FBECF6, 0xEA08DF16);
	r1 = D(r1, s0_1_1, 0xFCDC10DA, 0x0B032A06, 0xE9FFC300, 0x0F0408E4);
	r2 = D(r2, s0_1_1, 0xA60019E4, 0x0B16F081, 0x03F7F420, 0x011008F3);
	r3 = D(r3, s0_1_1, 0x29EA1A36, 0xD90601EF, 0x1518D408, 0xFAF78CFA);
	r4 = D(r4, s0_1_1, 0x0402DB0B, 0x0EEB33DF, 0xE5F4F6C3, 0x0200F8A6);
	r5 = D(r5, s0_1_1, 0x16E9F500, 0x2B02E102, 0xF302F751, 0xF7DC101C);
	r6 = D(r6, s0_1_1, 0xFB1AD5E0, 0xD1ECF3F3, 0x0D16FCD1, 0x2B1DFD1C);
	r7 = D(r7, s0_1_1, 0xE9C1E215, 0xFFF2F3DD, 0xE42AC6E0, 0xFDE00622);
	r0 = D(r0, s0_1_2, 0xFFFA19F8, 0x1C1C02F5, 0x0DD71D1C, 0xFDEFFD00);
	r1 = D(r1, s0_1_2, 0xFAF60525, 0xF5F8F539, 0xFFFAFC06, 0xFE09FD15);
	r2 = D(r2, s0_1_2, 0xC509F707, 0xF2F91536, 0x14F014C9, 0xFBFE0920);
	r3 = D(r3, s0_1_2, 0xFEF11B02, 0x26F4FEFF, 0xE7E80812, 0x02F9271F);
	r4 = D(r4, s0_1_2, 0xFCEEFCF6, 0xF1F5E4F9, 0x0CD11D1A, 0x192AEE44);
	r5 = D(r5, s0_1_2, 0xE5FE1AF9, 0x09F4F747, 0x11ECD3FB, 0x1AEEEFB8);
	r6 = D(r6, s0_1_2, 0x16F51D19, 0x07FC0D0E, 0xE51E14F8, 0xFAE1FAEC);
	r7 = D(r7, s0_1_2, 0x2DECCE1D, 0x24001C05, 0x3900190F, 0xF4EAE4FA);
	r0 = D(r0, s0_2_0, 0x0613F705, 0x14DAC9DA, 0x121100D9, 0x12EEEC13);
	r1 = D(r1, s0_2_0, 0xE1FFE801, 0xFE220CEA, 0x05F70A07, 0xFD0003FD);
	r2 = D(r2, s0_2_0, 0x03E71C05, 0x04170FFB, 0xAFF2E312, 0xF609F208);
	r3 = D(r3, s0_2_0, 0xF5F80AFD, 0xE5F2F4DF, 0x06221DEB, 0x1BBE21F5);
	r4 = D(r4, s0_2_0, 0xE9F1D8FB, 0x010904EC, 0xF6F20603, 0xFE150E06);
	r5 = D(r5, s0_2_0, 0x05010903, 0x2E14F03E, 0x0C0D1908, 0x14F2F801);
	r6 = D(r6, s0_2_0, 0x0DF41601, 0x0C09FF08, 0xE2140403, 0x162725D6);
	r7 = D(r7, s0_2_0, 0x18FCED09, 0x04030E02, 0x22FF0BF9, 0xFBD8F1FF);
	r0 = D(r0, s0_2_1, 0x0504F0F4, 0x08E8041F, 0xFFF4FB3A, 0xED1E14E7);
	r1 = D(r1, s0_2_1, 0xF7FE220C, 0xFA17BF17, 0xFCFE06FE, 0xF30110F6);
	r2 = D(r2, s0_2_1, 0x19E9FD10, 0x13040FFD, 0x06001DFE, 0x02FD14ED);
	r3 = D(r3, s0_2_1, 0xF3018EF6, 0x07FEF7F3, 0x04EE0105, 0xF7D412ED);
	r4 = D(r4, s0_2_1, 0x0DE7D919, 0x0EF70DE4, 0xE72AFBE9, 0xFB021FFE);
	r5 = D(r5, s0_2_1, 0x00EAEFFD, 0x1A001323, 0x00261448, 0x0AF4E510);
	r6 = D(r6, s0_2_1, 0xF1F2DDDF, 0x11B01113, 0xFBFAFC0F, 0xEA1DFFE7);
	r7 = D(r7, s0_2_1, 0x10FF0AEA, 0x0A101FFE, 0xFF08F5FB, 0x00F5FBFC);
	r0 = D(r0, s0_2_2, 0x03032C05, 0xF8FE08F2, 0xF7ED2D0F, 0x0DF7EEFC);
	r1 = D(r1, s0_2_2, 0x0903040D, 0x0DFEF221, 0x00FC0202, 0xFA07E4F6);
	r2 = D(r2, s0_2_2, 0x00F0C2F1, 0x0000FB04, 0xFE051813, 0xF902090B);
	r3 = D(r3, s0_2_2, 0x0BFB0005, 0x07F3E811, 0x00F22410, 0xFB19F127);
	r4 = D(r4, s0_2_2, 0x06F6FFEE, 0xF41DFCFB, 0x0621E8F0, 0xED1F15EF);
	r5 = D(r5, s0_2_2, 0x01010BF6, 0xEBD405FD, 0x15F8F330, 0x0AF1E7F8);
	r6 = D(r6, s0_2_2, 0x15F7DCFD, 0xF4FFD017, 0xFDF0FBF7, 0x22001717);
	r7 = D(r7, s0_2_2, 0x1004C30D, 0xFA0781FB, 0x20F3DEEC, 0x15F4130E);
	r0 = D(r0, s1_0_0, 0x00F8FD0F, 0xF9F3CD00, 0xE0BEEEF7, 0x15FDF602);
	r1 = D(r1, s1_0_0, 0xE8020D03, 0x13DA1703, 0xFF030DFB, 0x00020106);
	r2 = D(r2, s1_0_0, 0x0EE510FA, 0xFCFE04F3, 0xFDEB1107, 0x05C50106);
	r3 = D(r3, s1_0_0, 0xF902010E, 0xF321FF0D, 0x01FD09FC, 0x2402FE01);
	r4 = D(r4, s1_0_0, 0x040407FE, 0xF4FEF8F8, 0x19E3ED0B, 0xFFDE06F2);
	r5 = D(r5, s1_0_0, 0x0E1203EE, 0x10A70305, 0xE80D0628, 0xF10603EE);
	r6 = D(r6, s1_0_0, 0x04F904F7, 0x0CFAF6FA, 0xF9FC03EB, 0xF10EFFFD);
	r7 = D(r7, s1_0_0, 0xFFFA0504, 0xF90501F7, 0x091A2106, 0xEAE9150C);
	r0 = D(r0, s1_0_1, 0x01FB03F5, 0x05FAF010, 0x080007F8, 0xD91A1E00);
	r1 = D(r1, s1_0_1, 0x0B2BFA0A, 0xD9C5EE01, 0xF1F3F714, 0xFAF509FA);
	r2 = D(r2, s1_0_1, 0x13F118F8, 0xFCF406F1, 0xEDCF09F6, 0xF9100013);
	r3 = D(r3, s1_0_1, 0x08F8FB00, 0x010EED04, 0x11CE0006, 0xE7E2E3F6);
	r4 = D(r4, s1_0_1, 0xFE1C10FB, 0x090927F1, 0xE9DFF7F9, 0x16E2DFF8);
	r5 = D(r5, s1_0_1, 0x010CFD19, 0xE7E005FC, 0xEFEAF9F2, 0xEC100B04);
	r6 = D(r6, s1_0_1, 0xE70C0F10, 0x01D7FC00, 0x08100407, 0x0507EC0F);
	r7 = D(r7, s1_0_1, 0xFCF418EB, 0xF206FE09, 0x100901F2, 0xFAE61E07);
	r0 = D(r0, s1_0_2, 0xF9020A02, 0xF6FDF7FD, 0xF0F9FDF4, 0x0DF3EC0B);
	r1 = D(r1, s1_0_2, 0x020F0303, 0x14DE040C, 0x0308FE01, 0x0601FFF8);
	r2 = D(r2, s1_0_2, 0x0701030F, 0x000A0000, 0x09E7FF02, 0x00F0FF03);
	r3 = D(r3, s1_0_2, 0x00F50212, 0x01160E0E, 0xF70B0609, 0xE620DFFA);
	r4 = D(r4, s1_0_2, 0x14D60B0C, 0x0F0402FC, 0x001B1202, 0xF2F306F0);
	r5 = D(r5, s1_0_2, 0x04F50905, 0x0DECFF01, 0xFC0FE406, 0xFBFC0300);
	r6 = D(r6, s1_0_2, 0x06E3F905, 0x0704EAFA, 0xF5F30FFA, 0xF801FAF8);
	r7 = D(r7, s1_0_2, 0xFC0AFC11, 0x1111F311, 0xDE07F9F0, 0x07FBEBFE);
	r0 = D(r0, s1_1_0, 0xFB08FA0F, 0x11F1E700, 0xCD4006FC, 0x07E1D702);
	r1 = D(r1, s1_1_0, 0xE2F2F306, 0x1929F403, 0xA7050B04, 0x02F80407);
	r2 = D(r2, s1_1_0, 0x0301EBE0, 0xFCEF010A, 0x071D0D0A, 0xFFF20003);
	r3 = D(r3, s1_1_0, 0xFE0F0102, 0x06DBF20B, 0x02ECEFF7, 0xF229010B);
	r4 = D(r4, s1_1_0, 0xFA040908, 0x05D2F8FB, 0xF4300EFF, 0xFF2D1A08);
	r5 = D(r5, s1_1_0, 0x12DFF4FC, 0xF681EB06, 0xF31421F7, 0xF809000C);
	r6 = D(r6, s1_1_0, 0xE8081A06, 0x0A06E604, 0xF2EB0114, 0x091E1EFE);
	r7 = D(r7, s1_1_0, 0x252A12ED, 0x07F1090C, 0x21FFED03, 0xEE01040F);
	r0 = D(r0, s1_1_1, 0x0911010A, 0x0FC2040E, 0xF61B040B, 0xBFF202F5);
	r1 = D(r1, s1_1_1, 0x0AE3FC07, 0x0C3E350E, 0x81100C00, 0xF80EF601);
	r2 = D(r2, s1_1_1, 0xFF1FF504, 0xFC1008FE, 0xFA3AE7ED, 0x140EF915);
	r3 = D(r3, s1_1_1, 0x0B04F4F7, 0x1E1DD8F0, 0x0A2D0F04, 0xEBEEF7FD);
	r4 = D(r4, s1_1_1, 0xF436E7E6, 0x1409ED00, 0x0CE9FE09, 0x022109F2);
	r5 = D(r5, s1_1_1, 0x1CD80606, 0x0B81FDFC, 0x0503F7E1, 0xE2E4DF05);
	r6 = D(r6, s1_1_1, 0xC9E3010C, 0x05F2F003, 0x0BF10B0A, 0x07FE20FA);
	r7 = D(r7, s1_1_1, 0xFF24F705, 0x030AFEEE, 0x0C21EC10, 0xE608EE11);
	r0 = D(r0, s1_1_2, 0x0D030700, 0xE7EC3308, 0xE805ECEC, 0xFCEBF2F9);
	r1 = D(r1, s1_1_2, 0xFEE4FD02, 0x0546EBFF, 0xFC04F6EF, 0xFBFE0BFC);
	r2 = D(r2, s1_1_2, 0x05EF0D0D, 0xF8F20204, 0x0F26F204, 0xFD12FC00);
	r3 = D(r3, s1_1_2, 0x03090106, 0x169B16FD, 0xF408EAFA, 0x2E02F507);
	r4 = D(r4, s1_1_2, 0x0600D31B, 0x0816F3FD, 0xEE09B2FD, 0xF8FA0FFF);
	r5 = D(r5, s1_1_2, 0xFDEC29FD, 0x0081FE03, 0xEAF3E2FB, 0x0017D20C);
	r6 = D(r6, s1_1_2, 0xF748D50F, 0x1102EDFF, 0xF0E8F902, 0x08140AF8);
	r7 = D(r7, s1_1_2, 0xF721F205, 0xFFFBF2FF, 0xE907020C, 0x2702E9FF);
	r0 = D(r0, s1_2_0, 0x0900FBFA, 0x110FFB07, 0x06DEF002, 0xAF1DEF05);
	r1 = D(r1, s1_2_0, 0xEA11FC0F, 0x81F20301, 0xF6FD080D, 0xF904F916);
	r2 = D(r2, s1_2_0, 0x1E1D0BED, 0x44070108, 0xCEDCE6E9, 0x10BC06FB);
	r3 = D(r3, s1_2_0, 0xFEFD03F9, 0x280C02EE, 0xE601F6FD, 0x2AFF25EB);
	r4 = D(r4, s1_2_0, 0x1F0C030E, 0x1704140D, 0xFF002704, 0x22C1F6FA);
	r5 = D(r5, s1_2_0, 0x0119F012, 0xFCEAFB02, 0xE5EE0804, 0x81FB0708);
	r6 = D(r6, s1_2_0, 0x18F503EF, 0x1F0415FD, 0x04051702, 0xDAD91113);
	r7 = D(r7, s1_2_0, 0x1607F4ED, 0x03030105, 0xF109070B, 0x0919F110);
	r0 = D(r0, s1_2_1, 0x09F6FBFC, 0xCC4613F9, 0x0726F6F0, 0xEF1D27FE);
	r1 = D(r1, s1_2_1, 0xFA180207, 0xDB06B9FA, 0xED08F201, 0x0609090C);
	r2 = D(r2, s1_2_1, 0x0C0E06FF, 0x6105F90E, 0x16D9FB09, 0x01B70209);
	r3 = D(r3, s1_2_1, 0x06F108FF, 0x48C70802, 0xE402F107, 0xE3E44712);
	r4 = D(r4, s1_2_1, 0x18F00701, 0x3DE5F9ED, 0xEB08110C, 0x2408FE01);
	r5 = D(r5, s1_2_1, 0xF423060F, 0x155501F9, 0x11CCF306, 0x810DF9EB);
	r6 = D(r6, s1_2_1, 0xE211FCED, 0xDB0DFB01, 0xFC13020D, 0xFBF4EB01);
	r7 = D(r7, s1_2_1, 0x190CDE14, 0x0BEA190D, 0x22D711FA, 0x1C0D0C0B);
	r0 = D(r0, s1_2_2, 0x02FB0D12, 0xD10625ED, 0xE7D209F1, 0xE7011001);
	r1 = D(r1, s1_2_2, 0xFEE60BF5, 0x00FE09FA, 0xFDEFF7FA, 0xFE07FC02);
	r2 = D(r2, s1_2_2, 0x0DFB0004, 0x05010400, 0x1401FF0D, 0xFFDF0AFF);
	r3 = D(r3, s1_2_2, 0xFB05F900, 0x043410FA, 0xE2D0250E, 0xFC16F3FF);
	r4 = D(r4, s1_2_2, 0x0EDE050B, 0x0813FBFC, 0xE301F101, 0x0A1AFBFF);
	r5 = D(r5, s1_2_2, 0x1809FE05, 0xFBD31AF3, 0x0D05E5F5, 0xED0F0415);
	r6 = D(r6, s1_2_2, 0xD7F0F10D, 0xF7F92F03, 0xCF22F2FC, 0x0DE7EF0E);
	r7 = D(r7, s1_2_2, 0x06F7F505, 0x111B0400, 0x09FEF20C, 0x12FE03FE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFCF004FB, 0x0AD3E517, 0x01F6EB15, 0xF7F9000B);
	r1 = D(r1, s0_0_0, 0x06FC1012, 0xEDDCF410, 0xFA03FF06, 0xFE060F1A);
	r2 = D(r2, s0_0_0, 0xF90BE2C3, 0xFEF801F7, 0x0AEB0001, 0xFFFAF60C);
	r3 = D(r3, s0_0_0, 0x0106FD1A, 0x0E2206FE, 0x00FEF4F7, 0x26B308E1);
	r4 = D(r4, s0_0_0, 0x0CF001FC, 0x02FE1A05, 0x050F06FA, 0x07F509F6);
	r5 = D(r5, s0_0_0, 0x010BE901, 0xFFF113FF, 0x1123FEFB, 0x01DFFE15);
	r6 = D(r6, s0_0_0, 0x05E118FD, 0xF80AF8FF, 0x12040904, 0xEEF90721);
	r7 = D(r7, s0_0_0, 0x05E0EA4F, 0x01E607FC, 0xED030310, 0x0FD31919);
	r0 = D(r0, s0_0_1, 0x08EFFD0B, 0xE6C6EBF9, 0x16002609, 0xFEF614D6);
	r1 = D(r1, s0_0_1, 0xF21A370C, 0xCA82FCF2, 0x2A153D00, 0xF5FDE1F7);
	r2 = D(r2, s0_0_1, 0xF0F0F506, 0xFCF104FE, 0xE8F41000, 0xFD091D03);
	r3 = D(r3, s0_0_1, 0xFA17A0E7, 0x0D0DFC12, 0x17F8E013, 0x19FCF60D);
	r4 = D(r4, s0_0_1, 0x02DA1200, 0x0B060A12, 0xFFE415ED, 0xFF0E3A01);
	r5 = D(r5, s0_0_1, 0xF9ECABC9, 0xCFE618E2, 0x05C5E7CC, 0x0DBCFC10);
	r6 = D(r6, s0_0_1, 0x0903DE1B, 0x11321414, 0xF322EF0E, 0xE8F8CAFD);
	r7 = D(r7, s0_0_1, 0x02F412DD, 0xF6FE090B, 0x08EE1AF4, 0x0FB115CB);
	r0 = D(r0, s0_0_2, 0xFF0F3E15, 0x0197E2F1, 0x1705ED0B, 0xEC02E105);
	r1 = D(r1, s0_0_2, 0x0C10031F, 0xE40AFFE1, 0xF30606FE, 0xF8F7F30E);
	r2 = D(r2, s0_0_2, 0xF412F6EE, 0xFDF8FD03, 0xFC01F0E7, 0x01F90BF9);
	r3 = D(r3, s0_0_2, 0x050FFF01, 0xD028D10A, 0xEC1BF30C, 0xF5F638E4);
	r4 = D(r4, s0_0_2, 0xEE1F07D8, 0xF5FDFEEC, 0xD3F50720, 0xFCF6FA19);
	r5 = D(r5, s0_0_2, 0xFB29F2FE, 0xFBE91B0D, 0xEE04E410, 0xFB9A1307);
	r6 = D(r6, s0_0_2, 0xF004F40A, 0xEE13A5C8, 0x1D09F114, 0x03F80603);
	r7 = D(r7, s0_0_2, 0x04FDCA17, 0x081181F7, 0x3E0CF4E5, 0xF3DB2CF2);
	r0 = D(r0, s0_1_0, 0x08FB0900, 0x2F02E125, 0x28E0DCF3, 0x7FFBF1FA);
	r1 = D(r1, s0_1_0, 0x05EB04E3, 0xE6E5F2F8, 0x170B06F5, 0xFD03EDFD);
	r2 = D(r2, s0_1_0, 0xD70A14EB, 0xFBF3EAF0, 0x24E71CFB, 0x0D0505FE);
	r3 = D(r3, s0_1_0, 0x2306DD0F, 0xE71BF90E, 0x120CF7F0, 0x01DA1BDB);
	r4 = D(r4, s0_1_0, 0x1F20060C, 0x251CFEF3, 0x2119F402, 0xFF24FE15);
	r5 = D(r5, s0_1_0, 0xED0202F6, 0x3CE1F1FD, 0xD1E0F5DC, 0x05E60100);
	r6 = D(r6, s0_1_0, 0xCCF4FF01, 0xFEF3F305, 0x2A06FD0C, 0xFB05EBEA);
	r7 = D(r7, s0_1_0, 0x0FEF1009, 0x17FAF6E9, 0xECE6E921, 0x0AEC0A12);
	r0 = D(r0, s0_1_1, 0xF3F809F8, 0xDE1DE8D9, 0xDD05E8FF, 0x33FF0616);
	r1 = D(r1, s0_1_1, 0xE9E31707, 0xCEBF07FD, 0xACFBF6FC, 0xD0F013F9);
	r2 = D(r2, s0_1_1, 0x0037B425, 0x0DFFAD09, 0x2FF413F7, 0xF4F816FB);
	r3 = D(r3, s0_1_1, 0xCA0CFD03, 0x0EFE10F6, 0x002AC815, 0x1511F6FF);
	r4 = D(r4, s0_1_1, 0x0406F215, 0xE222020B, 0xE11AD6EB, 0x25FCC9F6);
	r5 = D(r5, s0_1_1, 0xF506ED16, 0x10F0F011, 0x4FEED5D0, 0x2DB81DF6);
	r6 = D(r6, s0_1_1, 0xDEE7FF12, 0x0B0AF707, 0xFEF217F5, 0xE13BDFF0);
	r7 = D(r7, s0_1_1, 0x21E3FE07, 0x0A1B1AF6, 0x2B03EEE8, 0xA2DF30F7);
	r0 = D(r0, s0_1_2, 0x17E10508, 0xF401E7F0, 0x38F1D119, 0xFDF2CBFD);
	r1 = D(r1, s0_1_2, 0x210F00FA, 0x16E6FDE9, 0xFA04FC00, 0x110E0F10);
	r2 = D(r2, s0_1_2, 0xEE2C96F7, 0x0B010105, 0xEAE8EF00, 0x000B0E0B);
	r3 = D(r3, s0_1_2, 0x0E0D06ED, 0xD9FADBE2, 0xEBEBD603, 0x0909F83A);
	r4 = D(r4, s0_1_2, 0xB4FA141D, 0xFFE10AFF, 0x15F2E217, 0xEF1407FB);
	r5 = D(r5, s0_1_2, 0xF3F220FD, 0xF403F9EA, 0x3F0ACCF5, 0x01EC0CE6);
	r6 = D(r6, s0_1_2, 0xAFF707E8, 0xBE0903FC, 0x0FFC11F8, 0xF816F2F7);
	r7 = D(r7, s0_1_2, 0xFE18F60A, 0xF80FDBFB, 0xF33B1515, 0x05EA15EC);
	r0 = D(r0, s0_2_0, 0x0DFB01FB, 0xF3E00FF0, 0xE50D12F6, 0x31E61CE1);
	r1 = D(r1, s0_2_0, 0xFD0803E6, 0x7F06F235, 0x0C00F60D, 0xFD05F70A);
	r2 = D(r2, s0_2_0, 0xDB00F507, 0xEAFA07F4, 0xD2DC031C, 0xCBF7F804);
	r3 = D(r3, s0_2_0, 0x2E05FE06, 0xD1FB110A, 0xE5FE0704, 0xF9DD0A0F);
	r4 = D(r4, s0_2_0, 0x0DFE010C, 0x17021509, 0xA72308FC, 0xEB1BE4E5);
	r5 = D(r5, s0_2_0, 0x030402F6, 0x461F0D04, 0x38F2F906, 0xF0EE0002);
	r6 = D(r6, s0_2_0, 0xFA0AFD01, 0xF1F5F7FF, 0x3106FDFA, 0xBB020CEA);
	r7 = D(r7, s0_2_0, 0x47F40C04, 0xDB0604FD, 0x1F02F406, 0x15FA06FD);
	r0 = D(r0, s0_2_1, 0x8103FBFC, 0x810510F3, 0x27FEF001, 0x22E8F71A);
	r1 = D(r1, s0_2_1, 0x81F80ED2, 0xE4FBF001, 0x040502F4, 0xB508FDFF);
	r2 = D(r2, s0_2_1, 0x4709F9EF, 0x57040306, 0x2AF8F002, 0x24FF0102);
	r3 = D(r3, s0_2_1, 0x06051806, 0x39001DEB, 0x0AF715FA, 0x11F9F227);
	r4 = D(r4, s0_2_1, 0x82E0FB03, 0xF9F10E10, 0xE2210EE8, 0x4A14D8F2);
	r5 = D(r5, s0_2_1, 0x8107F7FF, 0x2BDCEF21, 0x48FAFD04, 0x5BE606EA);
	r6 = D(r6, s0_2_1, 0xDEE915F1, 0x1A02F5FC, 0xD5110DEF, 0xEC1D1A12);
	r7 = D(r7, s0_2_1, 0xF2F20014, 0x0905FE02, 0x3D0DF505, 0x05EB0110);
	r0 = D(r0, s0_2_2, 0xE102FCEF, 0x04050A07, 0x0AF00410, 0x97060A02);
	r1 = D(r1, s0_2_2, 0x8DF8F003, 0x12F905F4, 0x09010A03, 0x09080C05);
	r2 = D(r2, s0_2_2, 0x620CF50F, 0x05F50200, 0x0AFDE8FF, 0x01F807FA);
	r3 = D(r3, s0_2_2, 0x2200F7F7, 0x2905FBF9, 0x81FFF605, 0x81E432F3);
	r4 = D(r4, s0_2_2, 0x0415FAEF, 0x1202FBDC, 0x14EB1101, 0x2004EF18);
	r5 = D(r5, s0_2_2, 0xF50A0811, 0x181BEB20, 0xEEE3EB27, 0xE7F20403);
	r6 = D(r6, s0_2_2, 0x39FA24ED, 0xDAFF0E00, 0xECF905F2, 0x33FDF004);
	r7 = D(r7, s0_2_2, 0xFF05170B, 0xFC0707FD, 0x220E1FFB, 0xF50004F8);
	r0 = D(r0, s1_0_0, 0x03FBFDFF, 0x0820F920, 0x160F0308, 0x04EEF303);
	r1 = D(r1, s1_0_0, 0x140CFFF9, 0xCD101209, 0xF6E7F803, 0xFAF7FC03);
	r2 = D(r2, s1_0_0, 0x00FD1BFA, 0xFBFBFC03, 0xFAEF1707, 0xFB0516FD);
	r3 = D(r3, s1_0_0, 0x160A02FF, 0x05FFF91B, 0x00F9F3FE, 0xDDE7E12D);
	r4 = D(r4, s1_0_0, 0xFF02CDEE, 0x14FFF4FC, 0xE2E5EFFE, 0xF8ECF0F3);
	r5 = D(r5, s1_0_0, 0xF40AFE06, 0xEEE30711, 0xF0F0B418, 0xF108F910);
	r6 = D(r6, s1_0_0, 0xE702F217, 0x09F3FEEF, 0xFBF7EDFF, 0xE8FBF713);
	r7 = D(r7, s1_0_0, 0xE4080CFF, 0x0BFE01FF, 0x0DF90E09, 0xE711EA11);
	r0 = D(r0, s1_0_1, 0xFCF2F904, 0xCE12F004, 0xEE1BFFF8, 0xCA04F526);
	r1 = D(r1, s1_0_1, 0x14F8011F, 0xD5E10416, 0x14F3062C, 0xFA020001);
	r2 = D(r2, s1_0_1, 0xF6FEE6FA, 0x0005FC03, 0xDCF009EF, 0x0903F0FF);
	r3 = D(r3, s1_0_1, 0x0F0A16FA, 0x0DFC0C09, 0x0F02F70B, 0x08180619);
	r4 = D(r4, s1_0_1, 0xD91A1208, 0x06FDF7F4, 0xF2F2000D, 0xE6FDF7F1);
	r5 = D(r5, s1_0_1, 0xF116FFE5, 0x0EEDFBFA, 0xE8F505CD, 0xFD01FE31);
	r6 = D(r6, s1_0_1, 0xE1FC010A, 0x08FB01FE, 0xFD10F200, 0xFFE1EB05);
	r7 = D(r7, s1_0_1, 0xE5CFFFEE, 0x0E1B020F, 0xD1ED03EC, 0x03E8222C);
	r0 = D(r0, s1_0_2, 0xF2150603, 0x01FBFD0F, 0x0FE60002, 0x1AF90EE8);
	r1 = D(r1, s1_0_2, 0x02170E07, 0xFA04DD0D, 0xF60415F0, 0x0CF6FCFF);
	r2 = D(r2, s1_0_2, 0xFEDF04F5, 0xFEFF0309, 0x07EB1B2E, 0xF7FD0FFC);
	r3 = D(r3, s1_0_2, 0xFA04F901, 0x100BFC0B, 0x10EC10CD, 0xEB2C09F8);
	r4 = D(r4, s1_0_2, 0x0AE00BD4, 0xF90AEE09, 0xEB19FEFB, 0x09FFFFF5);
	r5 = D(r5, s1_0_2, 0x08F717F9, 0xF10B04F2, 0xD4D97FFC, 0xE307092D);
	r6 = D(r6, s1_0_2, 0xFF04FA04, 0x2D040EEB, 0x0D0DF00E, 0xECF40C0A);
	r7 = D(r7, s1_0_2, 0x0D07FD07, 0x08120D01, 0x13FF13EB, 0xFD06041E);
	r0 = D(r0, s1_1_0, 0x0B0C1503, 0xDEE4FE0A, 0x11F4F5F5, 0xF500FDFE);
	r1 = D(r1, s1_1_0, 0xF7F80406, 0x1C10F118, 0x0900FCF9, 0x06FEFCF7);
	r2 = D(r2, s1_1_0, 0x1001121A, 0x0B02FA06, 0x0CF8F9E8, 0x07FA0907);
	r3 = D(r3, s1_1_0, 0x0512F8F2, 0xFDF7F9F6, 0x1309FC1A, 0xF3F9FD19);
	r4 = D(r4, s1_1_0, 0xFEFBE92C, 0xFBF909F0, 0xCD14F6FE, 0x23EAF6FB);
	r5 = D(r5, s1_1_0, 0xFCE4EB0F, 0x06120B01, 0x05FE81DE, 0xF91D0814);
	r6 = D(r6, s1_1_0, 0x061002F3, 0xE8FC120D, 0xE6D90804, 0x0600F4E5);
	r7 = D(r7, s1_1_0, 0x091614E8, 0xF3EEF308, 0xFFF0D9E6, 0x0CFD0C03);
	r0 = D(r0, s1_1_1, 0x08F9FE11, 0xFD0C03F6, 0xECE4D8DF, 0xFAFE0F16);
	r1 = D(r1, s1_1_1, 0xE1E3E812, 0xF1E3FBEB, 0x0202F9B1, 0xFD13FC1C);
	r2 = D(r2, s1_1_1, 0x2503FDE9, 0x1125F6EA, 0x10E4DC02, 0xFB030820);
	r3 = D(r3, s1_1_1, 0x00F9F311, 0x09F00CE7, 0x0704031B, 0xF00F0E02);
	r4 = D(r4, s1_1_1, 0xF1EA1B03, 0x10F200E7, 0x151001F9, 0x031EFEDC);
	r5 = D(r5, s1_1_1, 0x0C10F405, 0x0810F907, 0xEEDCBD03, 0x0F23ED24);
	r6 = D(r6, s1_1_1, 0xF7FCE8FA, 0xE4F7F0F1, 0xFD0116F6, 0x0BFA0104);
	r7 = D(r7, s1_1_1, 0x0F0403DD, 0x01070005, 0xEE14D61D, 0xFA07FE1D);
	r0 = D(r0, s1_1_2, 0x00F307C1, 0xC90A05D3, 0x1A040600, 0x0802FCF8);
	r1 = D(r1, s1_1_2, 0xE4FE081B, 0xF8F91314, 0x18F8F706, 0x01F5F501);
	r2 = D(r2, s1_1_2, 0xF107F4FA, 0xF1FC0002, 0xEB06ED1F, 0xFBF705FF);
	r3 = D(r3, s1_1_2, 0x0100031A, 0xF407F5EE, 0xFE1703DB, 0xFA051129);
	r4 = D(r4, s1_1_2, 0x03F504FB, 0xFAE2F3FA, 0x200C0634, 0xE910F1FB);
	r5 = D(r5, s1_1_2, 0x0916FEA9, 0xF826FB0D, 0x03BD0721, 0xEAF51217);
	r6 = D(r6, s1_1_2, 0x0BFF020F, 0xE8E8FE05, 0x01F418F7, 0xF0140511);
	r7 = D(r7, s1_1_2, 0x04EA021E, 0x07180AE6, 0x01FEF20B, 0x02E9F129);
	r0 = D(r0, s1_2_0, 0x00F9F7FC, 0xDEE3090E, 0x08F1000B, 0x0201FA03);
	r1 = D(r1, s1_2_0, 0x0310031C, 0x0B0A0604, 0x0109F8FA, 0x07181600);
	r2 = D(r2, s1_2_0, 0x0C12FCE2, 0x0407120F, 0xE90CF8FD, 0xFF06F609);
	r3 = D(r3, s1_2_0, 0x06030532, 0xF8FFFD0D, 0x05EF08FC, 0xD90AD50B);
	r4 = D(r4, s1_2_0, 0xF9EFD9F8, 0xF7FC0606, 0x0AFEFB0A, 0x070DF7F6);
	r5 = D(r5, s1_2_0, 0x0DFF13FA, 0x10F9EB18, 0x1305D813, 0xF3030810);
	r6 = D(r6, s1_2_0, 0x0B0B100D, 0xFDF20309, 0x220FFAFC, 0x12FD0B0F);
	r7 = D(r7, s1_2_0, 0xF3D614F8, 0x05F4FB10, 0xF7E623E1, 0xFF12FAFE);
	r0 = D(r0, s1_2_1, 0x0D03F1EE, 0xF0E2F1E9, 0xFBF8E7ED, 0xF7ECF4F1);
	r1 = D(r1, s1_2_1, 0xFFEFEE25, 0xFF060081, 0x04FB0003, 0x140C1000);
	r2 = D(r2, s1_2_1, 0x0B10F01D, 0x0302F722, 0x0D12EA0F, 0x0FF6F803);
	r3 = D(r3, s1_2_1, 0x05F603F6, 0xFE061C14, 0x100EF9D9, 0xF501EEF8);
	r4 = D(r4, s1_2_1, 0xE51E1C09, 0x01000A21, 0x1F0C1106, 0x050522FC);
	r5 = D(r5, s1_2_1, 0xFEF1F1C1, 0xCCFBF310, 0xE6EB083D, 0xEDFFE402);
	r6 = D(r6, s1_2_1, 0xEFFA0CD9, 0xF7FF062A, 0x160F140C, 0xE218F0EA);
	r7 = D(r7, s1_2_1, 0xFAF1010F, 0x02FFFF03, 0xDB03ED2C, 0xF8FAF3FA);
	r0 = D(r0, s1_2_2, 0x03FB01FD, 0xED1D1C41, 0xFDF8FDF8, 0xF1160DF6);
	r1 = D(r1, s1_2_2, 0xF412FAD3, 0x0505F0BA, 0x04FDF809, 0x05FAFA00);
	r2 = D(r2, s1_2_2, 0x0DF2FCBD, 0xFFF40204, 0x031615E6, 0xFDFCF2E7);
	r3 = D(r3, s1_2_2, 0xFD0900FB, 0x02FA1213, 0x03EF10D0, 0xF5F5EDEC);
	r4 = D(r4, s1_2_2, 0x0A0208FE, 0x0720FAF1, 0xF2F3FDF2, 0xF5F5020C);
	r5 = D(r5, s1_2_2, 0xFF0308A4, 0xEEF61E1E, 0x02AE4632, 0x160BFF06);
	r6 = D(r6, s1_2_2, 0xF80A0F07, 0xF2F9F30E, 0x03FAE7F0, 0x140E02E3);
	r7 = D(r7, s1_2_2, 0xF8FC0F2F, 0x10FAED16, 0x01F40718, 0xFB09E6EC);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-7.975e-03, 1.494e-02, -1.494e-02, 8.525e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-4.215e-03, 2.582e-02, 1.272e-02, 1.832e-03);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(1.799e-02, 2.396e-04, -2.567e-03, -2.659e-01);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(4.652e-03, 1.766e-03, 1.157e-02, -6.781e-03);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(4.710e-03, 1.489e-03, 1.837e-02, 8.420e-04);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(1.828e-02, -4.748e-02, -2.168e-02, 1.808e-02);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(3.523e-05, 1.330e-02, 2.640e-02, 9.052e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-5.798e-02, 3.097e-02, 9.681e-03, 5.698e-03);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-TEST-conv2
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv1_pt;
			r = conv1_gather(p, 0);
			g = conv1_gather(p, 1);
			b = conv1_gather(p, 2);
			a = conv1_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x030305FE, 0xF4030D04, 0xFB12FE0A, 0xFFF90907);
	r1 = D(r1, s0_0_0, 0x0100FBEF, 0x05130713, 0x03EEF802, 0x21F401FE);
	r2 = D(r2, s0_0_0, 0xE50C06DD, 0x0FE403F8, 0xFF27FD05, 0xFDFEFDF0);
	r3 = D(r3, s0_0_0, 0xFFE600F0, 0xFBFE06F8, 0xFF05F100, 0xED18F405);
	r4 = D(r4, s0_0_0, 0xFC0CFCFB, 0xF7F3FCEC, 0xFB12FFDE, 0xF4FD0701);
	r5 = D(r5, s0_0_0, 0xFEF904FB, 0x05FDFBFE, 0x0005FDFE, 0x03F80707);
	r6 = D(r6, s0_0_0, 0x1102F4F6, 0xEAFA08F7, 0xFA040201, 0x040AE801);
	r7 = D(r7, s0_0_0, 0x030EF8F5, 0xFEFBFD05, 0x03F8FEF9, 0x1BE2ED11);
	r0 = D(r0, s0_0_1, 0xFF0011FA, 0x17FEF6FC, 0xFEF9F500, 0xFC01F9F9);
	r1 = D(r1, s0_0_1, 0x0FFE00E8, 0xFD0105F8, 0x34F5D3D8, 0xF40A29D8);
	r2 = D(r2, s0_0_1, 0xF026F6DF, 0x1CFA03F3, 0xF20604FF, 0xFE05F8F2);
	r3 = D(r3, s0_0_1, 0xE5F608E7, 0xF7FFF300, 0x24EED9F2, 0x0A140818);
	r4 = D(r4, s0_0_1, 0xF8F30EF4, 0xD1EB1100, 0xED06E3DE, 0xE80907F0);
	r5 = D(r5, s0_0_1, 0xF7FA050A, 0x18EFF508, 0x0AF60205, 0x080FF9EE);
	r6 = D(r6, s0_0_1, 0xE70319F5, 0x1802EDE8, 0xE1F40FF5, 0x13FD120A);
	r7 = D(r7, s0_0_1, 0x0BFBF90E, 0xFA06F9FF, 0xF41AF707, 0x02BA04EB);
	r0 = D(r0, s0_0_2, 0x03FEFF00, 0x0706F109, 0x320403F3, 0x03F1FBFF);
	r1 = D(r1, s0_0_2, 0x07F909F4, 0x01FB0900, 0x3119FF16, 0x0606E000);
	r2 = D(r2, s0_0_2, 0x09FE1BFD, 0x0BFBF306, 0x0C0CDDFA, 0xFFFDF201);
	r3 = D(r3, s0_0_2, 0x9CEB22F0, 0xFBF3F203, 0x2610DDFD, 0xF5070FF7);
	r4 = D(r4, s0_0_2, 0x2204FA0E, 0x031018F3, 0xD700CDFB, 0x1C081AFA);
	r5 = D(r5, s0_0_2, 0xF403FDF9, 0x030203FF, 0x0BFD05FE, 0xEAFE020A);
	r6 = D(r6, s0_0_2, 0x0E0F05FA, 0x1605F400, 0x0612F205, 0x1C0CF404);
	r7 = D(r7, s0_0_2, 0xFCFEFC03, 0xF10203FA, 0xFA030403, 0x1F001B14);
	r0 = D(r0, s0_1_0, 0xF905FF12, 0xFEFA0824, 0x08071D05, 0x02FE0304);
	r1 = D(r1, s0_1_0, 0xFDFB00E0, 0xFAFA0FE8, 0x12EFC8FB, 0x081306BA);
	r2 = D(r2, s0_1_0, 0x1525FA21, 0x040BF402, 0x000CF5EE, 0x000CFF13);
	r3 = D(r3, s0_1_0, 0x0205EF15, 0x0D010B09, 0x0913CFF1, 0xF9EB1709);
	r4 = D(r4, s0_1_0, 0xF7D702FC, 0x00FF14E0, 0x04F497F1, 0xE5020129);
	r5 = D(r5, s0_1_0, 0x0DF606FD, 0x150FFD1C, 0x05F9F406, 0xFCED02FC);
	r6 = D(r6, s0_1_0, 0x0A03ED08, 0xF3E9FBF8, 0x12020105, 0x00F7F7FF);
	r7 = D(r7, s0_1_0, 0xFDF8044F, 0xF00F0B82, 0x00FE020A, 0x011BE7F4);
	r0 = D(r0, s0_1_1, 0x0B3018D3, 0xF32007F4, 0xF8FE1FEE, 0x0307FFEC);
	r1 = D(r1, s0_1_1, 0x01F503FE, 0x02FB1712, 0x15DCD300, 0xEE3F4400);
	r2 = D(r2, s0_1_1, 0x1608EB01, 0x06FDF9F5, 0xE5E506E8, 0x0A0F050B);
	r3 = D(r3, s0_1_1, 0xAC130CD1, 0xF40C00E9, 0x25FEA2F8, 0x04D403EE);
	r4 = D(r4, s0_1_1, 0xD9E40AF3, 0x15D90A2F, 0xC1E5A3FA, 0xD2F91BF1);
	r5 = D(r5, s0_1_1, 0x00070D0B, 0x11EBFDF2, 0xF5F9F100, 0x0913F645);
	r6 = D(r6, s0_1_1, 0xFAFF1CD4, 0x1BD9DB10, 0x10EF04CE, 0x0D0AF8F8);
	r7 = D(r7, s0_1_1, 0x0EFBFEFA, 0xFBE51609, 0x0A05FDF9, 0xDD1926E2);
	r0 = D(r0, s0_1_2, 0xF8FE03FF, 0x140803F7, 0x21EBFDF4, 0xFC06FB04);
	r1 = D(r1, s0_1_2, 0x0CF4F901, 0x0D000B05, 0x2C00E0E2, 0xE9F0F203);
	r2 = D(r2, s0_1_2, 0x090EE405, 0x13F4E5F9, 0x1A02E906, 0x0DFFEF05);
	r3 = D(r3, s0_1_2, 0xE905FDFE, 0x1209FB00, 0x0EFFC905, 0x1CD3150C);
	r4 = D(r4, s0_1_2, 0x12DFF2EB, 0x01ECC706, 0xF2FD8109, 0x0C040806);
	r5 = D(r5, s0_1_2, 0xFB090C02, 0xFF0505FF, 0x000605FF, 0xF90CFAF6);
	r6 = D(r6, s0_1_2, 0x0FDBF304, 0xFAEEE70D, 0x0BEB00F9, 0xF1F1DD04);
	r7 = D(r7, s0_1_2, 0xED00FAFE, 0xFFFDF806, 0x0DFA0100, 0x122CFE13);
	r0 = D(r0, s0_2_0, 0xF90206FB, 0xF9E40614, 0x04F50614, 0x050303FA);
	r1 = D(r1, s0_2_0, 0xFDF705EC, 0x060A0AF9, 0x0DFBE90D, 0xF4E4E4F3);
	r2 = D(r2, s0_2_0, 0x16FBEFFA, 0xFC04F509, 0x07FFEC21, 0xE0F80A0F);
	r3 = D(r3, s0_2_0, 0xE90F01F8, 0xF4F40019, 0x1503B005, 0xF5F625E7);
	r4 = D(r4, s0_2_0, 0x03F8130A, 0x091A28B5, 0xF509DAC4, 0xED02100F);
	r5 = D(r5, s0_2_0, 0xFA0104F9, 0xFDF60D0B, 0x0908FB01, 0x0800FFFD);
	r6 = D(r6, s0_2_0, 0xF3F7D5FC, 0x16FAFDF6, 0xFA0FF309, 0x06FEE801);
	r7 = D(r7, s0_2_0, 0xFE0DF813, 0xF9EAEED4, 0x03FEFDF8, 0x04FCF2F9);
	r0 = D(r0, s0_2_1, 0xFD0511FB, 0xE5EC06FE, 0x06DD1A0E, 0x0900FFFD);
	r1 = D(r1, s0_2_1, 0x01FDF8FA, 0x130B1FF7, 0xF5FD0719, 0xDBF6FE06);
	r2 = D(r2, s0_2_1, 0x1214FEF1, 0x1502FF09, 0xF7DFDD05, 0xF8F5110A);
	r3 = D(r3, s0_2_1, 0xF9ED3DD5, 0xFCE5F201, 0x06F9A20C, 0xD8EBE711);
	r4 = D(r4, s0_2_1, 0xEBF707FF, 0xEE240EF4, 0x03FBF110, 0x02F50CE9);
	r5 = D(r5, s0_2_1, 0x00FF0AF8, 0x19E70418, 0x081AF808, 0xFF02031A);
	r6 = D(r6, s0_2_1, 0xD01DFCD8, 0x1B1508F7, 0x0B061305, 0xF5FBF100);
	r7 = D(r7, s0_2_1, 0xEF1010F8, 0x0009C3F5, 0x05FE0105, 0x1AE61FFE);
	r0 = D(r0, s0_2_2, 0x00F60F07, 0x00FEF8FD, 0xE8FCF7F9, 0x00F302F9);
	r1 = D(r1, s0_2_2, 0xF8FB05FD, 0x170D0101, 0x04F4C505, 0x00F50104);
	r2 = D(r2, s0_2_2, 0x12120AF3, 0xFD02F0FA, 0x09FCFF11, 0xE9F5FC03);
	r3 = D(r3, s0_2_2, 0x07F53208, 0x14FDEC05, 0xFFF4BEFF, 0xC80BFDFE);
	r4 = D(r4, s0_2_2, 0x17083209, 0x15200D09, 0xF1F4A301, 0xEC07FA01);
	r5 = D(r5, s0_2_2, 0xF9000101, 0x0604FBF5, 0x1203FD02, 0x0DFF040C);
	r6 = D(r6, s0_2_2, 0xB2E109FE, 0x17081D04, 0xF70E21F3, 0xEFEAFAFB);
	r7 = D(r7, s0_2_2, 0xFA031607, 0x010FF1FC, 0xFFFBFCFC, 0xF830E9F7);
	r0 = D(r0, s1_0_0, 0x02FF04FB, 0x0003F6FF, 0x09F31400, 0xFA03F4F5);
	r1 = D(r1, s1_0_0, 0xFDFE0D09, 0x07000CF0, 0x0AFFDC0B, 0x08080A01);
	r2 = D(r2, s1_0_0, 0xD60B0B20, 0xF6071705, 0x06EE2307, 0x060707FD);
	r3 = D(r3, s1_0_0, 0xF8F8F014, 0xFB0404F9, 0xF4F71611, 0x02F21621);
	r4 = D(r4, s1_0_0, 0x0CF11C05, 0x170FD2FB, 0xF10DD7F1, 0x040507FA);
	r5 = D(r5, s1_0_0, 0xF6FE02FC, 0x04031905, 0xF600F904, 0xFC00F8F2);
	r6 = D(r6, s1_0_0, 0x0DFF03FB, 0xE8060103, 0xEDFFE507, 0xF6031D1D);
	r7 = D(r7, s1_0_0, 0x0A081B03, 0xF102FCFF, 0xFE07EBFF, 0x16061108);
	r0 = D(r0, s1_0_1, 0xFEFCF2F8, 0x0D031CEB, 0xF2FFDE14, 0xFE0C0C02);
	r1 = D(r1, s1_0_1, 0xF806FEEF, 0xFA04F3FE, 0x0FD3CB39, 0xE5FF100B);
	r2 = D(r2, s1_0_1, 0xCD09BE0B, 0xFEE7E91F, 0xFE0016EE, 0x0FFAF408);
	r3 = D(r3, s1_0_1, 0xFEEAFE1C, 0x030509FC, 0xEC08040C, 0xEC16FEE9);
	r4 = D(r4, s1_0_1, 0xF60F02EE, 0x1C0CFBFD, 0x0306F517, 0xF302100D);
	r5 = D(r5, s1_0_1, 0xF3040F04, 0x0406000E, 0x0605EDF6, 0x0C001400);
	r6 = D(r6, s1_0_1, 0xE3020202, 0x00FF1815, 0xE704F5EB, 0xDA02FDFF);
	r7 = D(r7, s1_0_1, 0x0A061303, 0x0802F908, 0x1CEB030A, 0xFE080FFE);
	r0 = D(r0, s1_0_2, 0x010107FC, 0x0702F700, 0x27FED6F3, 0xFA040709);
	r1 = D(r1, s1_0_2, 0xF500FDFF, 0xEBFE0A04, 0xF0E5F0F8, 0x02F5F816);
	r2 = D(r2, s1_0_2, 0xF7F5ED13, 0x0DF9200C, 0x06F0FB16, 0xF60208FD);
	r3 = D(r3, s1_0_2, 0xE403EB1A, 0xE903FF11, 0xF6F4071E, 0xEBFCE507);
	r4 = D(r4, s1_0_2, 0x0AE8211A, 0xF4F7BD19, 0x1EF51508, 0x01FFFE02);
	r5 = D(r5, s1_0_2, 0x0BFE1A07, 0x15FE1200, 0xFCF7F907, 0xFE020B08);
	r6 = D(r6, s1_0_2, 0xEF0212EF, 0x07EDFF13, 0x0CFE0605, 0x0BF4F900);
	r7 = D(r7, s1_0_2, 0x01001106, 0xF8000A12, 0xEE00F6FF, 0xEDFEFEF2);
	r0 = D(r0, s1_1_0, 0x02030400, 0x01080C0F, 0x00F4FDEF, 0xF9FEFE03);
	r1 = D(r1, s1_1_0, 0xF802FEF9, 0x02F91FE6, 0xF3F31B16, 0x28EF3D13);
	r2 = D(r2, s1_1_0, 0x120A1513, 0xFC092B07, 0x17DFE716, 0xF9090606);
	r3 = D(r3, s1_1_0, 0xF7040413, 0x05FCE904, 0x06E6FCFC, 0x000B0ADD);
	r4 = D(r4, s1_1_0, 0x0206ECFB, 0xFEFDBD08, 0xFF16320A, 0x0DF91B12);
	r5 = D(r5, s1_1_0, 0x04F20F14, 0x0F071EF9, 0xF509F0FC, 0xF30AF5FA);
	r6 = D(r6, s1_1_0, 0xF50719F6, 0x04FB0012, 0x06EA0C0E, 0x061EC5FD);
	r7 = D(r7, s1_1_0, 0xEF1CE9E7, 0x09D11025, 0x01F81308, 0x11FBF707);
	r0 = D(r0, s1_1_1, 0xFCF9F600, 0xF5080B0E, 0xF610C3F8, 0xE80C110D);
	r1 = D(r1, s1_1_1, 0xE8D90611, 0x25D4FF18, 0xEF2C81E8, 0xDE95331C);
	r2 = D(r2, s1_1_1, 0x0DE2F600, 0xF7D22DF8, 0x0D81C619, 0xF10CE6FF);
	r3 = D(r3, s1_1_1, 0x0C11EC08, 0xFDEC301B, 0xF1DD3916, 0xFC10B2E3);
	r4 = D(r4, s1_1_1, 0x15B108DB, 0xF90CE7E3, 0xD6F5EDFA, 0xE5150402);
	r5 = D(r5, s1_1_1, 0x10B32419, 0xF1FBE70A, 0xFA14E2FD, 0x0EF73617);
	r6 = D(r6, s1_1_1, 0xEC14A6F2, 0x28C41BDC, 0x0B080112, 0x1BC72308);
	r7 = D(r7, s1_1_1, 0xE30B2E0A, 0x0EFA2706, 0x025DFA04, 0xC92C9C05);
	r0 = D(r0, s1_1_2, 0x2BFD0E0B, 0x0110F5F8, 0x13F1E704, 0x34FB030B);
	r1 = D(r1, s1_1_2, 0xF6F203FD, 0x00F51503, 0x0581021F, 0x110A1200);
	r2 = D(r2, s1_1_2, 0x03F80D16, 0x1F110623, 0x02EE0127, 0x14FD0304);
	r3 = D(r3, s1_1_2, 0x2F093DE8, 0x16FD1504, 0xF5FBECF6, 0xE4120509);
	r4 = D(r4, s1_1_2, 0xFFEC0B13, 0xC6108115, 0xD2F903D4, 0x0B00EC12);
	r5 = D(r5, s1_1_2, 0x17FF170B, 0x10FF00FE, 0x0E0BFD1E, 0xE7FE0F09);
	r6 = D(r6, s1_1_2, 0x1BF50714, 0xF7D7F806, 0x231F0F02, 0x23E9F900);
	r7 = D(r7, s1_1_2, 0xF1FE0407, 0xFE07050D, 0x16040703, 0xFFD3E60D);
	r0 = D(r0, s1_2_0, 0xFE0BFA00, 0xF7FC220F, 0xF60FE00D, 0x04FA05F7);
	r1 = D(r1, s1_2_0, 0xF9FA0FFE, 0x000700FD, 0x0FFB05FA, 0x0AFA0702);
	r2 = D(r2, s1_2_0, 0xFEFBFDE3, 0x03FFF3F4, 0x00F9F2F0, 0x0CF010F7);
	r3 = D(r3, s1_2_0, 0x16FDC9FC, 0xF8E5E811, 0xF30D0CFF, 0x05080DE2);
	r4 = D(r4, s1_2_0, 0xFBF401FC, 0xD9FB9DEC, 0x0DE9EB1A, 0x02FCE2F9);
	r5 = D(r5, s1_2_0, 0x08FBE602, 0x0CFA15FC, 0xFDFC0EF7, 0xFDFD04FB);
	r6 = D(r6, s1_2_0, 0x11110615, 0xFB060EFA, 0x06FA050A, 0xF4110B0F);
	r7 = D(r7, s1_2_0, 0xF404EF09, 0x0BDDF52D, 0x0101FDFE, 0x0EFA1CE1);
	r0 = D(r0, s1_2_1, 0xFDDF0404, 0xF519F5FA, 0xE9EEF715, 0x020F0C02);
	r1 = D(r1, s1_2_1, 0xFB0B04F6, 0xF1FF150A, 0x032CF9D2, 0xF9DF0B0B);
	r2 = D(r2, s1_2_1, 0x0FFE0907, 0x08FDEBFC, 0x052EF9D3, 0x0BBE17E2);
	r3 = D(r3, s1_2_1, 0x030212D6, 0x11812A0C, 0xECE6E418, 0x10FF3E10);
	r4 = D(r4, s1_2_1, 0x01060B01, 0xFA0104ED, 0x15F30DF3, 0x000714F5);
	r5 = D(r5, s1_2_1, 0x0D0BE9F4, 0x06EFEBF7, 0x070AE2F8, 0x021000FD);
	r6 = D(r6, s1_2_1, 0xF5E91EFB, 0xFD01F701, 0xFFFB07F2, 0xF3E41AFE);
	r7 = D(r7, s1_2_1, 0x0200ECFE, 0x0F1AF6ED, 0xFAF30B02, 0x053C10F9);
	r0 = D(r0, s1_2_2, 0xF9F3FD06, 0xE6FFFAEF, 0x18F7E210, 0x01000109);
	r1 = D(r1, s1_2_2, 0xFB0201F9, 0x10F70B1E, 0x10E6A8DD, 0x1E03EAFF);
	r2 = D(r2, s1_2_2, 0x08FB0B07, 0x12F50CEA, 0xFF03EEE2, 0xF40D11ED);
	r3 = D(r3, s1_2_2, 0xEF09DCF2, 0x0E12F4ED, 0x10FE23EE, 0x37F4FB00);
	r4 = D(r4, s1_2_2, 0x020006F8, 0xF7163B00, 0xDFFE2707, 0x070C1B06);
	r5 = D(r5, s1_2_2, 0xFBFDF802, 0xF8F40405, 0x01FF0904, 0x06F81102);
	r6 = D(r6, s1_2_2, 0xFCEC0707, 0xFF0607FC, 0x0005D8F7, 0x040A02FD);
	r7 = D(r7, s1_2_2, 0xFA01FF07, 0x01F70F0A, 0xF9F9FC03, 0xFBA8FA0E);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x04FDFB02, 0xF5FD0502, 0x0A08E8F6, 0x020400FF);
	r1 = D(r1, s0_0_0, 0x08FFF802, 0x020AEF00, 0xFAEA1A07, 0x05000808);
	r2 = D(r2, s0_0_0, 0xE804D3E0, 0x0CFE100A, 0xF7FEEF13, 0x0BFB0902);
	r3 = D(r3, s0_0_0, 0x13F70601, 0x05FDF105, 0xF0F10802, 0x00F7FAE9);
	r4 = D(r4, s0_0_0, 0xF901F017, 0x0203FDF5, 0xFAEF014C, 0x030EFC10);
	r5 = D(r5, s0_0_0, 0xFE02050C, 0xFE03EAF6, 0xFDFEFE0B, 0x08FFFF0A);
	r6 = D(r6, s0_0_0, 0x09F61217, 0x05F60E05, 0xFAFA0FF3, 0x00FE0401);
	r7 = D(r7, s0_0_0, 0x10020307, 0xEA00010D, 0xFDFD11FB, 0xFD0C03E5);
	r0 = D(r0, s0_0_1, 0xF6FDDF0E, 0x0806FBF0, 0xFC240AF8, 0x0308FFFB);
	r1 = D(r1, s0_0_1, 0x2AF711FD, 0xF404FE0F, 0xFB0EAE26, 0xFFF8B510);
	r2 = D(r2, s0_0_1, 0x03DBFC1D, 0x05DD8132, 0x02E6F3DD, 0x05F91610);
	r3 = D(r3, s0_0_1, 0x0309E613, 0x06F9F7F9, 0x04CE0F26, 0x0B1706F9);
	r4 = D(r4, s0_0_1, 0x0A1A2902, 0xFBFEFD1B, 0xF7EF21DB, 0xF8FE1306);
	r5 = D(r5, s0_0_1, 0xFF093D05, 0xFCF40109, 0xFDFB11F1, 0xF9080600);
	r6 = D(r6, s0_0_1, 0x090EF510, 0x16FB1E1D, 0x0201D007, 0x05DF3326);
	r7 = D(r7, s0_0_1, 0x0BF7080C, 0x001303FF, 0xFD078112, 0x08E8DD37);
	r0 = D(r0, s0_0_2, 0xF90AED02, 0xFFFCF408, 0x0A070A0D, 0x07FD0C06);
	r1 = D(r1, s0_0_2, 0x12F8FD10, 0x0608FC08, 0x03E5F925, 0xF6EA04FF);
	r2 = D(r2, s0_0_2, 0x1AEAF1F9, 0xF2F8C519, 0xFFE0EA08, 0x03F6EEFD);
	r3 = D(r3, s0_0_2, 0xFEF9E703, 0x0EEAFF01, 0x03E40C05, 0x06F70D1A);
	r4 = D(r4, s0_0_2, 0x002BD309, 0xFFE7D2DB, 0x0FCF1114, 0x080207FD);
	r5 = D(r5, s0_0_2, 0xF6080BF6, 0xFD0209F4, 0x01080600, 0x02F5F502);
	r6 = D(r6, s0_0_2, 0x04FFD819, 0xF9E10EFD, 0x07FAC411, 0x07EEFE13);
	r7 = D(r7, s0_0_2, 0x02F00304, 0xFAF0FE01, 0xFFFEF605, 0xE6DBDA0E);
	r0 = D(r0, s0_1_0, 0x0705FE0A, 0xFD080E16, 0xFAFAE1FF, 0xFEFF0409);
	r1 = D(r1, s0_1_0, 0x1FFDFA01, 0x0006CE05, 0x0B040EFF, 0x01F209E9);
	r2 = D(r2, s0_1_0, 0x0023F5FE, 0x060D02F8, 0xFDF5F6D2, 0xF70B0400);
	r3 = D(r3, s0_1_0, 0xF00B0EEB, 0x01FEFC13, 0xFBF21223, 0x0908FE08);
	r4 = D(r4, s0_1_0, 0x00F907FF, 0xF81202CE, 0x080AF3CF, 0xF9F405EE);
	r5 = D(r5, s0_1_0, 0xF803FE0E, 0x0702E4FC, 0x0B010E05, 0x00FA0F0B);
	r6 = D(r6, s0_1_0, 0xFAEEFD0C, 0xF0F0F2EF, 0xF70214F8, 0xF6FF100E);
	r7 = D(r7, s0_1_0, 0x020208FA, 0xFEF6D63F, 0x0305FDFC, 0x03FC10EC);
	r0 = D(r0, s0_1_1, 0x0B050109, 0xEFF301F1, 0xF6FF19F4, 0xFC07FA0A);
	r1 = D(r1, s0_1_1, 0x7701FDF0, 0x221CB707, 0x0405FE0B, 0xF3010312);
	r2 = D(r2, s0_1_1, 0xEB12111C, 0xFF06E2FC, 0x0BD3C41F, 0x01EE4B04);
	r3 = D(r3, s0_1_1, 0xFA09E72A, 0x03FBFF18, 0x07DDCA01, 0xFDF41C01);
	r4 = D(r4, s0_1_1, 0x0916EEE0, 0x03120A2E, 0x16C81E13, 0x0EF3000F);
	r5 = D(r5, s0_1_1, 0x1902D708, 0x000235EE, 0xF8FE1AF2, 0xF308E4DE);
	r6 = D(r6, s0_1_1, 0x03DD2804, 0xEE22E9F1, 0xF11BFD0E, 0x0CF3190D);
	r7 = D(r7, s0_1_1, 0x0707EC0B, 0xF50641E8, 0x04060FFF, 0x12FE050A);
	r0 = D(r0, s0_1_2, 0xF30903FB, 0xF818060B, 0x0A03FCF2, 0xFEFD0D05);
	r1 = D(r1, s0_1_2, 0x5601F0FF, 0x0205FAE1, 0xFAFEF9B0, 0xF50100EC);
	r2 = D(r2, s0_1_2, 0x1511FCDE, 0xF9ECFCE5, 0xF9F5DBEE, 0xF4140702);
	r3 = D(r3, s0_1_2, 0x1504EEEF, 0xFF040616, 0x0299FF06, 0x09090AF6);
	r4 = D(r4, s0_1_2, 0xFB0DE3D0, 0x070010FA, 0x01F61128, 0x0004FA01);
	r5 = D(r5, s0_1_2, 0x04010508, 0x01FB08FE, 0xFD011302, 0x0B0C080E);
	r6 = D(r6, s0_1_2, 0xFDD8F5E9, 0xFAFEE0FE, 0x0F1CF8DC, 0xF9F2ECF0);
	r7 = D(r7, s0_1_2, 0x0102FAFD, 0x06ED0E0A, 0xFEFF00FC, 0xF9E716E8);
	r0 = D(r0, s0_2_0, 0xFD030003, 0x04F900F8, 0xFFFF0BFA, 0x0104FF00);
	r1 = D(r1, s0_2_0, 0x0801FF00, 0xEC08EE08, 0x0709EAE8, 0x0200FE01);
	r2 = D(r2, s0_2_0, 0x0F00FA0A, 0x070606F2, 0x0F000FFC, 0x02FDF0F1);
	r3 = D(r3, s0_2_0, 0x10030105, 0xF6F3FD02, 0x00E9FDF8, 0xF8030BD9);
	r4 = D(r4, s0_2_0, 0x010A0F15, 0x1CFC160F, 0x06F80A00, 0xFBF10403);
	r5 = D(r5, s0_2_0, 0xFA0702FD, 0x0603E6EB, 0xFC020008, 0x010405FF);
	r6 = D(r6, s0_2_0, 0x0403F501, 0xF6F5EC09, 0x0BFD070B, 0x03FCFAF8);
	r7 = D(r7, s0_2_0, 0xFFFD0906, 0xF6F1F5F9, 0x0303FCFB, 0xFC0BFAFB);
	r0 = D(r0, s0_2_1, 0x04FDFB00, 0x16050CFF, 0x01FEF707, 0x0205FAF7);
	r1 = D(r1, s0_2_1, 0x3801FB04, 0xF507F5FC, 0xFCEA1302, 0x0A020318);
	r2 = D(r2, s0_2_1, 0xFCFFFB13, 0xFC050809, 0xF6020CF9, 0x0214F500);
	r3 = D(r3, s0_2_1, 0xEE1F140D, 0xF2F1DAF2, 0x0EE9F00D, 0xFBF9EA25);
	r4 = D(r4, s0_2_1, 0xFAE507FB, 0xFA0F13FF, 0xFA01F827, 0x03FF0124);
	r5 = D(r5, s0_2_1, 0xFA050100, 0xFA071106, 0x01080703, 0xFF0204FC);
	r6 = D(r6, s0_2_1, 0xF8E10EFD, 0x16FDFC00, 0x0110020A, 0xFDF8F10A);
	r7 = D(r7, s0_2_1, 0xF5FEF300, 0x0CE2110D, 0xFB050403, 0xFB0FF909);
	r0 = D(r0, s0_2_2, 0x02070406, 0x0100FDF6, 0x04000AFC, 0x0A0805FE);
	r1 = D(r1, s0_2_2, 0x24FFFF03, 0xF60E06FD, 0x02E00015, 0x100C0F0F);
	r2 = D(r2, s0_2_2, 0x0FFA000F, 0x04FF08FA, 0xFAECFEE4, 0x0A01F2FC);
	r3 = D(r3, s0_2_2, 0xF41BFF12, 0x06FC09FF, 0xF5D80414, 0x042400D9);
	r4 = D(r4, s0_2_2, 0x06010202, 0xF81BFD06, 0xEFFF00E7, 0x03FDFCF9);
	r5 = D(r5, s0_2_2, 0x0001FFFB, 0xF90000F7, 0xEF08F504, 0x0505FB01);
	r6 = D(r6, s0_2_2, 0x060305F3, 0xFD02FB05, 0xF5EC0D01, 0xFAFC0EFF);
	r7 = D(r7, s0_2_2, 0x0101FF07, 0x0F0206FF, 0x080105FE, 0x0912D2F3);
	r0 = D(r0, s1_0_0, 0x0301FCFD, 0xEEF905FE, 0x08ED08F6, 0x030A0206);
	r1 = D(r1, s1_0_0, 0x03030400, 0xFC080503, 0x0B15F104, 0x06F314EE);
	r2 = D(r2, s1_0_0, 0xEFB5FE23, 0xFC02FE09, 0xF6F007F6, 0xF7F5F700);
	r3 = D(r3, s1_0_0, 0x2E18FEF3, 0xF8FFFC06, 0x002AC108, 0xE51619F8);
	r4 = D(r4, s1_0_0, 0xEDF90FF3, 0x480E1AD2, 0x0BEEFF2A, 0xF3FFFFF2);
	r5 = D(r5, s1_0_0, 0xEFF80204, 0x060C03FF, 0x01F7000E, 0xFB09FA04);
	r6 = D(r6, s1_0_0, 0xFE0EF400, 0xEE0EF508, 0xFEFB15FE, 0xE9EBF306);
	r7 = D(r7, s1_0_0, 0xF8F4F70F, 0xF7F510FA, 0x120D0400, 0x03FF21EC);
	r0 = D(r0, s1_0_1, 0x07FDFFF9, 0x05F407FC, 0x000A05FC, 0x0B09FD07);
	r1 = D(r1, s1_0_1, 0x01FFF701, 0x0F08FE0F, 0x1CF5ED00, 0x272106CA);
	r2 = D(r2, s1_0_1, 0xFFE9FF20, 0xF51406FD, 0xFEFD0A0B, 0x0102F1FB);
	r3 = D(r3, s1_0_1, 0x1108FF0D, 0xEF01061A, 0xF50EE919, 0xF9E60702);
	r4 = D(r4, s1_0_1, 0x03FCFD00, 0x0A0C2EC9, 0x2304F4FC, 0x17F7FDE2);
	r5 = D(r5, s1_0_1, 0x0CF00BF1, 0x02040018, 0x0BF4F708, 0x071107FA);
	r6 = D(r6, s1_0_1, 0xFA14FDFB, 0xF41AF308, 0x141E1A04, 0x0208F125);
	r7 = D(r7, s1_0_1, 0x0701FC1B, 0x01F7FEF1, 0x050AFFF0, 0xDCE4E7F8);
	r0 = D(r0, s1_0_2, 0x03010000, 0xE0F3040C, 0x03E8FFCF, 0x06050019);
	r1 = D(r1, s1_0_2, 0x130701FF, 0xF601050A, 0xE6EDDAEB, 0x12F310EC);
	r2 = D(r2, s1_0_2, 0xEDE80E06, 0x0CFAD999, 0x1DFEFF12, 0xFEFCF6FB);
	r3 = D(r3, s1_0_2, 0x01F1010F, 0xFEF9F811, 0xFC0DF211, 0x33F401F9);
	r4 = D(r4, s1_0_2, 0x05FEF1FD, 0x08ED12D1, 0x30F6DBE9, 0x080D06F1);
	r5 = D(r5, s1_0_2, 0x18FF01F9, 0x10040604, 0xFB0E0105, 0xFDF4FEEE);
	r6 = D(r6, s1_0_2, 0xE3160105, 0x05FCE109, 0xFFECF6FD, 0xF902EE04);
	r7 = D(r7, s1_0_2, 0x0304FC0B, 0x0406F3F5, 0xF4F700DD, 0xD81B3BF5);
	r0 = D(r0, s1_1_0, 0x090E0600, 0xF5FDF9F6, 0x11F71501, 0xFCFBFF01);
	r1 = D(r1, s1_1_0, 0x0B02F901, 0x0BF70C0C, 0x25121508, 0xEF10DAE8);
	r2 = D(r2, s1_1_0, 0x29100906, 0x01F20808, 0xF704FBF1, 0xF2010104);
	r3 = D(r3, s1_1_0, 0x181006F6, 0xEB01F3ED, 0xF615A509, 0x350A0C0D);
	r4 = D(r4, s1_1_0, 0x2E0EFDFB, 0x29F30CD8, 0x2114F0EC, 0x0B01E7F5);
	r5 = D(r5, s1_1_0, 0x010808FF, 0x05F901FA, 0x0C0E0509, 0x0F08FB0A);
	r6 = D(r6, s1_1_0, 0xFB001A19, 0x0029FBF4, 0x02F80A00, 0xFD08F704);
	r7 = D(r7, s1_1_0, 0x01FDF80C, 0x0330E5EE, 0xFAFAFE01, 0x1C0A0C04);
	r0 = D(r0, s1_1_1, 0x1C030EFE, 0xF60BE9E8, 0xEA08FB15, 0xF4FCF2FE);
	r1 = D(r1, s1_1_1, 0xEF0CFF0E, 0x1211FCFF, 0xF8C8041E, 0x38281281);
	r2 = D(r2, s1_1_1, 0x10FAEC25, 0xF7074FF8, 0xFE192DD0, 0x03F50FF2);
	r3 = D(r3, s1_1_1, 0x2C12218D, 0xEE13FCC2, 0x0214D0E8, 0xF900E63E);
	r4 = D(r4, s1_1_1, 0xEA071B1D, 0x0C81F2C9, 0x0ED3B3D2, 0xFAF710AA);
	r5 = D(r5, s1_1_1, 0xEEF41BE7, 0x000707F9, 0x08E91804, 0x02E9EFFA);
	r6 = D(r6, s1_1_1, 0x0BD4F7EB, 0xDEFC1BFF, 0x090B0DFE, 0x0901FFEA);
	r7 = D(r7, s1_1_1, 0x17FE0B06, 0xF4F6F303, 0xFFE60000, 0xFEEB0729);
	r0 = D(r0, s1_1_2, 0x00FB0018, 0xEDFF010D, 0x0A10FA23, 0x10FF0A2E);
	r1 = D(r1, s1_1_2, 0x09F9F90D, 0xF90402E5, 0x81059B1D, 0xF9F8F7C3);
	r2 = D(r2, s1_1_2, 0xF4F0ED0B, 0x180B10A8, 0x1BFFF6B7, 0x0103FDF5);
	r3 = D(r3, s1_1_2, 0x2B181D83, 0xF00008ED, 0x08FAF6F5, 0x41020E3B);
	r4 = D(r4, s1_1_2, 0x270EEFE8, 0x470B0014, 0xFBDB06D5, 0x1204F6FB);
	r5 = D(r5, s1_1_2, 0x140403C1, 0xFD03FD03, 0xFF061027, 0xF607FB81);
	r6 = D(r6, s1_1_2, 0x0607EF22, 0xEFFB0C0B, 0x1F13081C, 0x10010EF3);
	r7 = D(r7, s1_1_2, 0x0CFD00F7, 0x09FD0708, 0x03FDFB0C, 0x48F2EE2B);
	r0 = D(r0, s1_2_0, 0x0204FCFF, 0x07FDFA06, 0xFB12FE05, 0x00FF0203);
	r1 = D(r1, s1_2_0, 0x03FD0A00, 0xFEF80A02, 0xE5FDFCF8, 0x020DFB00);
	r2 = D(r2, s1_2_0, 0x0DF8120E, 0xFC12F400, 0xFBFEF409, 0xF4F600F8);
	r3 = D(r3, s1_2_0, 0x53EC05F0, 0xF70EF60A, 0xF20CE2FE, 0x3BFE03FB);
	r4 = D(r4, s1_2_0, 0x27F8F701, 0x4D4A1131, 0xE115CAED, 0x0205FE02);
	r5 = D(r5, s1_2_0, 0x0DFF0400, 0xFBF9FFF4, 0xFEFC0700, 0xFE02F800);
	r6 = D(r6, s1_2_0, 0xEB17FADB, 0xEFED0AFB, 0xE3F705F8, 0xFB03FF06);
	r7 = D(r7, s1_2_0, 0xF605FD07, 0x0F19F5F8, 0x0702F800, 0x22F709F0);
	r0 = D(r0, s1_2_1, 0x14FDF4FB, 0x10EDF019, 0x0A050914, 0x010C0405);
	r1 = D(r1, s1_2_1, 0x05F903F8, 0x200518F5, 0x18FCE6FE, 0x1D0CE20A);
	r2 = D(r2, s1_2_1, 0xFEE405EF, 0x0801F804, 0xFEB7F71A, 0x191FF21F);
	r3 = D(r3, s1_2_1, 0x2A140AD3, 0xFEFF0E07, 0x14E4FEF5, 0x60162ACC);
	r4 = D(r4, s1_2_1, 0xEA03F3F8, 0xD6F8FD13, 0x020F15FD, 0x0A021305);
	r5 = D(r5, s1_2_1, 0x1008FA0C, 0x0B03F20D, 0xEFF1F9F0, 0x0202FF05);
	r6 = D(r6, s1_2_1, 0x0D130EC7, 0xEDFEF8EC, 0x18EE07EC, 0xFEFA10FB);
	r7 = D(r7, s1_2_1, 0xE7FB0DFC, 0x1F1CF2F2, 0x150A0302, 0xFB271CEE);
	r0 = D(r0, s1_2_2, 0x23FDFE03, 0xF1EAF019, 0xE303F4EB, 0xF312FAFE);
	r1 = D(r1, s1_2_2, 0x03F3F3F0, 0x031502EB, 0xEB20E403, 0xFCF80603);
	r2 = D(r2, s1_2_2, 0x03F605F8, 0xFF04F408, 0xF716FB0F, 0xF8030D16);
	r3 = D(r3, s1_2_2, 0x181700E9, 0xF907100A, 0xECE7E5F0, 0x1B211481);
	r4 = D(r4, s1_2_2, 0x2DE517FD, 0x1E0209EE, 0xFBF8F9EE, 0xF414FAFB);
	r5 = D(r5, s1_2_2, 0x09FE0908, 0xF2FFFC0E, 0xFD0008F9, 0xF8FBFCED);
	r6 = D(r6, s1_2_2, 0xFBFAF3E8, 0x00F7FFF5, 0xF5FF07FF, 0x03FCEA04);
	r7 = D(r7, s1_2_2, 0x02FC00F5, 0x0CF1F0F3, 0xFFFFF4FC, 0xF4FF1FDF);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x0A0006FC, 0x07F1F20F, 0x0AF80505, 0x01F900FA);
	r1 = D(r1, s0_0_0, 0x03000902, 0xF1FFF1F8, 0x06E6070C, 0xFF02FB0B);
	r2 = D(r2, s0_0_0, 0x24F00235, 0xEEFCEEF4, 0x00220FEF, 0x00FEF6FF);
	r3 = D(r3, s0_0_0, 0xE70C14F9, 0x020EFD01, 0x0D0AFCFB, 0x14FE0921);
	r4 = D(r4, s0_0_0, 0x0AFF1EE7, 0xE6FDC5F6, 0xF72DE426, 0xF9FFFC01);
	r5 = D(r5, s0_0_0, 0x09F5EF0C, 0x08020C02, 0x09051008, 0x050004FD);
	r6 = D(r6, s0_0_0, 0x0DFE0018, 0xFF0316F4, 0xF8ED10F4, 0x1A1C0D14);
	r7 = D(r7, s0_0_0, 0x080B0C17, 0xFBFFF009, 0xDBF8FFF9, 0xFFD107F9);
	r0 = D(r0, s0_0_1, 0x080509F8, 0x0800FFFF, 0xD300F413, 0x03FD1004);
	r1 = D(r1, s0_0_1, 0x05FEFB08, 0x000C010E, 0x1F07D6FC, 0xBD0E23FF);
	r2 = D(r2, s0_0_1, 0x151CF008, 0x81D9D7DE, 0x2DFF1A08, 0xF804FD06);
	r3 = D(r3, s0_0_1, 0x0A16EAF1, 0x1312150B, 0x2C03FF0C, 0xF003FB19);
	r4 = D(r4, s0_0_1, 0xDDDFFA1F, 0xF7031106, 0xFF03FBFE, 0xE2FDF609);
	r5 = D(r5, s0_0_1, 0xEAF2F30B, 0xF8FA0100, 0xF1F9FFF4, 0x0203FA08);
	r6 = D(r6, s0_0_1, 0x05F80AEB, 0x100AFEF1, 0x4A0A0906, 0x1D01FC03);
	r7 = D(r7, s0_0_1, 0x000C0504, 0xFB090603, 0x5000FC04, 0x10FDEA0F);
	r0 = D(r0, s0_0_2, 0xFE000900, 0x1F000E0E, 0xF50AF2FC, 0xFEFE0BF7);
	r1 = D(r1, s0_0_2, 0x02060305, 0xFE0602FE, 0x560028EA, 0xE8091000);
	r2 = D(r2, s0_0_2, 0xFA0BFBFB, 0x01FFF1FA, 0x0C0C0F05, 0x1F03100D);
	r3 = D(r3, s0_0_2, 0x27251D07, 0xFC0C0A09, 0x16FCF70E, 0xEF00F403);
	r4 = D(r4, s0_0_2, 0x5309F5EA, 0x430727FE, 0x0BF5020A, 0xF7F90009);
	r5 = D(r5, s0_0_2, 0xF4F9FD03, 0x0701F600, 0x0501FF01, 0xFE000306);
	r6 = D(r6, s0_0_2, 0x33071A13, 0x1D0401F2, 0xFD0712FB, 0x060305FE);
	r7 = D(r7, s0_0_2, 0xF5030405, 0x10FB05FE, 0x0200FE00, 0x12E7180B);
	r0 = D(r0, s0_1_0, 0xF6FF0108, 0x00EF02F3, 0x14F0060D, 0xFAFAEEF8);
	r1 = D(r1, s0_1_0, 0x050AF1FD, 0x17F50AFE, 0xF5F9F117, 0x08FC0307);
	r2 = D(r2, s0_1_0, 0x120C1B1D, 0xF5FB0D12, 0xF2E720E9, 0xE3010C0D);
	r3 = D(r3, s0_1_0, 0x1917FB06, 0x0BF70BFE, 0xFA0C1FF2, 0xE4041623);
	r4 = D(r4, s0_1_0, 0x10EF10FB, 0xF12C0E14, 0x31400F1B, 0x0E050C0B);
	r5 = D(r5, s0_1_0, 0x1DF9F3FA, 0x120C00EC, 0xE7FF0308, 0xFB020102);
	r6 = D(r6, s0_1_0, 0xE523EE1F, 0x11031BED, 0xD6F5F104, 0xF8FDF704);
	r7 = D(r7, s0_1_0, 0x010514FD, 0x2FF8CC0E, 0xFC0EFFFE, 0xCE030817);
	r0 = D(r0, s0_1_1, 0xFFFC110F, 0x14F31701, 0xE808FA05, 0xF709F510);
	r1 = D(r1, s0_1_1, 0x0F09E808, 0x110BFFFB, 0x0609E712, 0xFFF7FDFB);
	r2 = D(r2, s0_1_1, 0xEDEE1117, 0xF81718F9, 0x49F7E6FB, 0xDFF918F9);
	r3 = D(r3, s0_1_1, 0xD733F6EA, 0x050BEAED, 0x240B180B, 0xCB02C8FD);
	r4 = D(r4, s0_1_1, 0xF7DF08FD, 0xDB07FB12, 0xEA27F014, 0xED140A16);
	r5 = D(r5, s0_1_1, 0x1CF1FC0C, 0x200705FB, 0x09FE0F13, 0xFBEF1D0C);
	r6 = D(r6, s0_1_1, 0xF0151919, 0xED090AF8, 0xFFEAE315, 0xE50FFF0C);
	r7 = D(r7, s0_1_1, 0xFAFD21F6, 0x2A1FFD03, 0x0209F601, 0xE626F226);
	r0 = D(r0, s0_1_2, 0xFC01100E, 0x1BFA0402, 0x3615EDED, 0xF600FAFF);
	r1 = D(r1, s0_1_2, 0x0004F600, 0xFFF007F8, 0x1EEEE7E8, 0xCF090B14);
	r2 = D(r2, s0_1_2, 0x0310120F, 0xFFF70113, 0x00F3F5F5, 0xFA08F3FF);
	r3 = D(r3, s0_1_2, 0xD1F5FDFB, 0x08030AF0, 0x100DF601, 0xF61BDFDE);
	r4 = D(r4, s0_1_2, 0x0BFAFCF7, 0xCB01F906, 0x0A04FF27, 0x010C05F9);
	r5 = D(r5, s0_1_2, 0xF9FC0707, 0x0EFCFD03, 0xE9000DEF, 0x07FB1303);
	r6 = D(r6, s0_1_2, 0xFDFBF4E7, 0xFCF4E908, 0x03FBF914, 0x0CFBECF2);
	r7 = D(r7, s0_1_2, 0xF4FF0AF7, 0xEF0CF50D, 0x02FB0102, 0x0900F1DD);
	r0 = D(r0, s0_2_0, 0x050200FB, 0x040A0DF9, 0x01F7FE14, 0xF9FD0005);
	r1 = D(r1, s0_2_0, 0x000009F9, 0x15EAF5FB, 0x1D0E0505, 0x05062707);
	r2 = D(r2, s0_2_0, 0x06050408, 0xF6020A0C, 0xFD10F301, 0x1B1E0FEE);
	r3 = D(r3, s0_2_0, 0xF706F40C, 0x090A1008, 0x0D06F820, 0x021BF2F7);
	r4 = D(r4, s0_2_0, 0xEF0AF5FA, 0xE123C356, 0x0905F7F7, 0xFA160015);
	r5 = D(r5, s0_2_0, 0xFB0203FF, 0x19FE16F6, 0xF801020F, 0xFC06FCFD);
	r6 = D(r6, s0_2_0, 0x0FFFFFE1, 0x18FA07F3, 0xF00F00F4, 0x0FFDFFF7);
	r7 = D(r7, s0_2_0, 0xF500FB02, 0x08F319F3, 0x06FC0201, 0xF502F6FF);
	r0 = D(r0, s0_2_1, 0x02FE0AF5, 0xF3EFFE02, 0x01DD0CEA, 0x08FB0703);
	r1 = D(r1, s0_2_1, 0xFE0A01F9, 0x0EE7FD12, 0xE12100F4, 0xFB020F0A);
	r2 = D(r2, s0_2_1, 0x0319F901, 0xF8FD0014, 0xF113E6FE, 0x14FCF602);
	r3 = D(r3, s0_2_1, 0xE8F5E432, 0x0AF121FB, 0x141221F5, 0xECF30FC8);
	r4 = D(r4, s0_2_1, 0xEB080111, 0xF407F9F3, 0x271624FB, 0x0B06FAF7);
	r5 = D(r5, s0_2_1, 0xFBF3040E, 0xF40D0406, 0x0117F407, 0xF900090F);
	r6 = D(r6, s0_2_1, 0x05120EFE, 0x03FC0C02, 0xF0E9060F, 0x12F80BF2);
	r7 = D(r7, s0_2_1, 0x090307F8, 0xF10500EE, 0x000008FF, 0x32F7EAE4);
	r0 = D(r0, s0_2_2, 0xFEFF03FF, 0x01FEF4FA, 0xE1F9F708, 0xFC050DFC);
	r1 = D(r1, s0_2_2, 0x0108F9FF, 0x02FFF9F0, 0xFAE6F024, 0xDE0908FD);
	r2 = D(r2, s0_2_2, 0x0B100407, 0xF31009F4, 0x07EFFB11, 0x050507E7);
	r3 = D(r3, s0_2_2, 0xE310EC17, 0xFA27EE08, 0x1E00F6FB, 0xF6E41211);
	r4 = D(r4, s0_2_2, 0xF110FF0E, 0x12140CFB, 0xF7160A1A, 0x0F0502FB);
	r5 = D(r5, s0_2_2, 0x0001FEFE, 0x0400F2F5, 0x120A0205, 0x07FC0DF6);
	r6 = D(r6, s0_2_2, 0xEFE21701, 0x13F80207, 0xE60AF6FD, 0xEFF0F6FD);
	r7 = D(r7, s0_2_2, 0x00FE0908, 0x0AFC0701, 0xF9FDFEFC, 0x06BC20F1);
	r0 = D(r0, s1_0_0, 0xFE050300, 0xF5F1F9F5, 0x1516FB13, 0xFCFDFDF6);
	r1 = D(r1, s1_0_0, 0x0105F704, 0xFCEBFB04, 0xF61203FA, 0xED2F041F);
	r2 = D(r2, s1_0_0, 0xD41FF90C, 0x0309EEF9, 0x0DFD0219, 0xF6D9FBF1);
	r3 = D(r3, s1_0_0, 0x0631040E, 0x07E00FF6, 0xF4F1E4EA, 0x0006F6FD);
	r4 = D(r4, s1_0_0, 0x1B17191D, 0xDB081A15, 0x9FF2DFBE, 0x02E90510);
	r5 = D(r5, s1_0_0, 0x01FE02F9, 0xF10EF3FE, 0x07F9FEF4, 0xFAFB0003);
	r6 = D(r6, s1_0_0, 0x0E2906FE, 0xFE01F8E1, 0x12F8FC04, 0x02EEEA07);
	r7 = D(r7, s1_0_0, 0x03FCEBF5, 0xF1DBF212, 0xFDFE070E, 0xF0F0101C);
	r0 = D(r0, s1_0_1, 0x0B01040D, 0xF3F3FB02, 0xD61411ED, 0xFE0BEEF7);
	r1 = D(r1, s1_0_1, 0xF419F802, 0x1811FAFF, 0x110EFD13, 0x02D4E000);
	r2 = D(r2, s1_0_1, 0xC81602E1, 0xF91DFB03, 0xD7F427EF, 0x03E9FF06);
	r3 = D(r3, s1_0_1, 0x321F1B18, 0x0121F4F4, 0xF81CE708, 0xAC11FDE9);
	r4 = D(r4, s1_0_1, 0xD006EADE, 0x322DFDE6, 0x0A090AED, 0xF6EE0602);
	r5 = D(r5, s1_0_1, 0xFE070802, 0xFA04FA0B, 0x00131A0A, 0xF32A0008);
	r6 = D(r6, s1_0_1, 0xFB2D02FE, 0xF2FCE907, 0x000D18F7, 0x0109EFF8);
	r7 = D(r7, s1_0_1, 0xF9FAE80D, 0xF714FBF4, 0x0C140CFB, 0x2C0725FF);
	r0 = D(r0, s1_0_2, 0xFA03F3FE, 0x0EF6E8F4, 0x10030515, 0x07F5FB0D);
	r1 = D(r1, s1_0_2, 0x0511F805, 0x05FD00F7, 0xEB1ACAE3, 0xEF251AFD);
	r2 = D(r2, s1_0_2, 0x19040011, 0x11171BDB, 0xF428F002, 0xF20EFEF8);
	r3 = D(r3, s1_0_2, 0xEF07F2F9, 0x0912FD12, 0x042C0607, 0xC1FDF0EF);
	r4 = D(r4, s1_0_2, 0x2907FE03, 0x092105FD, 0x41230702, 0x0901F704);
	r5 = D(r5, s1_0_2, 0xF9020704, 0x08FA08FD, 0xF8240400, 0x0AF205FE);
	r6 = D(r6, s1_0_2, 0xF3ECFFFC, 0xFFF5E0FE, 0x2B05EA00, 0x000103FD);
	r7 = D(r7, s1_0_2, 0xF603FE03, 0xF810FC03, 0x05FDFCFD, 0xDAED33D6);
	r0 = D(r0, s1_1_0, 0xF90C0EFE, 0xFBF30DFC, 0x27F3F80D, 0x090BFD01);
	r1 = D(r1, s1_1_0, 0x0E150EFD, 0x13D60309, 0xEA031503, 0xF2E6E9EE);
	r2 = D(r2, s1_1_0, 0x1218280B, 0xEAEDDE0A, 0x0C26FA0C, 0xEA30FC00);
	r3 = D(r3, s1_1_0, 0xD9190417, 0x080D0AF8, 0xFA2B00D0, 0xE702EDF7);
	r4 = D(r4, s1_1_0, 0x15E00204, 0x01043D1B, 0x240CF83F, 0xF0091324);
	r5 = D(r5, s1_1_0, 0xF5E505EE, 0xFDE4F608, 0xF9F5FB02, 0x0DFD00FA);
	r6 = D(r6, s1_1_0, 0xF8DD13E9, 0x091C10F0, 0xD8F0FB14, 0xEAF4FDDC);
	r7 = D(r7, s1_1_0, 0x08FF0200, 0xF7240FA4, 0xF304EEFA, 0xEBF5FF13);
	r0 = D(r0, s1_1_1, 0x0DF4F4D8, 0x2F0724FE, 0xD5381FCC, 0xFC1DFA05);
	r1 = D(r1, s1_1_1, 0x06060C28, 0x210FEC1B, 0x0425EFC2, 0x0A0C01DD);
	r2 = D(r2, s1_1_1, 0x1532FCF6, 0xDE15F5E2, 0x02022D1C, 0xF9E8F1DA);
	r3 = D(r3, s1_1_1, 0xF6A319B5, 0xFB2CFA0F, 0xF326E20F, 0x012600AE);
	r4 = D(r4, s1_1_1, 0xECF304F4, 0x1FC7D1C7, 0xEF301515, 0xFD0A07CB);
	r5 = D(r5, s1_1_1, 0x100B021C, 0xF5140615, 0x19040201, 0x0413F634);
	r6 = D(r6, s1_1_1, 0xFFF2F5D2, 0x0DFD08FC, 0xF212E8C2, 0xE80209EB);
	r7 = D(r7, s1_1_1, 0x0D00040C, 0x050DF6FD, 0xF40B0409, 0x1B0E0BF6);
	r0 = D(r0, s1_1_2, 0xFC0604FA, 0xEC06EC03, 0x06FFEF2E, 0xF911000D);
	r1 = D(r1, s1_1_2, 0x020EFF0A, 0x01021300, 0x0C08E332, 0x130BFE10);
	r2 = D(r2, s1_1_2, 0x1020EC16, 0xF40D0A09, 0x0CF306F1, 0xE0F200F7);
	r3 = D(r3, s1_1_2, 0xC8CBFCEC, 0x0110EDF1, 0xFE0801F8, 0x07F610F1);
	r4 = D(r4, s1_1_2, 0xDA322D1A, 0xC509F1F4, 0xE11E14D7, 0x0516F501);
	r5 = D(r5, s1_1_2, 0xFD0408FC, 0xFAF703FA, 0x10060800, 0xF60901F8);
	r6 = D(r6, s1_1_2, 0x27180102, 0xFB051DEC, 0xEFF51507, 0x0B0E1DF4);
	r7 = D(r7, s1_1_2, 0x06050800, 0xFA0B0101, 0x04F30303, 0x18DE0CF1);
	r0 = D(r0, s1_2_0, 0x0B06FA05, 0xF2F0F300, 0xF8E2E3F6, 0xF40004FF);
	r1 = D(r1, s1_2_0, 0xFDFEFC03, 0xEAD7FFF2, 0xDF0904FD, 0x0A2F1104);
	r2 = D(r2, s1_2_0, 0xE515E105, 0xF9EFEF03, 0x0617D702, 0x22F21E28);
	r3 = D(r3, s1_2_0, 0xD90C21FF, 0xF61913E6, 0x09541E03, 0xF4D6120B);
	r4 = D(r4, s1_2_0, 0xFC1504FC, 0xC46AF6C6, 0x1E4402FE, 0xF4CAF6F9);
	r5 = D(r5, s1_2_0, 0x02F6F6F7, 0x17EF0C10, 0xFCF5FC00, 0xF2F100FD);
	r6 = D(r6, s1_2_0, 0x112EF508, 0x08040208, 0xFAEF0507, 0x04101302);
	r7 = D(r7, s1_2_0, 0x04C7F6F5, 0x01D91AD7, 0xFBFB0106, 0x16030E25);
	r0 = D(r0, s1_2_1, 0xF81200FD, 0x1118F8FD, 0x23022400, 0x0907050B);
	r1 = D(r1, s1_2_1, 0x010F0405, 0x05EA2207, 0x140E1DFE, 0xFEFC06F9);
	r2 = D(r2, s1_2_1, 0x0AFAF714, 0xF825FD06, 0x023FFEF5, 0x250809FB);
	r3 = D(r3, s1_2_1, 0xE7E2F7ED, 0xFC1A13F6, 0x0A2FFF02, 0x062AF024);
	r4 = D(r4, s1_2_1, 0x121BE309, 0xD7F4E7C4, 0xFDC914C7, 0x0EEFF7F5);
	r5 = D(r5, s1_2_1, 0xF80D0EFB, 0x060EF203, 0xEE15EB01, 0x07630AF5);
	r6 = D(r6, s1_2_1, 0xED210409, 0x17F90915, 0x043308FB, 0x00181101);
	r7 = D(r7, s1_2_1, 0x02F0F9FC, 0xF608F71D, 0x040C0C01, 0x02209CEC);
	r0 = D(r0, s1_2_2, 0x010A02F9, 0xFFFCFD0A, 0xF7000808, 0x0A02F704);
	r1 = D(r1, s1_2_2, 0x03FAFA00, 0xFDF9FC05, 0x022010FE, 0xFBFF06F8);
	r2 = D(r2, s1_2_2, 0x0704EDF7, 0x001519F5, 0xFA0C2506, 0x05FAFF08);
	r3 = D(r3, s1_2_2, 0xE41506E9, 0xF6FEF601, 0x021B12FD, 0xECF705E6);
	r4 = D(r4, s1_2_2, 0xF21607F1, 0x120BF2E7, 0x24030511, 0x0C16F5F7);
	r5 = D(r5, s1_2_2, 0x040505FF, 0xF3F00C0A, 0x0117FE00, 0x0212F6F0);
	r6 = D(r6, s1_2_2, 0xEEF4FCFB, 0xF5000AF9, 0xF3F6FCFC, 0x00F6FC0D);
	r7 = D(r7, s1_2_2, 0x05FF05F6, 0x0A1D0103, 0xFB060101, 0xFD490AFE);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF07FB08, 0xFAF7F709, 0x2503FFF7, 0xF902FA01);
	r1 = D(r1, s0_0_0, 0xFF07FF02, 0x0EFE03FD, 0xEEF71D1D, 0xFD10F1E7);
	r2 = D(r2, s0_0_0, 0xFBD9DFE8, 0x0910F8F4, 0xEE2402E0, 0x03FBEB06);
	r3 = D(r3, s0_0_0, 0x0E01ED16, 0xF9F4E913, 0xEBF0251A, 0x09F31DF7);
	r4 = D(r4, s0_0_0, 0x02100F07, 0xEE26BBFF, 0xE61527F6, 0x0C0EFBFF);
	r5 = D(r5, s0_0_0, 0x000408FA, 0x07FE0CEE, 0xF9F60AFA, 0xFF08FD03);
	r6 = D(r6, s0_0_0, 0xD3EE1D10, 0x11FF1A04, 0xFEF2FAFA, 0xFCF50701);
	r7 = D(r7, s0_0_0, 0xFDF1FBFC, 0xF3F9FA03, 0xFFFFF4FF, 0x030BDBF7);
	r0 = D(r0, s0_0_1, 0x0305FAF8, 0x05FEF0F2, 0xEFFE01F7, 0x02F60002);
	r1 = D(r1, s0_0_1, 0xFFFE0708, 0x060405FD, 0xCBF22C0B, 0x1F0DF217);
	r2 = D(r2, s0_0_1, 0xF6C2FAB3, 0x0A2A0620, 0x130FF901, 0xFAFF0702);
	r3 = D(r3, s0_0_1, 0xEE1C061C, 0x0DF700F6, 0xF7DE09FF, 0x0BF619F2);
	r4 = D(r4, s0_0_1, 0xF30AF610, 0x0F0EFD06, 0xFF2BFAFC, 0x0DFF13FA);
	r5 = D(r5, s0_0_1, 0xEF03FD07, 0xF8F1FC0E, 0xFF060004, 0x07070809);
	r6 = D(r6, s0_0_1, 0xF901F911, 0x0F0204E9, 0xE4E2040C, 0xF4F91FFA);
	r7 = D(r7, s0_0_1, 0x06F6FE03, 0xEDF7FDFF, 0x01001514, 0x43F40F06);
	r0 = D(r0, s0_0_2, 0xFEFCFCF9, 0xFBF6FAFF, 0x051802FD, 0x08F40101);
	r1 = D(r1, s0_0_2, 0x0809F8FF, 0x0B0208F2, 0x010D1607, 0x0906060F);
	r2 = D(r2, s0_0_2, 0xECFBF6EA, 0x06FCF11C, 0x1F2F0CDE, 0xF0FCFA03);
	r3 = D(r3, s0_0_2, 0xF5EAF9F8, 0x04F20002, 0xF80F00EF, 0x211A03E5);
	r4 = D(r4, s0_0_2, 0xF50FF208, 0x09D10D07, 0x1B04010B, 0x01F70603);
	r5 = D(r5, s0_0_2, 0x04FF01F7, 0x010508FD, 0x050D07F8, 0xF9FEF9FF);
	r6 = D(r6, s0_0_2, 0xF2ED0307, 0x08160606, 0xFA100713, 0xFE0D08FF);
	r7 = D(r7, s0_0_2, 0x04FB0402, 0x0601FE01, 0xFCF8FA03, 0x21E309F2);
	r0 = D(r0, s0_1_0, 0xF8FCE7FD, 0x0500F111, 0x06EEFD03, 0x0907F701);
	r1 = D(r1, s0_1_0, 0x030504FF, 0x0204F506, 0xFAEE0911, 0xDBFCD3F1);
	r2 = D(r2, s0_1_0, 0xECFFD4CA, 0x08FB0AF3, 0xF0EE280B, 0x150B1AED);
	r3 = D(r3, s0_1_0, 0x0112D40B, 0x2304F10A, 0xEBF73C22, 0x070402F7);
	r4 = D(r4, s0_1_0, 0xFEF2E913, 0x3708BAD6, 0x0D02360A, 0x1C0B0EF3);
	r5 = D(r5, s0_1_0, 0x0A0802F9, 0x080702FA, 0xF602F903, 0xF900FE09);
	r6 = D(r6, s0_1_0, 0xE70E20F3, 0xE10CFE05, 0xFF0905F5, 0xEB0713FF);
	r7 = D(r7, s0_1_0, 0xFA02FFF5, 0x181A040B, 0x02F913FC, 0xE0FFFBD5);
	r0 = D(r0, s0_1_1, 0x020AF009, 0xFA0F0200, 0xF0E7F4F0, 0x090006FA);
	r1 = D(r1, s0_1_1, 0x07F91201, 0x0F07031C, 0x10FCFD06, 0x1D01E92C);
	r2 = D(r2, s0_1_1, 0x06CF1FD3, 0x09F45323, 0xEE03063A, 0x0BFEF60A);
	r3 = D(r3, s0_1_1, 0xF70CE3ED, 0x0E1AF31E, 0x110816ED, 0xE9FC01FA);
	r4 = D(r4, s0_1_1, 0x07FD36F6, 0x0DD5E1DA, 0xEADC5109, 0xEEF70704);
	r5 = D(r5, s0_1_1, 0x07F8F8EE, 0xFB0BFE01, 0xFFDC0CEA, 0x0CF5C9F5);
	r6 = D(r6, s0_1_1, 0x2C09FD0F, 0xF7E91403, 0x1703FDFD, 0xFA1415FB);
	r7 = D(r7, s0_1_1, 0x030C0FFB, 0x050CFE1B, 0x0B0E0A0A, 0xFC1916F3);
	r0 = D(r0, s0_1_2, 0x0909F700, 0x01F70301, 0x1611ED03, 0x09080300);
	r1 = D(r1, s0_1_2, 0xF6FBEFE7, 0x030004FA, 0xF91BFA22, 0x130902F8);
	r2 = D(r2, s0_1_2, 0xEAF908FA, 0x05FDFCFC, 0x020D0901, 0x0404FD06);
	r3 = D(r3, s0_1_2, 0xE7FFD8EF, 0xFC11F7FC, 0x050A0109, 0xE504F5E9);
	r4 = D(r4, s0_1_2, 0x080BE70A, 0xF8D6EF14, 0xFFE01E06, 0x07F9F9FB);
	r5 = D(r5, s0_1_2, 0x0C02F8F8, 0x0FEC0304, 0xFB020EF7, 0x00FE08FC);
	r6 = D(r6, s0_1_2, 0x0F25FBF9, 0xF3F20207, 0xF602F0F7, 0x0F10F111);
	r7 = D(r7, s0_1_2, 0xF610FDFB, 0xFD0806F5, 0xFE020B0C, 0xE80EF903);
	r0 = D(r0, s0_2_0, 0x050001FE, 0x060912F3, 0x0BFBD806, 0x0000FEFE);
	r1 = D(r1, s0_2_0, 0x10091204, 0x06FAFB09, 0x080C03EA, 0x01021C1C);
	r2 = D(r2, s0_2_0, 0x0EFF080D, 0xFA0D09FB, 0xF6F60C11, 0xEA07FCEE);
	r3 = D(r3, s0_2_0, 0xEDFAE9E5, 0xFD07FA01, 0x000D0A12, 0xF40C0FF7);
	r4 = D(r4, s0_2_0, 0x13F31AFD, 0xF1201107, 0xF601FC0E, 0xE8FFF6FE);
	r5 = D(r5, s0_2_0, 0xFE07FEF7, 0x110C040D, 0x05F8FF07, 0x04FA06FD);
	r6 = D(r6, s0_2_0, 0xF8FC0600, 0x2001F90E, 0xEB1304ED, 0xFCFB0C00);
	r7 = D(r7, s0_2_0, 0xF6FEF702, 0x02F92025, 0x030509FF, 0xF10311FB);
	r0 = D(r0, s0_2_1, 0x0904F20D, 0x0A071106, 0xE4E211EB, 0x0805F70A);
	r1 = D(r1, s0_2_1, 0xFD020708, 0x0DF3FBFF, 0x2406020D, 0xF6F9FEEE);
	r2 = D(r2, s0_2_1, 0x1B11F7FC, 0x0EF80705, 0x0AEC0E10, 0xEDDD0ADE);
	r3 = D(r3, s0_2_1, 0xCDF21D11, 0xE312DB02, 0xFB240C1C, 0xFFF21EC7);
	r4 = D(r4, s0_2_1, 0xF1FB1CF3, 0xDE25E02C, 0xECE03504, 0xEFFB0EFC);
	r5 = D(r5, s0_2_1, 0xFF01FD0B, 0xFBE80BF7, 0x0414F100, 0xF6FCF708);
	r6 = D(r6, s0_2_1, 0xF1FD0F18, 0x10130A11, 0x17121900, 0xF10314F3);
	r7 = D(r7, s0_2_1, 0x0112FEF9, 0xFAF4FB01, 0x01F80F08, 0x33F3FE04);
	r0 = D(r0, s0_2_2, 0xF6FDFD00, 0xF70E0BFE, 0xFC10F203, 0xFF030702);
	r1 = D(r1, s0_2_2, 0x050202FC, 0x04F202F3, 0xF5FF0CDE, 0x07F10608);
	r2 = D(r2, s0_2_2, 0x08F70107, 0x0E0A1309, 0xFAF4090B, 0xF4F2FC03);
	r3 = D(r3, s0_2_2, 0xF90DEE12, 0x18F8E810, 0x2009140C, 0xF2F0F5E9);
	r4 = D(r4, s0_2_2, 0x0C070212, 0xF7EBE30A, 0x0AE10703, 0xF5EC13F8);
	r5 = D(r5, s0_2_2, 0x00FE0207, 0x000C0FFE, 0xFDFD06F3, 0x0006F305);
	r6 = D(r6, s0_2_2, 0xEFE6F1FB, 0xFB02FD08, 0x18010909, 0xFAEFFFFC);
	r7 = D(r7, s0_2_2, 0x01FDF608, 0x11FE04FD, 0x000008FC, 0xCF0F0902);
	r0 = D(r0, s1_0_0, 0x05FB0805, 0xF518F313, 0xFF11EADA, 0xFCFEFFFF);
	r1 = D(r1, s1_0_0, 0x06FA02FB, 0x040AFDF3, 0xFFF10608, 0x12030506);
	r2 = D(r2, s1_0_0, 0x04C0AE0E, 0xFA1C0521, 0x0BFBD5F9, 0x020C0BFD);
	r3 = D(r3, s1_0_0, 0xE614222F, 0xEA10FBFF, 0x041902EE, 0x09EAEBE3);
	r4 = D(r4, s1_0_0, 0x0215FC0A, 0xE0085727, 0xC1182A01, 0x07FE0AE8);
	r5 = D(r5, s1_0_0, 0xF7FCFAFA, 0x08060305, 0x00F6F700, 0x03FB0801);
	r6 = D(r6, s1_0_0, 0x08F4E313, 0x1608070F, 0xF617F40A, 0xF80AE5EB);
	r7 = D(r7, s1_0_0, 0xFEF1F3F4, 0xFB05DFE8, 0xF709FC0C, 0x0219F81F);
	r0 = D(r0, s1_0_1, 0x110400FF, 0x09010004, 0x0905250C, 0x0001FD01);
	r1 = D(r1, s1_0_1, 0xFDFC1002, 0x0106F9EB, 0xE1F7DFEA, 0xE4F1FBFB);
	r2 = D(r2, s1_0_1, 0xFD00043A, 0xF91525E7, 0x13EB0C06, 0xF7FC0A05);
	r3 = D(r3, s1_0_1, 0xF9F409F5, 0x04E20305, 0x01EDF4F2, 0x2312E7F5);
	r4 = D(r4, s1_0_1, 0x02160B0F, 0x05F02CD3, 0xF5032FFE, 0xF3061101);
	r5 = D(r5, s1_0_1, 0x070A030D, 0xF70DFAF9, 0xFD04FF05, 0xFF041CF8);
	r6 = D(r6, s1_0_1, 0xF3F7E3E1, 0x000F11F1, 0x0CE61B0F, 0x0605EF08);
	r7 = D(r7, s1_0_1, 0xFCFFF408, 0xFDF91409, 0xFFEE06F5, 0x0DF7C5A8);
	r0 = D(r0, s1_0_2, 0x05FC0AF7, 0xFAFBEE03, 0x17FD0009, 0xF401FF06);
	r1 = D(r1, s1_0_2, 0x01000300, 0xF5FC01FB, 0x2E3A192A, 0xF10BF7F3);
	r2 = D(r2, s1_0_2, 0xE8F7E91B, 0xFD18F4F9, 0xFEEDF011, 0x0606F8FB);
	r3 = D(r3, s1_0_2, 0x0913FD0E, 0xF50A0BF4, 0xFBFE140F, 0x0DF90915);
	r4 = D(r4, s1_0_2, 0x0CF6D8D8, 0x0AFD05E8, 0xEEF7EFF8, 0x05FC0D04);
	r5 = D(r5, s1_0_2, 0xFAFFFCFE, 0xFFF4F901, 0xF801FF0E, 0xF90106EF);
	r6 = D(r6, s1_0_2, 0x0711EBDF, 0x08FCE80B, 0x170BEBD7, 0x02F704FB);
	r7 = D(r7, s1_0_2, 0xFC0207FD, 0x051308FD, 0x060601FC, 0xEBF01A1E);
	r0 = D(r0, s1_1_0, 0x08FB0B02, 0xF502FC1C, 0xFBF0ECEC, 0xFF030A09);
	r1 = D(r1, s1_1_0, 0xF60D1001, 0x130D020F, 0xF5FFFE1D, 0x0725EE05);
	r2 = D(r2, s1_1_0, 0xE31CF1EB, 0x14F7E903, 0x03030ADE, 0x0FF1FEEE);
	r3 = D(r3, s1_1_0, 0xE6FAE8EC, 0x0513FF09, 0xF00B0BF0, 0xDF14010B);
	r4 = D(r4, s1_1_0, 0x15E5F616, 0x14F4D5AB, 0xA6E7CBDC, 0xF1F0F2E8);
	r5 = D(r5, s1_1_0, 0x0FFC0104, 0x02FB0203, 0xFE011D03, 0xF20A031B);
	r6 = D(r6, s1_1_0, 0xEB272501, 0x040FFE03, 0xFFFFFFF7, 0xFB0308FB);
	r7 = D(r7, s1_1_0, 0x04F614FC, 0xFF211A17, 0x0B05F8FF, 0x0FD5D8ED);
	r0 = D(r0, s1_1_1, 0xEF0BFC37, 0x09F5F725, 0xF7FE1BF5, 0xFBFEFBFA);
	r1 = D(r1, s1_1_1, 0x1216FE81, 0xFB1A071E, 0xEFFF12D9, 0x121D2104);
	r2 = D(r2, s1_1_1, 0x2911FDFF, 0x0D173607, 0x0C191F81, 0x030AF814);
	r3 = D(r3, s1_1_1, 0xEDFE3C05, 0x0205E52F, 0x0605EEF7, 0x090032A7);
	r4 = D(r4, s1_1_1, 0x310DFCFB, 0xE5C2CA00, 0x81E1B215, 0xDE120312);
	r5 = D(r5, s1_1_1, 0x050714DC, 0x0E02EEE9, 0xFDECDEE7, 0x06FB96DB);
	r6 = D(r6, s1_1_1, 0xEDEAF70F, 0xF2F706FE, 0xA7190216, 0xFD131516);
	r7 = D(r7, s1_1_1, 0xFEF2EF0B, 0x0A040223, 0xF001F9F3, 0xF1160CE3);
	r0 = D(r0, s1_1_2, 0x05030209, 0x07EC06FA, 0x031CE0F6, 0x070901F8);
	r1 = D(r1, s1_1_2, 0xFF0911FF, 0x08FC120B, 0x190BF581, 0xF80CFDE7);
	r2 = D(r2, s1_1_2, 0xF7090DFA, 0x1910E6F4, 0x1AFE0907, 0xEDF8F7ED);
	r3 = D(r3, s1_1_2, 0x2526F7F3, 0xF2F6F8EF, 0x14FE010B, 0x09F0F111);
	r4 = D(r4, s1_1_2, 0xF0E112E9, 0xE5FAFF21, 0xD0F7F4F1, 0xEFF8E2F4);
	r5 = D(r5, s1_1_2, 0xFE070005, 0x01F50EF4, 0x05090A21, 0xE4FB16FB);
	r6 = D(r6, s1_1_2, 0x080FF9D9, 0x12091807, 0x10FB0F0D, 0x0201EBF0);
	r7 = D(r7, s1_1_2, 0xFB07FC02, 0x0009FFF3, 0x0FFE0001, 0x13D4079B);
	r0 = D(r0, s1_2_0, 0x00F9F301, 0x03F5EB14, 0xE30606FB, 0xFDFEFBFF);
	r1 = D(r1, s1_2_0, 0xF3FF010E, 0xF0FB05F2, 0xF9F9E9FB, 0x03FF0408);
	r2 = D(r2, s1_2_0, 0xFDEFE615, 0xF300FDFD, 0xEE0603EA, 0x0E0EEC02);
	r3 = D(r3, s1_2_0, 0x26F61FFC, 0x0DFF21EB, 0x00021200, 0xFEF71E11);
	r4 = D(r4, s1_2_0, 0xE117F916, 0xFA0E04FE, 0xE50913FB, 0x0F0110F6);
	r5 = D(r5, s1_2_0, 0xEBF7FCF7, 0x00F8F700, 0xE4F7FC06, 0x030404FC);
	r6 = D(r6, s1_2_0, 0xF4DA171D, 0xEB13F612, 0x1E11F5F6, 0xFB091AFF);
	r7 = D(r7, s1_2_0, 0xE5FF0CEC, 0xBFF41109, 0xFC00FF04, 0x071DE6FD);
	r0 = D(r0, s1_2_1, 0xF201FF0C, 0x030003FC, 0x06FB00F9, 0xFBF5FF0A);
	r1 = D(r1, s1_2_1, 0x0100F20A, 0x07F6190B, 0x03090909, 0xEA0001DD);
	r2 = D(r2, s1_2_1, 0xF61CF6EA, 0xFFEF03F9, 0xE315F7CB, 0x130EFAF6);
	r3 = D(r3, s1_2_1, 0x1300EEFE, 0x1B05EF2B, 0xE6FE0A1C, 0xADE5E0DD);
	r4 = D(r4, s1_2_1, 0x06010203, 0xF80C0CFA, 0x19071AD8, 0x181104FF);
	r5 = D(r5, s1_2_1, 0x0F09FFF9, 0xF3FFF6F9, 0xFB1001F7, 0x10090A06);
	r6 = D(r6, s1_2_1, 0x12F604EB, 0xDE07EC24, 0xDCF1E5F3, 0x00FA01E1);
	r7 = D(r7, s1_2_1, 0x0C03F4FB, 0x060EF027, 0xFBF40B01, 0xB5EF2415);
	r0 = D(r0, s1_2_2, 0xF703FD05, 0x06F81012, 0xF308F61D, 0x0102FFFC);
	r1 = D(r1, s1_2_2, 0xF9050EFF, 0x02FF10F7, 0xEEC10F07, 0xF013F101);
	r2 = D(r2, s1_2_2, 0x13D80F0B, 0xFCFF0B09, 0xEA1019FB, 0xE9F9101E);
	r3 = D(r3, s1_2_2, 0x02140B0E, 0xF9F6F4F5, 0xF6ED06E9, 0x1CF5250A);
	r4 = D(r4, s1_2_2, 0xEFF30C0A, 0x200CF1D3, 0xE50F04FA, 0x0A0E1BF3);
	r5 = D(r5, s1_2_2, 0x000C0304, 0x1AF40E00, 0x04F9F5EC, 0x07001702);
	r6 = D(r6, s1_2_2, 0x07090E08, 0xF4E8FC03, 0x09F0FC0B, 0xFE00FEFB);
	r7 = D(r7, s1_2_2, 0xF308F7FE, 0xF2F214F9, 0x06FFFF00, 0x2D1C170C);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-8.149e-03, 7.737e-03, -4.682e-03, 7.817e-03);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.476e-01, -1.023e-03, -1.203e-02, 5.815e-04);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-4.826e-03, -2.101e-03, -1.676e-02, 4.444e-04);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-2.130e-02, 5.459e-03, 5.204e-03, -2.614e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-9.979e-03, -1.845e-02, -8.823e-03, -7.709e-05);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.155e-03, 3.858e-03, -9.965e-03, -7.200e-04);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(1.005e-02, -1.819e-03, -2.542e-03, 6.838e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(1.144e-02, -5.751e-03, -5.817e-03, -2.948e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-TEST-conv3
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv2
//!BIND LUMA
//!SAVE conv3
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv2_pt;
			r = conv2_gather(p, 0);
			g = conv2_gather(p, 1);
			b = conv2_gather(p, 2);
			a = conv2_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x05FBFC04, 0xFE0200FF, 0x02FB2607, 0x07130314);
	r1 = D(r1, s0_0_0, 0xEC01FEFF, 0x25FC28FB, 0xFF01F8F9, 0x121115F7);
	r2 = D(r2, s0_0_0, 0x0CFE0CF6, 0x05FA01F2, 0x12F603EB, 0x0103F902);
	r3 = D(r3, s0_0_0, 0xFF06F611, 0xFBFCEFFB, 0x0808EF11, 0x1CF70601);
	r4 = D(r4, s0_0_0, 0x0301FF0D, 0xFC022106, 0xFBFDF2FD, 0x00FF01F5);
	r5 = D(r5, s0_0_0, 0xF50DF900, 0xFE020AF0, 0x0CF80907, 0x01FDFDF7);
	r6 = D(r6, s0_0_0, 0x01F00414, 0xF4FD00FF, 0xFEF8F0FA, 0x0907FCFC);
	r7 = D(r7, s0_0_0, 0xF7040003, 0x03F90BE6, 0xFDFCE8FB, 0x120B0804);
	r0 = D(r0, s0_0_1, 0xFF02F0F4, 0x040204F6, 0x00EE0208, 0xE91B09EC);
	r1 = D(r1, s0_0_1, 0x09EB18D5, 0x12E73CE2, 0x08FEF0F5, 0xFCD4FDC5);
	r2 = D(r2, s0_0_1, 0x0FF20DF1, 0x0CF70AF4, 0xFFF5FFF7, 0x0C00EF0B);
	r3 = D(r3, s0_0_1, 0x0019F2F4, 0xFFFC1105, 0x0B071AEB, 0xF3040E11);
	r4 = D(r4, s0_0_1, 0x05EC0919, 0xFCE50CEF, 0x080AF006, 0xF908FD08);
	r5 = D(r5, s0_0_1, 0x0517F8F0, 0x010500F2, 0xF30F12F9, 0xF9FF0210);
	r6 = D(r6, s0_0_1, 0xF400F51E, 0xF7FF11FA, 0x0BFE27E8, 0xFA0103E4);
	r7 = D(r7, s0_0_1, 0x0D0901F7, 0xE31EF41A, 0x04F3F50A, 0x0CFC00FE);
	r0 = D(r0, s0_0_2, 0xFEF70BFD, 0x02FF0500, 0xFEDA1305, 0x02F91809);
	r1 = D(r1, s0_0_2, 0xF10808E2, 0x12F21DEB, 0x05F305F4, 0xF4FC0BDB);
	r2 = D(r2, s0_0_2, 0x0500FF09, 0x0202FE00, 0xF809FA05, 0x1CF1F9EF);
	r3 = D(r3, s0_0_2, 0x03DE0DE8, 0x0302FAE5, 0x01EA14FE, 0x16B305DB);
	r4 = D(r4, s0_0_2, 0x06F31E18, 0x0702F8EF, 0x03EFF3F9, 0x0802EB03);
	r5 = D(r5, s0_0_2, 0xFAF711FC, 0x030BFF02, 0xFE0E07FC, 0x0005FF05);
	r6 = D(r6, s0_0_2, 0x0904E4F2, 0xFD0C0203, 0x0DEB13F7, 0x01FFFEEC);
	r7 = D(r7, s0_0_2, 0xF7F5F9FD, 0xF5FEF1F4, 0xFDFE02F9, 0xFD0900F6);
	r0 = D(r0, s0_1_0, 0xE4FF04EE, 0xEC030700, 0x1D06F107, 0xF9F8FA05);
	r1 = D(r1, s0_1_0, 0xDFF7F908, 0xD90502F5, 0x1EEBFBF6, 0xDD0E0B08);
	r2 = D(r2, s0_1_0, 0x1604090F, 0xFD0809F9, 0x150109FA, 0xFB0E0BEE);
	r3 = D(r3, s0_1_0, 0x00F4F010, 0x03C9F7FA, 0xDCF1FA15, 0xF1F20805);
	r4 = D(r4, s0_1_0, 0xFF0800EF, 0x12FE0B04, 0x05F3FB03, 0xF9EF1210);
	r5 = D(r5, s0_1_0, 0x12E2F008, 0x0FFDF8EB, 0x1C020310, 0x1000F403);
	r6 = D(r6, s0_1_0, 0xD8130718, 0x100806FB, 0x000C0502, 0xEF031AEC);
	r7 = D(r7, s0_1_0, 0xFC07FDFB, 0xF72FF501, 0xEBD9F80C, 0xF2E90EEF);
	r0 = D(r0, s0_1_1, 0x0307122C, 0x22080A12, 0xD4F6FCE8, 0xEBEEE4F7);
	r1 = D(r1, s0_1_1, 0xF3FFF127, 0x0BEFFDFE, 0xDA0015F1, 0xF0010907);
	r2 = D(r2, s0_1_1, 0x0000EF22, 0x18F21B33, 0x20090F09, 0x07F0FE3E);
	r3 = D(r3, s0_1_1, 0x0E081AE6, 0xD60D041D, 0xF202DBE2, 0x0EF0FC0A);
	r4 = D(r4, s0_1_1, 0x041D0A0D, 0xF9D530DE, 0xE80805F3, 0x0C03EE15);
	r5 = D(r5, s0_1_1, 0x19E2FED8, 0xEC10E88E, 0x040AFD0B, 0xFC15F3F2);
	r6 = D(r6, s0_1_1, 0xEEF1F0D0, 0xEEF6FCED, 0xEE20EC1E, 0x13F30B07);
	r7 = D(r7, s0_1_1, 0x310A0300, 0xF9D80396, 0xF0EE1A16, 0x04080120);
	r0 = D(r0, s0_1_2, 0xFD02F607, 0xFDF70802, 0x02FBF702, 0xFCF90312);
	r1 = D(r1, s0_1_2, 0x09FB09FE, 0xF609F1E3, 0x09E60AFF, 0x10EEFDE8);
	r2 = D(r2, s0_1_2, 0xFEF2F603, 0x0303F901, 0xFCF903FC, 0x1EFEF203);
	r3 = D(r3, s0_1_2, 0x0DA0F52E, 0x0113FEFF, 0xF3CE12E3, 0xEAF110E1);
	r4 = D(r4, s0_1_2, 0x0C1409E5, 0x03F3F2E8, 0xF6020F06, 0xFBF6EB0A);
	r5 = D(r5, s0_1_2, 0xF4F2E6F6, 0xFB04F702, 0xFE0704F9, 0x0401F80A);
	r6 = D(r6, s0_1_2, 0xFCFCFCFA, 0x000305FF, 0xF41BD7F9, 0xFDF2F9F9);
	r7 = D(r7, s0_1_2, 0x02000102, 0x0BFB160F, 0x07FCFFF1, 0xD936F426);
	r0 = D(r0, s0_2_0, 0x050508F7, 0x0402FCFF, 0x02F1FC04, 0x07FD0307);
	r1 = D(r1, s0_2_0, 0xFE03F605, 0x06F7FC03, 0xF60BFDFF, 0x0611FE01);
	r2 = D(r2, s0_2_0, 0xF900FA14, 0x01010404, 0x0B020702, 0x070C02F9);
	r3 = D(r3, s0_2_0, 0xF0FC00FE, 0xDDF6DC04, 0x10EB0200, 0xF5F60DFE);
	r4 = D(r4, s0_2_0, 0xFBEFF306, 0x030E0EFF, 0xFF08FE05, 0x00FB0E15);
	r5 = D(r5, s0_2_0, 0xEDF0E7FD, 0xFF0206F3, 0x0DF604FA, 0xF1010605);
	r6 = D(r6, s0_2_0, 0x0EF3061C, 0xFA030006, 0x08030616, 0x20F7F7FD);
	r7 = D(r7, s0_2_0, 0xFCF9FE02, 0x06F10DFF, 0x1DF2EAF4, 0x2BEDFAE2);
	r0 = D(r0, s0_2_1, 0x08FA01E5, 0x01000106, 0xF1F517F7, 0x0BF9FCF9);
	r1 = D(r1, s0_2_1, 0x11F107F8, 0xF1FF0118, 0xFA0715F7, 0x17ECFB11);
	r2 = D(r2, s0_2_1, 0xFF0EF4F1, 0x040504FA, 0x02080404, 0xFA12FC0D);
	r3 = D(r3, s0_2_1, 0x06E2EF10, 0xFBF3FAFC, 0xCA1200E1, 0x0BEA02F8);
	r4 = D(r4, s0_2_1, 0x10090700, 0x0407FE04, 0x1A0BF710, 0xFD04FF02);
	r5 = D(r5, s0_2_1, 0x05FA1811, 0x0803F3F5, 0xFB01FF04, 0x01FA0EEE);
	r6 = D(r6, s0_2_1, 0x00FEFBFE, 0x06070405, 0xF51226F9, 0xFE1A04FC);
	r7 = D(r7, s0_2_1, 0x27F8040E, 0xD9CDF7E6, 0xF207FD1A, 0xD8EBEB10);
	r0 = D(r0, s0_2_2, 0xFE0000FD, 0xFFFE0600, 0xF8FD0101, 0xFBF403FB);
	r1 = D(r1, s0_2_2, 0xFFFCFB04, 0x1009F302, 0x01EE14FB, 0xFBFB0711);
	r2 = D(r2, s0_2_2, 0xFF00FF02, 0x0200FF02, 0x06F80202, 0x0114FF05);
	r3 = D(r3, s0_2_2, 0xCFEFF90A, 0x0908F6F4, 0x0AC002EE, 0x04C8F319);
	r4 = D(r4, s0_2_2, 0xF703F807, 0xF9EE04F3, 0xFFF80BFE, 0x0100FD1C);
	r5 = D(r5, s0_2_2, 0xFEF700FA, 0x05FBFE03, 0x030303FF, 0x02F6F6FE);
	r6 = D(r6, s0_2_2, 0x05EFFE0D, 0x06FD0AFB, 0x150A03F5, 0x020B0A01);
	r7 = D(r7, s0_2_2, 0xFC00F707, 0x04F9F304, 0x0A1207FB, 0xEB0DEBF7);
	r0 = D(r0, s1_0_0, 0x020AFC02, 0xFE030309, 0xFE0B0AEE, 0xEE07073E);
	r1 = D(r1, s1_0_0, 0xF4F1F909, 0xFF1DFE0D, 0x03E002FC, 0xE2DDFD29);
	r2 = D(r2, s1_0_0, 0x07F50C00, 0x07F2FEF7, 0x05EE03F9, 0x0BD8FF2D);
	r3 = D(r3, s1_0_0, 0xF4FCFD1C, 0xEF1A0AE5, 0x02050005, 0x01A605C5);
	r4 = D(r4, s1_0_0, 0xF9DEF608, 0xF0FEE9B4, 0xFAEFFA03, 0x02FEFB0E);
	r5 = D(r5, s1_0_0, 0x09180419, 0x000CFE38, 0x070EFEE6, 0xFC0401F7);
	r6 = D(r6, s1_0_0, 0x03FFFC00, 0x02FA0304, 0xF0C0E506, 0x00FD0BD9);
	r7 = D(r7, s1_0_0, 0x03020307, 0xF916062F, 0xDB0C051F, 0x05FE0DF5);
	r0 = D(r0, s1_0_1, 0x11ED091E, 0xFC03FE15, 0xFEF314FC, 0xFDF8FD27);
	r1 = D(r1, s1_0_1, 0x06010104, 0xFB070D0E, 0xFB08FFFC, 0xDADB09F5);
	r2 = D(r2, s1_0_1, 0xFEEB0201, 0x0600FEDF, 0x0805F905, 0xFDEA0305);
	r3 = D(r3, s1_0_1, 0xED02DAF7, 0x040AF403, 0x16130CF8, 0xF9FEDC28);
	r4 = D(r4, s1_0_1, 0xF2F6E5E3, 0xFF1C1D25, 0xF60BF00C, 0x0521EA28);
	r5 = D(r5, s1_0_1, 0xFB06FC0B, 0xFD130459, 0xF20DFB0C, 0x0206F70A);
	r6 = D(r6, s1_0_1, 0x05E40A35, 0xFD06FE01, 0x12C1EEB6, 0xF4F81311);
	r7 = D(r7, s1_0_1, 0xEF0D091F, 0xF837F8BC, 0x0DFEF91D, 0x0601001B);
	r0 = D(r0, s1_0_2, 0x0A0206F8, 0xFE04FDF2, 0x1010FAF4, 0xEC0D02E0);
	r1 = D(r1, s1_0_2, 0xF5230CE5, 0xE817F808, 0x000109E8, 0xCE14FF03);
	r2 = D(r2, s1_0_2, 0xF70406F1, 0x02FEFD08, 0x0401F9FC, 0x08E907DE);
	r3 = D(r3, s1_0_2, 0xFA042EE3, 0x030A0F0D, 0xE8060E01, 0x1DDD1C22);
	r4 = D(r4, s1_0_2, 0xFE09E1D1, 0xF7EEF604, 0xFDFA010F, 0xF8FCF70C);
	r5 = D(r5, s1_0_2, 0x171308F0, 0xEFFCFC35, 0xF503F601, 0x05FF01F9);
	r6 = D(r6, s1_0_2, 0xFBF6000F, 0x0003FD08, 0xFDCF1C1F, 0x1609F60D);
	r7 = D(r7, s1_0_2, 0x0101F707, 0x0303E521, 0x18FCFA16, 0xEF0407E9);
	r0 = D(r0, s1_1_0, 0x03200113, 0xFAFDFF09, 0xF4070332, 0xE5E304D5);
	r1 = D(r1, s1_1_0, 0x0A280027, 0x101701FE, 0xF7F3FEE6, 0x0E151016);
	r2 = D(r2, s1_1_0, 0x1109FEEA, 0x130E09E0, 0x16EE1907, 0xF2F2EB08);
	r3 = D(r3, s1_1_0, 0xED00E2C7, 0xF017E6F9, 0xFAE2F7E1, 0xF0040889);
	r4 = D(r4, s1_1_0, 0x0022F606, 0x0F120917, 0xEEE3F5E8, 0x04F00D21);
	r5 = D(r5, s1_1_0, 0x0CD304BA, 0xF908F67F, 0x00F60A05, 0x070BFDF9);
	r6 = D(r6, s1_1_0, 0xE607091F, 0x02FB000F, 0x0AE31C2F, 0x0FFCFDEF);
	r7 = D(r7, s1_1_0, 0x0401F51E, 0xED230B17, 0xD503E5E2, 0xE5160902);
	r0 = D(r0, s1_1_1, 0x22080FDE, 0xFCF7FB04, 0x0B022E7F, 0xD411124F);
	r1 = D(r1, s1_1_1, 0x001BFAE7, 0x182CDDB8, 0xFFF0131F, 0x0ACAC9D9);
	r2 = D(r2, s1_1_1, 0x0703EAEB, 0xFF03FFC8, 0xF00BF7EF, 0x19E2E7C8);
	r3 = D(r3, s1_1_1, 0xE705E613, 0x0B061FE3, 0x03EFC347, 0xFD0BDD04);
	r4 = D(r4, s1_1_1, 0x34061325, 0x1FDF1B7F, 0x05050A2E, 0xCD07EBE7);
	r5 = D(r5, s1_1_1, 0xD913FED8, 0xE918107F, 0xF604192B, 0xF4FE15F7);
	r6 = D(r6, s1_1_1, 0xDA0EF5BE, 0xFAF8021B, 0xFE0ED910, 0x0507FECC);
	r7 = D(r7, s1_1_1, 0xFC0EFADF, 0xEBEEC8AF, 0x2806FAEB, 0xFC0AD9ED);
	r0 = D(r0, s1_1_2, 0x0BF3FAF4, 0x020005E9, 0x0EEEF3F5, 0xE9F80020);
	r1 = D(r1, s1_1_2, 0x12230F30, 0x1613FB24, 0x21F8F8E3, 0x0009EC32);
	r2 = D(r2, s1_1_2, 0xFFFBFA17, 0xFD04F61C, 0xF00E0122, 0xF5F6F503);
	r3 = D(r3, s1_1_2, 0xB3962B34, 0xFF090025, 0xF6EF022E, 0x20C70526);
	r4 = D(r4, s1_1_2, 0x15FA07EC, 0xFE0A09DE, 0xFFF8FBEE, 0xE10AF018);
	r5 = D(r5, s1_1_2, 0xD9F3FD21, 0xFA11FB23, 0xF00DFA00, 0x02FE0513);
	r6 = D(r6, s1_1_2, 0xF114ED0F, 0xFD09000B, 0xEFDDFA03, 0xDCFB0127);
	r7 = D(r7, s1_1_2, 0xE805061F, 0xE41411D6, 0xE9FAF404, 0xF5FE0406);
	r0 = D(r0, s1_2_0, 0xFE10F618, 0xFF00FDF2, 0xED14FF14, 0xDAD2FCFF);
	r1 = D(r1, s1_2_0, 0xF400FF03, 0x04140BFE, 0x03F8FA0D, 0x0406FD0C);
	r2 = D(r2, s1_2_0, 0xF6D7FCF2, 0x0700FEF6, 0x11100501, 0x02EAF4EF);
	r3 = D(r3, s1_2_0, 0xDDF00509, 0xF50AF605, 0xF7E215F2, 0xFF0C0301);
	r4 = D(r4, s1_2_0, 0xF1CAF906, 0x02010DC3, 0xFBF900FE, 0x04F6F8FE);
	r5 = D(r5, s1_2_0, 0xFF0F0214, 0xF601F84E, 0x03FF01E8, 0xF4FD0116);
	r6 = D(r6, s1_2_0, 0x00EAF7FE, 0x05FCFDF6, 0x11C4F8E1, 0x0DDE07EF);
	r7 = D(r7, s1_2_0, 0xFFFD02FE, 0xFB100AF3, 0x06240F28, 0xEE01FA25);
	r0 = D(r0, s1_2_1, 0x000FF310, 0x000BFDF1, 0xED22EEF9, 0xDC1A0C01);
	r1 = D(r1, s1_2_1, 0x0218FCC2, 0x1030130B, 0x0D0AF5E9, 0xFCFC0216);
	r2 = D(r2, s1_2_1, 0xF3FCF615, 0x09F1FE0D, 0x0DF1F9F2, 0x15C906FA);
	r3 = D(r3, s1_2_1, 0xF71A0EFB, 0x1B39F4D5, 0x3C341E57, 0xFD07EA3D);
	r4 = D(r4, s1_2_1, 0xEBF017E2, 0x100014FF, 0x071805FE, 0xE20CF90F);
	r5 = D(r5, s1_2_1, 0xE30DF315, 0xF108F944, 0xF9F801EC, 0x0302E9D7);
	r6 = D(r6, s1_2_1, 0xF1100721, 0xFCF20214, 0xEB051A12, 0x01FFF1ED);
	r7 = D(r7, s1_2_1, 0xEEFFF5EF, 0xE9FC0437, 0x1009FBC1, 0xDB27E838);
	r0 = D(r0, s1_2_2, 0x02F5F710, 0x04F8FEFD, 0x01FDF608, 0xF9FBFEFF);
	r1 = D(r1, s1_2_2, 0x02FEF7F5, 0x09FCFAE1, 0x09FAF3DF, 0xF423F919);
	r2 = D(r2, s1_2_2, 0x06DFF815, 0xF916FDFE, 0x0012FE0A, 0x09D50713);
	r3 = D(r3, s1_2_2, 0x27A2E9FB, 0xFEFD0FF0, 0x1794FD0B, 0xF805F30C);
	r4 = D(r4, s1_2_2, 0xFFAF0420, 0x0F12FDF6, 0x121513EF, 0xE6F3FF08);
	r5 = D(r5, s1_2_2, 0xF006FB0F, 0xE610F951, 0xF10200FA, 0xEF12000E);
	r6 = D(r6, s1_2_2, 0xE7040216, 0x00000001, 0x08B614FD, 0xFBD1F916);
	r7 = D(r7, s1_2_2, 0xEBF3FD1C, 0xEE3AF5FD, 0x13FF0EF9, 0xFFE90206);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x12FFFB02, 0x01060003, 0xF3FB0A00, 0x06450AFD);
	r1 = D(r1, s0_0_0, 0xF60200F7, 0xD7A9F4F4, 0x08080906, 0xC0F01011);
	r2 = D(r2, s0_0_0, 0xFD16FF02, 0xF9ECFEFF, 0xFFFB08FE, 0xFFEEF6FB);
	r3 = D(r3, s0_0_0, 0x022AFF17, 0x180EF409, 0xFE1C0504, 0xFEFA1CF4);
	r4 = D(r4, s0_0_0, 0xF4E20105, 0xF0FC03EB, 0xFD0E06FF, 0xFA061309);
	r5 = D(r5, s0_0_0, 0x0F26ECFC, 0x04030309, 0xF905FB01, 0xFEFD05FD);
	r6 = D(r6, s0_0_0, 0xF7010AFC, 0xFCFE00FD, 0xDAEE02FD, 0x12050008);
	r7 = D(r7, s0_0_0, 0x05FF0700, 0xF611F803, 0x2717F701, 0xEF1F0205);
	r0 = D(r0, s0_0_1, 0x050B0AFD, 0x0204FBFC, 0xED2BEFF8, 0xD80501F8);
	r1 = D(r1, s0_0_1, 0xF7F4130C, 0xD0D71411, 0x0DF6FF07, 0xDFD905E3);
	r2 = D(r2, s0_0_1, 0x0111F6FF, 0x05F30400, 0x16F6FCFE, 0xF4F8F710);
	r3 = D(r3, s0_0_1, 0x0BFFFBFF, 0x11F70AFE, 0x0508070C, 0xE130DFF5);
	r4 = D(r4, s0_0_1, 0xBE9B220D, 0xEE101BFD, 0x00DEF50B, 0x070F0513);
	r5 = D(r5, s0_0_1, 0x3417040A, 0x040E03F7, 0xEA0700F7, 0xFDF10A02);
	r6 = D(r6, s0_0_1, 0x0B0B0005, 0x0C0EF7FB, 0xC7F80F10, 0x0137E1ED);
	r7 = D(r7, s0_0_1, 0x1914FCFC, 0x0BFF0DF4, 0x2EF5F107, 0x1F3403FD);
	r0 = D(r0, s0_0_2, 0x04F20002, 0x000001FF, 0xFF0E0004, 0xFAF30702);
	r1 = D(r1, s0_0_2, 0xF608090A, 0xE7D8F605, 0x0512F800, 0x192B0016);
	r2 = D(r2, s0_0_2, 0x0A0300FE, 0x01FE0001, 0xFE110502, 0xFEF9FAFF);
	r3 = D(r3, s0_0_2, 0xFF0721F3, 0x0A03FCFE, 0xEDFD0704, 0x0AFC1622);
	r4 = D(r4, s0_0_2, 0xB904EC00, 0xFF0AF315, 0xF7020104, 0x0702070B);
	r5 = D(r5, s0_0_2, 0x0DF300FA, 0xFD000A01, 0x02F90604, 0xF8FFFF02);
	r6 = D(r6, s0_0_2, 0x2011000B, 0x00010000, 0xE631E00B, 0x22F50BFB);
	r7 = D(r7, s0_0_2, 0x06F70300, 0x03150412, 0x09F6FFF8, 0x0304FF06);
	r0 = D(r0, s0_1_0, 0x191110FF, 0x03FBFC04, 0xFA2A1BFF, 0x0402F804);
	r1 = D(r1, s0_1_0, 0xF21406FC, 0xE2091C04, 0x14F4000B, 0xFD02F0CD);
	r2 = D(r2, s0_1_0, 0xFEF712FC, 0xFE0A05F5, 0xFD04F9FD, 0x02E80607);
	r3 = D(r3, s0_1_0, 0x07F0FA20, 0x1C05FE01, 0x0D01F105, 0x0C1E0813);
	r4 = D(r4, s0_1_0, 0xDFF104EE, 0xD60920F8, 0xFE00E812, 0x0505EF07);
	r5 = D(r5, s0_1_0, 0x04FDF705, 0x0305FC05, 0xFCF905F5, 0xFF10F8FC);
	r6 = D(r6, s0_1_0, 0xF012F403, 0xFBF908F9, 0xE0E2FA03, 0xFAEB2320);
	r7 = D(r7, s0_1_0, 0x020AFFFF, 0x02291316, 0x15DCEB13, 0xFE000B12);
	r0 = D(r0, s0_1_1, 0x00D41BF1, 0x0AF6030B, 0xF9EF2EF6, 0xE2AEFCF6);
	r1 = D(r1, s0_1_1, 0xE10E2F17, 0xD6C024FC, 0x072A020C, 0xEA4FFF0E);
	r2 = D(r2, s0_1_1, 0xFCE81103, 0xFF0FF802, 0x1CEDEE03, 0xD9EFFF0F);
	r3 = D(r3, s0_1_1, 0xD7D8E61A, 0x01D72307, 0xE4EFDD2A, 0x1B1F0CEB);
	r4 = D(r4, s0_1_1, 0x81F526F9, 0x993325FA, 0xF1F6D517, 0x0CFEEE29);
	r5 = D(r5, s0_1_1, 0x08D1201B, 0x1711EE04, 0xE4000AF4, 0x0500F5FC);
	r6 = D(r6, s0_1_1, 0x11EDFB27, 0xFBF30504, 0xA32412F3, 0xF3EFFDF8);
	r7 = D(r7, s0_1_1, 0x0BD7EF08, 0x0016F3EE, 0xFED81E19, 0x06231200);
	r0 = D(r0, s0_1_2, 0x1318F7F2, 0xFF02FE00, 0x012B04F1, 0xEE0B18DC);
	r1 = D(r1, s0_1_2, 0xE7180506, 0xFA02F2EB, 0x0B0AFC0E, 0x16291127);
	r2 = D(r2, s0_1_2, 0xFD05FFF6, 0x04FCFEFB, 0x05ECF9FF, 0xF909FB15);
	r3 = D(r3, s0_1_2, 0xCF1C2616, 0x0701FDFB, 0xFFECFCF5, 0x0809070A);
	r4 = D(r4, s0_1_2, 0xF9F808C6, 0xFAFDE913, 0xF7F30312, 0x0A1FF724);
	r5 = D(r5, s0_1_2, 0xF422F107, 0x08FE070E, 0xFCF6FFFF, 0x0700FEF2);
	r6 = D(r6, s0_1_2, 0xFDFF0D17, 0xFEFDFF03, 0xCFD908F3, 0xF00EF810);
	r7 = D(r7, s0_1_2, 0xFBEDFF02, 0xF1D9331F, 0x0BF6EE0F, 0xE5D414FA);
	r0 = D(r0, s0_2_0, 0x0C020007, 0x01060200, 0x0E0FF7FC, 0x0014F700);
	r1 = D(r1, s0_2_0, 0x00FCFEEF, 0xE10CF507, 0x02FE0FFB, 0xE9F81505);
	r2 = D(r2, s0_2_0, 0x0504F70B, 0x01FD090C, 0x03091200, 0xFBFF0303);
	r3 = D(r3, s0_2_0, 0xFDFC1403, 0x0902E708, 0xF4E4F40A, 0xF8E90405);
	r4 = D(r4, s0_2_0, 0xF5210609, 0xF40418FB, 0xF20BFFF4, 0xFEF7D714);
	r5 = D(r5, s0_2_0, 0x041407FF, 0x02FEF806, 0xFF0A0BF8, 0x00F5FD01);
	r6 = D(r6, s0_2_0, 0x0307F3EE, 0xFD060002, 0xFC14F710, 0x05040BFE);
	r7 = D(r7, s0_2_0, 0x00F8FFFE, 0xFC0CC7E9, 0xF8090415, 0x00FFA0FC);
	r0 = D(r0, s0_2_1, 0x10FF0C2A, 0x00FE0209, 0x11021A30, 0xFC04E7D4);
	r1 = D(r1, s0_2_1, 0xF91114FC, 0xDDE40B32, 0x10060C07, 0xEFF6EAFB);
	r2 = D(r2, s0_2_1, 0x0500ECFE, 0x0003F816, 0x09F6FAEA, 0xF4F10907);
	r3 = D(r3, s0_2_1, 0x0601C60A, 0x10F0021D, 0xC4E9D1FB, 0x090E0CE7);
	r4 = D(r4, s0_2_1, 0xEE1F2935, 0xEA2F322F, 0xF30800F3, 0x01F9EC42);
	r5 = D(r5, s0_2_1, 0x09FE08D7, 0x02FF07EE, 0xFE08F5F9, 0x0B0CF900);
	r6 = D(r6, s0_2_1, 0x00FAFDD3, 0xFD02F0F6, 0xD2DAF131, 0xFB06F0DF);
	r7 = D(r7, s0_2_1, 0xF70910EB, 0x0304F2F7, 0xFCFD0D10, 0xFBFA6EF7);
	r0 = D(r0, s0_2_2, 0x05FB06FC, 0x000205FB, 0x0408FB13, 0xFDFF0615);
	r1 = D(r1, s0_2_2, 0xF3F81620, 0x01FC0016, 0x060C10F0, 0xFAFBE309);
	r2 = D(r2, s0_2_2, 0xFD05F802, 0x03FEFC11, 0x000402ED, 0x010CF3F4);
	r3 = D(r3, s0_2_2, 0xED161A81, 0x041500FA, 0xCE0312C5, 0xFBF608FE);
	r4 = D(r4, s0_2_2, 0xF00A040B, 0xF906DAF1, 0xF6FC0DE6, 0x07F80537);
	r5 = D(r5, s0_2_2, 0x020B070F, 0x07F50808, 0x0006F8FC, 0x0BF1FE0E);
	r6 = D(r6, s0_2_2, 0x0500EFF9, 0xFD0002F2, 0xF903ECF7, 0xFC2202F4);
	r7 = D(r7, s0_2_2, 0xFEFEFCFD, 0xFEED05FF, 0xFF0801DA, 0x0411DD06);
	r0 = D(r0, s1_0_0, 0xF8050707, 0x02FBFFFC, 0x020708F6, 0x03FEFF08);
	r1 = D(r1, s1_0_0, 0xFBFEFF03, 0xEA21F909, 0xFEEAF904, 0xE1FB17E2);
	r2 = D(r2, s1_0_0, 0x0011F3F9, 0x030D0209, 0x06030411, 0xFCF2F6F5);
	r3 = D(r3, s1_0_0, 0xFAE9EDE9, 0xF40AE402, 0x09E007E2, 0x16E7FBFB);
	r4 = D(r4, s1_0_0, 0x06E8ECF5, 0x1406FD00, 0x0BD6F8F5, 0x110A0307);
	r5 = D(r5, s1_0_0, 0xF7FA0B0B, 0x00FE0C04, 0x04FB07FF, 0x03FB0201);
	r6 = D(r6, s1_0_0, 0x00E516ED, 0x02030005, 0x09E408E8, 0xFC1F100A);
	r7 = D(r7, s1_0_0, 0xF70903F9, 0x2A29F30E, 0x01E9D51F, 0xF60E0DF0);
	r0 = D(r0, s1_0_1, 0xF70C0E07, 0x03FC0002, 0x19030520, 0x12ECF0DE);
	r1 = D(r1, s1_0_1, 0x1508F70D, 0xC308F809, 0xFAF8FFEA, 0xFBD3DF17);
	r2 = D(r2, s1_0_1, 0x2308F918, 0x070EFE08, 0xF80409F7, 0x07F0F403);
	r3 = D(r3, s1_0_1, 0xD2F023D7, 0x12040509, 0x14E7DA04, 0x23F81313);
	r4 = D(r4, s1_0_1, 0x091404E4, 0x1609020E, 0xF4E9D9ED, 0xECEA0CE2);
	r5 = D(r5, s1_0_1, 0x270CFB16, 0xFDF1FC05, 0xF1FD0008, 0xF80513F2);
	r6 = D(r6, s1_0_1, 0xF000E11E, 0x0000F609, 0xF2EDF3E7, 0x22F8F517);
	r7 = D(r7, s1_0_1, 0x0DFCEF10, 0xE8E10BF9, 0x260211F3, 0x1709F41F);
	r0 = D(r0, s1_0_2, 0x03030C0A, 0x08FEFCFF, 0x210CFB13, 0xFC070519);
	r1 = D(r1, s1_0_2, 0xFAEB0506, 0xFB09F9FF, 0x0BFDF119, 0xF5110004);
	r2 = D(r2, s1_0_2, 0x0505FAFA, 0xFA040304, 0x000303FF, 0x1906FE0E);
	r3 = D(r3, s1_0_2, 0x2F0F01F8, 0xEF000E0D, 0x01F40BE6, 0x41F20B15);
	r4 = D(r4, s1_0_2, 0x0A050832, 0xF8000E09, 0x14FCFFF7, 0x0706FFF2);
	r5 = D(r5, s1_0_2, 0x060B09F1, 0xFCF8F9F2, 0xEEFEFEE3, 0xFE060205);
	r6 = D(r6, s1_0_2, 0xEF0411FD, 0xFAFBFEF8, 0x14E001D9, 0x0BF301F6);
	r7 = D(r7, s1_0_2, 0xF4010DE6, 0xFFFE08FE, 0x0803FE0C, 0xF703F5FB);
	r0 = D(r0, s1_1_0, 0xE7F3EA01, 0x0203FF02, 0xF7F7F6EB, 0x05F9FECA);
	r1 = D(r1, s1_1_0, 0xFC020F15, 0xD2FDFAFB, 0x0A05E60E, 0x0AFD2602);
	r2 = D(r2, s1_1_0, 0xFCDCFDF6, 0xEF060503, 0xF60F0408, 0x12FAF804);
	r3 = D(r3, s1_1_0, 0x1A01F1FE, 0xFEDF01F4, 0x18F301FB, 0x1DF40320);
	r4 = D(r4, s1_1_0, 0x35EB0A08, 0xF4F80414, 0x15F8FF0F, 0x0A0001FA);
	r5 = D(r5, s1_1_0, 0xF410FE01, 0x02F80EE9, 0xFC0010F7, 0xFAFF000E);
	r6 = D(r6, s1_1_0, 0xFC0FEDB2, 0x060103FC, 0xF908E50E, 0x0D120509);
	r7 = D(r7, s1_1_0, 0xF0F900FB, 0xD5FC01B7, 0xC0E61BF3, 0xD1FDF6D5);
	r0 = D(r0, s1_1_1, 0xF30200F6, 0x01000002, 0x0B0E05C6, 0x0AE8F412);
	r1 = D(r1, s1_1_1, 0xCE0411EC, 0xFF320018, 0x11FA14F7, 0x1511F5FA);
	r2 = D(r2, s1_1_1, 0xFAF500E4, 0xFD0B0703, 0x2819F40A, 0x01DE1607);
	r3 = D(r3, s1_1_1, 0x21CA010E, 0xEE36210A, 0x04DEFFF7, 0x35FEED1D);
	r4 = D(r4, s1_1_1, 0x0609F50C, 0xF91310F7, 0x0001FEF1, 0xF2E0EBFF);
	r5 = D(r5, s1_1_1, 0xF202C9D6, 0x01F7EEEF, 0xFD06F5FA, 0xFF07DA03);
	r6 = D(r6, s1_1_1, 0x06FCF0F3, 0x01FEF7FF, 0x1DE90AF7, 0x2CFC1A16);
	r7 = D(r7, s1_1_1, 0xD70AF2F7, 0x14ED19D9, 0xE62B0B0F, 0xE5B506E7);
	r0 = D(r0, s1_1_2, 0xF8081618, 0x03000109, 0x061905F5, 0xFC01FF01);
	r1 = D(r1, s1_1_2, 0x8FF8FF06, 0xDDFFF416, 0xFA02FB10, 0xDAB515EE);
	r2 = D(r2, s1_1_2, 0x1AF30007, 0x08FE03F7, 0x12F204F8, 0xFAF1FF05);
	r3 = D(r3, s1_1_2, 0xB9FEFAF5, 0xD2020C03, 0xFFD8FBE2, 0x0123EFFC);
	r4 = D(r4, s1_1_2, 0x04F4FEEF, 0x3DF7FE0B, 0xFF0AF016, 0xFDE2F9F3);
	r5 = D(r5, s1_1_2, 0xE7EB01EA, 0x030704FD, 0x0BF406F3, 0x11FCEFFB);
	r6 = D(r6, s1_1_2, 0x0C0213EC, 0x09FAFC08, 0xE10EF3D7, 0xFDCD091A);
	r7 = D(r7, s1_1_2, 0xEBEA03EE, 0x0F250114, 0xE7FB1112, 0xD4EB07D7);
	r0 = D(r0, s1_2_0, 0xFCF5FEF5, 0xFB00FF06, 0x2001FC04, 0x140F0B02);
	r1 = D(r1, s1_2_0, 0x060604FA, 0xC30106E4, 0x08FBF70B, 0x01F008E7);
	r2 = D(r2, s1_2_0, 0x1DF20407, 0x02FAFFF7, 0x1400FDFB, 0x06ECF80D);
	r3 = D(r3, s1_2_0, 0x04FCF80B, 0xED2601D0, 0xD20310E5, 0x010704E4);
	r4 = D(r4, s1_2_0, 0x0D00E0F1, 0xDCF404E3, 0x1306020E, 0x1B0B0407);
	r5 = D(r5, s1_2_0, 0x080CFA0C, 0x09051100, 0x02FEF906, 0x0403FAF7);
	r6 = D(r6, s1_2_0, 0x11FD0D08, 0x08FBFA0A, 0x07E8CDD3, 0x04EF0916);
	r7 = D(r7, s1_2_0, 0xEF0402FA, 0xE9021E07, 0xF3110807, 0xE90F00F3);
	r0 = D(r0, s1_2_1, 0xF0EEEDF5, 0xF5FC02FC, 0x1AFD0500, 0x18F5FDF9);
	r1 = D(r1, s1_2_1, 0xE9EAE5E1, 0xA91EFBAC, 0xF0F7F8F5, 0xDF1BE707);
	r2 = D(r2, s1_2_1, 0x07EDFAFE, 0x0A07FF01, 0xFA0E0FFE, 0x15F2F110);
	r3 = D(r3, s1_2_1, 0xF8E5C60E, 0x1FFD0401, 0xF60D0A31, 0x0AFFED0E);
	r4 = D(r4, s1_2_1, 0x0BDEE503, 0xF41000E9, 0x16081C06, 0x0CFF0404);
	r5 = D(r5, s1_2_1, 0x21062009, 0x03010102, 0x07000306, 0x11F6FBFC);
	r6 = D(r6, s1_2_1, 0x0903F0EB, 0x01070004, 0xCCDB01F4, 0x0E03151C);
	r7 = D(r7, s1_2_1, 0xFAF70010, 0xE61703FD, 0x012A2800, 0xFDEE0BF3);
	r0 = D(r0, s1_2_2, 0xF70D0B0E, 0x000404FE, 0x08040301, 0x070106FA);
	r1 = D(r1, s1_2_2, 0x0CF60C02, 0x010315E5, 0xFCF5FE06, 0xE5051500);
	r2 = D(r2, s1_2_2, 0xFCEEEC0C, 0xFDFEFAF9, 0x03F6F9FF, 0x0AFDF804);
	r3 = D(r3, s1_2_2, 0x1CFFFB00, 0xF1F7E8E5, 0xC0160110, 0x2D07F616);
	r4 = D(r4, s1_2_2, 0x03F8FEF5, 0x0B0917DA, 0xF71314FD, 0x080C07FE);
	r5 = D(r5, s1_2_2, 0x00F70FFE, 0xF8F5FA03, 0xF90107FC, 0xF9F8F60A);
	r6 = D(r6, s1_2_2, 0x05FBF2FE, 0xFCFF05F8, 0xF7DEE802, 0xECF70412);
	r7 = D(r7, s1_2_2, 0xF0E7F5EC, 0x09F6F3F5, 0xEC24FAFC, 0x240020F5);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFF020005, 0x000503FE, 0xF50205EC, 0x0016E70F);
	r1 = D(r1, s0_0_0, 0xFFFDFA00, 0xF7DABB22, 0x00EEF9FF, 0xED8143FF);
	r2 = D(r2, s0_0_0, 0x00231000, 0xFE0F00FB, 0xFB07F0F7, 0x00FA1107);
	r3 = D(r3, s0_0_0, 0x0003EA1C, 0xF80FE715, 0xF9F214F9, 0x09EA030A);
	r4 = D(r4, s0_0_0, 0xFBC60718, 0xF7092BF2, 0x06D813FE, 0x030BEAFF);
	r5 = D(r5, s0_0_0, 0xFE20D406, 0x00FFF806, 0x08E10B04, 0xFDF4FAFC);
	r6 = D(r6, s0_0_0, 0xFEEB2AFA, 0x0311FF00, 0xFBF2C5FE, 0x0B29FEF5);
	r7 = D(r7, s0_0_0, 0xF9F908FF, 0x02FA05FE, 0x003BD410, 0x031A35F1);
	r0 = D(r0, s0_0_1, 0x0405FAF9, 0x0304FE01, 0xF622E9FB, 0x080FFC06);
	r1 = D(r1, s0_0_1, 0x041A0602, 0xF3D28111, 0xFB091DF6, 0x16362D11);
	r2 = D(r2, s0_0_1, 0x0B0AFB07, 0xF60104FA, 0xFAF008F1, 0x02F8FF0D);
	r3 = D(r3, s0_0_1, 0x1AF0D911, 0xF8FDF4ED, 0xFBF5FEFF, 0x062209E7);
	r4 = D(r4, s0_0_1, 0xFAE7020D, 0x06F207FC, 0xF7F4180A, 0x07ECF50F);
	r5 = D(r5, s0_0_1, 0x161ADFED, 0x02F10802, 0x0609E603, 0xF9FD0B02);
	r6 = D(r6, s0_0_1, 0x0019FAF7, 0xFCFEF806, 0x0214181D, 0x0229E40F);
	r7 = D(r7, s0_0_1, 0xF406E703, 0xFCD8ECFA, 0x12FFF101, 0x1118E20D);
	r0 = D(r0, s0_0_2, 0xFEFAEDF9, 0x010106FF, 0xF7FE0B02, 0x03F427F6);
	r1 = D(r1, s0_0_2, 0x03F281F5, 0x07F2A815, 0xFB060BF6, 0x0938A4E2);
	r2 = D(r2, s0_0_2, 0xFEF0F50B, 0xFB06F4FF, 0x05050EF9, 0xFCE10206);
	r3 = D(r3, s0_0_2, 0x0F070607, 0xEE06E0FB, 0xFC041DF5, 0xE6381712);
	r4 = D(r4, s0_0_2, 0xFDF5BF15, 0x0C09CD0B, 0x0F091E07, 0x08FC05F9);
	r5 = D(r5, s0_0_2, 0xF1FFD6F4, 0x00FD0800, 0x03EAF502, 0x06071103);
	r6 = D(r6, s0_0_2, 0xF816F7F7, 0x01FA0500, 0x0937811A, 0x0BDBF701);
	r7 = D(r7, s0_0_2, 0x07ECF703, 0x0D0914F2, 0x0003FF00, 0x1207F3ED);
	r0 = D(r0, s0_1_0, 0x060402FE, 0xFE02FFFF, 0x0119F8E2, 0x10F85210);
	r1 = D(r1, s0_1_0, 0x02D1D718, 0xF981D815, 0x03080AF2, 0xCB3FDFEF);
	r2 = D(r2, s0_1_0, 0x00DB150C, 0x000001FF, 0x040A0902, 0x01DC00FF);
	r3 = D(r3, s0_1_0, 0xF3F1060C, 0x14ECD614, 0xF8101203, 0xF91202FA);
	r4 = D(r4, s0_1_0, 0xF9D5DC14, 0x04DE07F5, 0x07F103FD, 0x04F11702);
	r5 = D(r5, s0_1_0, 0x1B3400FF, 0x050D0E03, 0x0203FB00, 0x0A040000);
	r6 = D(r6, s0_1_0, 0xEA1132E2, 0xF7FBFA04, 0xF9BF0D1F, 0xF5510002);
	r7 = D(r7, s0_1_0, 0x0BF4F508, 0xEAA8DB03, 0x04E5F027, 0x1D2509FB);
	r0 = D(r0, s0_1_1, 0x0EF408EC, 0x0608F9FF, 0xF2EA27F8, 0xFAD615F5);
	r1 = D(r1, s0_1_1, 0x07D4B812, 0xF681002A, 0xF12701E7, 0xFEEDDD33);
	r2 = D(r2, s0_1_1, 0x01E31F0B, 0xFB0C0EF8, 0xE73BFBEA, 0x12E5F70C);
	r3 = D(r3, s0_1_1, 0xF199F6FB, 0xE9F90BFD, 0x16FEF7F9, 0x114008D9);
	r4 = D(r4, s0_1_1, 0xF4C0CB1D, 0x0EFDF70F, 0xF6FE1111, 0xF0F1D415);
	r5 = D(r5, s0_1_1, 0xD0BA0AF3, 0xFB1E2102, 0x03E70C0C, 0x0710F6FE);
	r6 = D(r6, s0_1_1, 0x16080910, 0xF6FE02FF, 0xEBCBCC1C, 0x0B90E919);
	r7 = D(r7, s0_1_1, 0x13EE0707, 0x04EAF8FA, 0xEBEEFCED, 0xFBF026F1);
	r0 = D(r0, s0_1_2, 0xE8FBF6FA, 0xFF08F201, 0x02F71200, 0xFB20010B);
	r1 = D(r1, s0_1_2, 0x09E1BBFD, 0xFDC5FF0C, 0x171A1BF3, 0x4B2FD2EF);
	r2 = D(r2, s0_1_2, 0xFDE40C0A, 0x03020F02, 0x0A0F0302, 0xE6DF0E06);
	r3 = D(r3, s0_1_2, 0xE916EE09, 0xEF08DE03, 0xEE23FEF5, 0x980B660B);
	r4 = D(r4, s0_1_2, 0xDEE11817, 0x0E0BE314, 0xFCF60207, 0x020DFDF9);
	r5 = D(r5, s0_1_2, 0xE21408F8, 0xFFF80502, 0x05F3EFFF, 0xF8FE0A08);
	r6 = D(r6, s0_1_2, 0x15F91903, 0x00FBEC05, 0xF2EE4A0C, 0xE5F2FEFE);
	r7 = D(r7, s0_1_2, 0x00F1F50C, 0x0CC3C1EF, 0x0909ED05, 0x110C23F4);
	r0 = D(r0, s0_2_0, 0xF9EE0206, 0xFFFEFDFF, 0x09FB02ED, 0xFDEBDD10);
	r1 = D(r1, s0_2_0, 0x05080812, 0x15CBF0FF, 0xF5F1F1EC, 0x120A200C);
	r2 = D(r2, s0_2_0, 0x0B0804EC, 0x040A08F6, 0x0118FCF2, 0xF9DE0D08);
	r3 = D(r3, s0_2_0, 0xFBDEF613, 0x0500EDF6, 0x0E83011C, 0x1BF41DFC);
	r4 = D(r4, s0_2_0, 0x02F8E311, 0x04081FF3, 0xFDEDF707, 0xF0F70E0F);
	r5 = D(r5, s0_2_0, 0x07F3CDE3, 0x08F9FE10, 0xFAF4EEFC, 0xFDFF07F9);
	r6 = D(r6, s0_2_0, 0xFF280B11, 0x05FE03F9, 0x11B3F308, 0x04E71FFB);
	r7 = D(r7, s0_2_0, 0x06DCF608, 0xFE162008, 0x1536D303, 0xFBF87FE9);
	r0 = D(r0, s0_2_1, 0x07F10602, 0x05F901FF, 0x0F0305E1, 0x102FF3F6);
	r1 = D(r1, s0_2_1, 0xFFE9180E, 0xFC860124, 0x04060DD4, 0xE8F92920);
	r2 = D(r2, s0_2_1, 0xF6F30E1A, 0xF70902FC, 0xF5FC0806, 0xFCFA1900);
	r3 = D(r3, s0_2_1, 0x1EFEEB0A, 0xFF19FAE1, 0x289C0D14, 0x07E5EDE8);
	r4 = D(r4, s0_2_1, 0x17D9F113, 0xEFD005D0, 0xF727F7FF, 0xF8FEFE07);
	r5 = D(r5, s0_2_1, 0xFF0EDF17, 0xFF0901FC, 0xFE12EC05, 0xF702F5FE);
	r6 = D(r6, s0_2_1, 0x03E32908, 0xFD02FBFA, 0x0FFB2E0E, 0xFB212919);
	r7 = D(r7, s0_2_1, 0x040BE702, 0x0DC00216, 0xF01EFBEF, 0xE208D5DE);
	r0 = D(r0, s0_2_2, 0x03FCF6F8, 0xFD0601F8, 0x061F01FD, 0x0D16FEEA);
	r1 = D(r1, s0_2_2, 0x03E603FE, 0x10EBF71C, 0x101304F8, 0x09E1040A);
	r2 = D(r2, s0_2_2, 0x01F209FB, 0x0AF701FF, 0x06FE07FC, 0xF3CD0A0A);
	r3 = D(r3, s0_2_2, 0x0D0709DB, 0xF621F7F5, 0xE993E4F4, 0xFB3202F8);
	r4 = D(r4, s0_2_2, 0x26BC06FE, 0x0AF9150A, 0xFF1F0706, 0x01FDF905);
	r5 = D(r5, s0_2_2, 0x102CF7E4, 0x03FFFF02, 0x0DF6F801, 0x0EF00501);
	r6 = D(r6, s0_2_2, 0x00211604, 0x030105FD, 0x0FEC0413, 0xEFB6F6F7);
	r7 = D(r7, s0_2_2, 0x04E2F7F5, 0x1CFEF913, 0xDC0606F8, 0x0D2A0CFF);
	r0 = D(r0, s1_0_0, 0xFA06FFFE, 0xFFFF01FF, 0xD1F10903, 0x06F3FA01);
	r1 = D(r1, s1_0_0, 0xF81102F5, 0x0DE503EC, 0x0DF903FB, 0x00F9EC0B);
	r2 = D(r2, s1_0_0, 0xFC02F4FB, 0x0306FB04, 0x04FFFF0E, 0x0407FAF9);
	r3 = D(r3, s1_0_0, 0x03E00FFE, 0xF8140CF8, 0x0BEE15F8, 0xEACFEA12);
	r4 = D(r4, s1_0_0, 0x09F405F9, 0xF6E10A0F, 0x0EF5110C, 0xFD03020F);
	r5 = D(r5, s1_0_0, 0xEBFAFCF7, 0x11F4FCFB, 0xFB0401FF, 0xFE050504);
	r6 = D(r6, s1_0_0, 0xDFFC0B00, 0x0203FA00, 0xF200FC0E, 0xFB0FE6F8);
	r7 = D(r7, s1_0_0, 0xFA07FEFD, 0x10F2F914, 0xF6152BF7, 0xFA04F6FF);
	r0 = D(r0, s1_0_1, 0x07FEF115, 0xFF06FAFB, 0xF1F71013, 0xF5EB21F7);
	r1 = D(r1, s1_0_1, 0x1302F700, 0x0CDFF208, 0x0014FC04, 0xF9E4DB00);
	r2 = D(r2, s1_0_1, 0x0405F6FD, 0xFEF9F505, 0xFCFC08FE, 0x1407FAF8);
	r3 = D(r3, s1_0_1, 0xEF0D1305, 0xFE02FD12, 0x0D0412F7, 0xC904F913);
	r4 = D(r4, s1_0_1, 0x0DFC0F00, 0x01E91111, 0x061011ED, 0xFFEB19F9);
	r5 = D(r5, s1_0_1, 0x00F70A20, 0x03FD0205, 0x0BEF00FF, 0xFBFC0CFA);
	r6 = D(r6, s1_0_1, 0xF80800FD, 0x0F050BFD, 0x08FCF8E0, 0x12FDF6FC);
	r7 = D(r7, s1_0_1, 0x09FCFF01, 0xEFF00EE7, 0xFBF8FC06, 0x07FF03F4);
	r0 = D(r0, s1_0_2, 0xFA00F102, 0x02FE01FF, 0xFAFFFD06, 0xFD02FEFB);
	r1 = D(r1, s1_0_2, 0x010B0AFB, 0x00F3F7F9, 0xFFF90007, 0xFC08080D);
	r2 = D(r2, s1_0_2, 0xFA02F8FD, 0xFFFFFFFE, 0xFEFE0505, 0x07FDEC01);
	r3 = D(r3, s1_0_2, 0xF3FBF611, 0x030512FB, 0xFAFB0A07, 0xE804EF23);
	r4 = D(r4, s1_0_2, 0x01ED12F5, 0x08FB0EE3, 0x02050102, 0x01060CF9);
	r5 = D(r5, s1_0_2, 0xF5FFF809, 0x030004FA, 0x010108F9, 0x0203FFFF);
	r6 = D(r6, s1_0_2, 0xFE0EF307, 0x06000601, 0x1123EFEE, 0x0C0F0301);
	r7 = D(r7, s1_0_2, 0x000E05FC, 0x0D011B01, 0x00FAFF08, 0x04040602);
	r0 = D(r0, s1_1_0, 0x0320F7ED, 0x0B0906FE, 0xDAF60AF7, 0x36FA16DE);
	r1 = D(r1, s1_1_0, 0xFE090509, 0x05F403EC, 0xE4F1FF08, 0x29F8E61B);
	r2 = D(r2, s1_1_0, 0x0CEE090B, 0x040AF40F, 0xE60BEEFC, 0x0E03FF0C);
	r3 = D(r3, s1_1_0, 0xF2E305FE, 0xF2FB18E3, 0x07F01101, 0xE8E7FA0B);
	r4 = D(r4, s1_1_0, 0x060209F0, 0x8A04E115, 0xFF020D0B, 0x1AEF06FC);
	r5 = D(r5, s1_1_0, 0xEDFE0EE9, 0xEEEE0A00, 0xFAF503F1, 0x010104FC);
	r6 = D(r6, s1_1_0, 0x22ED1111, 0x13FFFC09, 0xFF0C0B0C, 0xF90EFEF5);
	r7 = D(r7, s1_1_0, 0x170308FC, 0x1D0DEC13, 0xCAFD07C2, 0x10081B0C);
	r0 = D(r0, s1_1_1, 0xB4020CD5, 0x002420F3, 0xE3EC1329, 0xF40103ED);
	r1 = D(r1, s1_1_1, 0xDFBBFCCA, 0xEE011EFD, 0xE401E51E, 0x1DF1030A);
	r2 = D(r2, s1_1_1, 0x0A040EE6, 0x05FC0EF0, 0x1014E81B, 0x06F5FBE5);
	r3 = D(r3, s1_1_1, 0x81F600F2, 0xF2FB0E0B, 0xFF17E1F4, 0xBE0CEF0C);
	r4 = D(r4, s1_1_1, 0xF6FBE629, 0x1BEEEC23, 0xF90BF534, 0x1F0500FC);
	r5 = D(r5, s1_1_1, 0x0220FCB9, 0x05E9FC1F, 0x24F7FE1A, 0x06FE0AFC);
	r6 = D(r6, s1_1_1, 0x1E0612F1, 0x2F0F06FE, 0x11E82815, 0x0A01F5E7);
	r7 = D(r7, s1_1_1, 0x111D17CE, 0xFD0F1FF8, 0xEB09F8EB, 0x03F418B5);
	r0 = D(r0, s1_1_2, 0xF90401F2, 0xFC03FBFF, 0x00020D0C, 0xF7F50614);
	r1 = D(r1, s1_1_2, 0x00EE0B01, 0x0D1D0D0C, 0x04F20514, 0x22E721FB);
	r2 = D(r2, s1_1_2, 0x090609FD, 0x0609FDFC, 0x02100005, 0x0AE9F505);
	r3 = D(r3, s1_1_2, 0xEE1A0E0D, 0xF3FAF20C, 0xEF05F019, 0xED12F329);
	r4 = D(r4, s1_1_2, 0xFF1DE40C, 0x08F80C07, 0xF504F502, 0x0F08F909);
	r5 = D(r5, s1_1_2, 0x04171505, 0xFA01F806, 0x03050BE9, 0xFFFFF70F);
	r6 = D(r6, s1_1_2, 0x14EB15F7, 0xFC0109F4, 0x0EE605B1, 0xFF1208E9);
	r7 = D(r7, s1_1_2, 0x0005F1F0, 0xF4FAF1FE, 0xFF0B03F9, 0x09010802);
	r0 = D(r0, s1_2_0, 0x0703FB14, 0x00030302, 0xFEFAF704, 0x00FF06F3);
	r1 = D(r1, s1_2_0, 0x050BFF12, 0x09FF2010, 0xF6F9F7FE, 0x05060EFC);
	r2 = D(r2, s1_2_0, 0x070005F4, 0x0802F901, 0x0300F8FF, 0x0D070A09);
	r3 = D(r3, s1_2_0, 0x11FE13E5, 0x1901FEF0, 0xD60B0304, 0x07FB0104);
	r4 = D(r4, s1_2_0, 0x09F02100, 0xEAFBF424, 0xFD071106, 0x0EFE010A);
	r5 = D(r5, s1_2_0, 0xFA05FC04, 0x05F8FCF4, 0xFF08FEFC, 0x0CF8FBFA);
	r6 = D(r6, s1_2_0, 0xF4F4F6EE, 0xFB0500FA, 0xFB01F6F8, 0xE4F9FB09);
	r7 = D(r7, s1_2_0, 0x070404F7, 0xF8F3FFF8, 0xE3011705, 0xECE2FB18);
	r0 = D(r0, s1_2_1, 0x090DEB0E, 0xF802FB14, 0x07F4E609, 0xF6FFFBFE);
	r1 = D(r1, s1_2_1, 0x0FF90B00, 0x10FA0F0E, 0xFA07EEE7, 0x03EF1B10);
	r2 = D(r2, s1_2_1, 0xFD0FF41C, 0x0306FBFD, 0xFE09F304, 0x0D0A03FD);
	r3 = D(r3, s1_2_1, 0xED01031F, 0x0C020317, 0xE5FE0B3D, 0x1714000A);
	r4 = D(r4, s1_2_1, 0xED0512F0, 0xFF052110, 0xEAEB07F1, 0x1106F2EA);
	r5 = D(r5, s1_2_1, 0xFDEEF8EA, 0x09EF0AE6, 0x03FE070B, 0x0A24E3D3);
	r6 = D(r6, s1_2_1, 0x03050304, 0xF8FB05F8, 0x06062B12, 0x0AF7150B);
	r7 = D(r7, s1_2_1, 0x06F616DB, 0x04300300, 0xF308FEF6, 0x02EBF025);
	r0 = D(r0, s1_2_2, 0x0101FBFF, 0xFE03FD02, 0xFD04FB11, 0xFE040312);
	r1 = D(r1, s1_2_2, 0x06FE11FC, 0x07F80508, 0x0104FA12, 0xFC01F4F5);
	r2 = D(r2, s1_2_2, 0x0001F9FD, 0x0500FBFE, 0x06FAFFF9, 0x0002F3FF);
	r3 = D(r3, s1_2_2, 0xF21C020A, 0x0AFCFD02, 0x00232AED, 0xFCFB120E);
	r4 = D(r4, s1_2_2, 0x02F21BF4, 0x000509F1, 0xF5010EF8, 0x02F9EFF3);
	r5 = D(r5, s1_2_2, 0x060100FD, 0x01FFF3FD, 0x01000101, 0x03FFF9F8);
	r6 = D(r6, s1_2_2, 0xFB02F307, 0x020303FE, 0xFD09100E, 0xFC0E04F5);
	r7 = D(r7, s1_2_2, 0x0202FBEB, 0x05E8011B, 0xFDFCE9E0, 0x0D03EAFC);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xF3040EED, 0xFF010007, 0x14FBEDFC, 0xF6FBF819);
	r1 = D(r1, s0_0_0, 0x04100CFA, 0x1D07F2EB, 0x0A05FF08, 0xE50B0523);
	r2 = D(r2, s0_0_0, 0xF9F803FD, 0x0100FFF0, 0x04FAFCFA, 0xFC001709);
	r3 = D(r3, s0_0_0, 0xFE0EFA0E, 0xF9FEE4EE, 0x01FD070F, 0xE0F30218);
	r4 = D(r4, s0_0_0, 0x03F6FF0A, 0x0CF3050D, 0xFCFCF82C, 0xF2FB041B);
	r5 = D(r5, s0_0_0, 0x1609EF01, 0x0006020A, 0x0301F508, 0x02FAFC07);
	r6 = D(r6, s0_0_0, 0x0A06001A, 0xFD0106FE, 0xFDEDF523, 0xF4000EEC);
	r7 = D(r7, s0_0_0, 0x0102FFFD, 0xE5030418, 0x030C17EC, 0xF2FC08DF);
	r0 = D(r0, s0_0_1, 0xE9FF02FC, 0x010209FC, 0xF3FBFFF7, 0x18EA0402);
	r1 = D(r1, s0_0_1, 0xE80D0DF9, 0xF1F90324, 0xFD051BF6, 0x0C1A0433);
	r2 = D(r2, s0_0_1, 0xFCFCF405, 0xF907F100, 0xFC04F702, 0x07F007F6);
	r3 = D(r3, s0_0_1, 0x12FB00F6, 0xF40A0005, 0x1206FDF9, 0x070CFB00);
	r4 = D(r4, s0_0_1, 0x17E8FDE8, 0xF7061A22, 0x0DFE1DF9, 0x070006F7);
	r5 = D(r5, s0_0_1, 0xD30A09F7, 0x09FB0101, 0x02060109, 0x06FDFFFE);
	r6 = D(r6, s0_0_1, 0xFB090008, 0xFE02F900, 0x10FCF627, 0xFA0CFF0E);
	r7 = D(r7, s0_0_1, 0xFEFFFAF7, 0x2603F40D, 0xEFFF0F11, 0xF90AEF00);
	r0 = D(r0, s0_0_2, 0xFDFFF90A, 0xFE010002, 0x00FBE4FE, 0x00FDFFF8);
	r1 = D(r1, s0_0_2, 0x02160707, 0x00F70302, 0xF90D0705, 0xF210200A);
	r2 = D(r2, s0_0_2, 0xF6F7F900, 0xFF0101FC, 0xFBFE09FD, 0xF9EFEDFE);
	r3 = D(r3, s0_0_2, 0xF900DCFA, 0xFF08F50A, 0xFB0B01F5, 0xF9D7F30A);
	r4 = D(r4, s0_0_2, 0x05F6E3F5, 0x02FD0217, 0xFEFA0A03, 0x12FA01F7);
	r5 = D(r5, s0_0_2, 0x0614EEEF, 0x00FE0101, 0x040006FD, 0xFDFCFFFC);
	r6 = D(r6, s0_0_2, 0xF8FB060D, 0xFEFE06FE, 0x16F2F80F, 0x060D07F5);
	r7 = D(r7, s0_0_2, 0x02FBF9FE, 0xFB101614, 0xFB01F7FA, 0x02040016);
	r0 = D(r0, s0_1_0, 0xEC031F00, 0xFF050107, 0x13FF0413, 0x0311FF21);
	r1 = D(r1, s0_1_0, 0xF50C0AFE, 0xD3FABC17, 0x0804140C, 0x04072E0C);
	r2 = D(r2, s0_1_0, 0xFAEEF80E, 0xFFEDFBE9, 0x10F4FAEB, 0xF9F110F4);
	r3 = D(r3, s0_1_0, 0x0B0F0DF8, 0x120FE60E, 0xF316F81C, 0x04F62625);
	r4 = D(r4, s0_1_0, 0xFE03FFFF, 0x0AF30203, 0x0511FB08, 0x0AF3FC00);
	r5 = D(r5, s0_1_0, 0x090B0620, 0x090AFD01, 0xFE050A13, 0x0A01FE05);
	r6 = D(r6, s0_1_0, 0x090E0708, 0xFFF90101, 0xF902F60A, 0xCA03E7D5);
	r7 = D(r7, s0_1_0, 0xFC040005, 0xDF070DFD, 0xF00EE9EC, 0xF7FF0F19);
	r0 = D(r0, s0_1_1, 0xEC08F3EF, 0x040204F7, 0x05F60B08, 0x14F322EB);
	r1 = D(r1, s0_1_1, 0xEE13D9EF, 0x1BEA9006, 0xF90309F7, 0x170C3809);
	r2 = D(r2, s0_1_1, 0x0FEEFEED, 0x0900F80D, 0x0B09F0FC, 0x17CD08FD);
	r3 = D(r3, s0_1_1, 0x01E509F1, 0xE00FE703, 0x0D0E11F7, 0xF2ED1EED);
	r4 = D(r4, s0_1_1, 0xFFD004EF, 0x1011F829, 0xF5F1FEF0, 0xF10CFE14);
	r5 = D(r5, s0_1_1, 0xFE25D9EE, 0xFC09F7B5, 0x1101FF07, 0xF2F70EEE);
	r6 = D(r6, s0_1_1, 0x091A0500, 0x17FBFB00, 0x03CC00FA, 0xEA02C327);
	r7 = D(r7, s0_1_1, 0x0503FA00, 0x131EFCEA, 0xF405D604, 0xFE17F714);
	r0 = D(r0, s0_1_2, 0xFC02FB0C, 0xFC03FA02, 0xF0F3FF0B, 0x01FBFCF1);
	r1 = D(r1, s0_1_2, 0x1607F0EA, 0x07F9E8E8, 0xFF080C08, 0xEA11FDEB);
	r2 = D(r2, s0_1_2, 0x00F9FDFB, 0xFE0304FD, 0xFF0D04FB, 0x15EFEB00);
	r3 = D(r3, s0_1_2, 0xF5EBF9F0, 0x05FBDF01, 0x0E070703, 0x0701FF16);
	r4 = D(r4, s0_1_2, 0xFCE00107, 0x0C040306, 0x06FFFF0B, 0xFA0003F7);
	r5 = D(r5, s0_1_2, 0xFD0EFFFB, 0xF706F4F6, 0xFF0109F1, 0xFFFF05F9);
	r6 = D(r6, s0_1_2, 0xFE03FDF4, 0x0000F7FC, 0x0AF802ED, 0x0BFAFEF7);
	r7 = D(r7, s0_1_2, 0xFE02F6FD, 0xDB0F18FA, 0x0B09F009, 0x141CE8F6);
	r0 = D(r0, s0_2_0, 0xFE040910, 0x0005FEFE, 0x05041001, 0xFC0AFA0A);
	r1 = D(r1, s0_2_0, 0xF80D070D, 0x1E0C04E8, 0x0AFDFD02, 0xF5F6F5EE);
	r2 = D(r2, s0_2_0, 0x0AF30DFA, 0x000101FF, 0xFEFD03F7, 0x0FCFFDD3);
	r3 = D(r3, s0_2_0, 0x08080F03, 0x011CFAEB, 0x0DF1FD11, 0xECFD05FD);
	r4 = D(r4, s0_2_0, 0x06011002, 0x02F8F811, 0x03EFF5FD, 0xF5000801);
	r5 = D(r5, s0_2_0, 0x050FFAFA, 0xFBFB0108, 0x04FC01FE, 0xFDFC0205);
	r6 = D(r6, s0_2_0, 0xFCFF0417, 0x0400FFFC, 0xFAF10E03, 0x0EC406FF);
	r7 = D(r7, s0_2_0, 0xFF08FDFE, 0xF613090B, 0x0F1200ED, 0x08F70F34);
	r0 = D(r0, s0_2_1, 0x01090BF6, 0x0CFD08F9, 0xE9081D03, 0xE0FD13F7);
	r1 = D(r1, s0_2_1, 0x0D0402FC, 0x2EFEEAEE, 0xF50814F8, 0x1903E913);
	r2 = D(r2, s0_2_1, 0x05F00606, 0xFE0CF50B, 0x040DF1FE, 0x10E5F8EE);
	r3 = D(r3, s0_2_1, 0x0BDF2CF6, 0xF11DF209, 0x0FBB0ED8, 0xF9F70007);
	r4 = D(r4, s0_2_1, 0x16E9FEF3, 0x100D0E13, 0xF1F002F7, 0xFB070C09);
	r5 = D(r5, s0_2_1, 0xDF0BFC07, 0xF8FAFA08, 0x0006FDFA, 0x0805FC0B);
	r6 = D(r6, s0_2_1, 0x0C111403, 0x00FD03FD, 0x1DC52C2A, 0xFBFC020B);
	r7 = D(r7, s0_2_1, 0x0B11F0FF, 0xF415F510, 0xFA12E602, 0xF9FC2208);
	r0 = D(r0, s0_2_2, 0xFBFAFDF8, 0x0000FE05, 0xFBFCFA0A, 0xFD030205);
	r1 = D(r1, s0_2_2, 0x09070FF3, 0xFA03F7F3, 0x0FFBFEFE, 0x10070F0D);
	r2 = D(r2, s0_2_2, 0x07020AFF, 0xFA0208F8, 0xF90106F9, 0x07F4F4F9);
	r3 = D(r3, s0_2_2, 0x12EE0307, 0x0605F402, 0x16EEF918, 0xE0F9FD02);
	r4 = D(r4, s0_2_2, 0x0500FC01, 0x0C080D05, 0xF5F5EE04, 0xEBFD0107);
	r5 = D(r5, s0_2_2, 0xFE050B00, 0x0001FF03, 0xF4070103, 0x00FB0CFA);
	r6 = D(r6, s0_2_2, 0xFC0203FC, 0x0002FDFE, 0x05F8F41C, 0xF5000B09);
	r7 = D(r7, s0_2_2, 0x020907FC, 0xE10616F1, 0xF9FFDD05, 0xFEF3100C);
	r0 = D(r0, s1_0_0, 0xEDFE0605, 0x05FEFF00, 0xFB01FAE7, 0xFBF005F0);
	r1 = D(r1, s1_0_0, 0x16030103, 0x1CF3F4F9, 0x05030606, 0x04F7FD06);
	r2 = D(r2, s1_0_0, 0x01F8FFFC, 0x01FFFC09, 0xF5FCFB06, 0x07010704);
	r3 = D(r3, s1_0_0, 0x1207F003, 0xFF03FA0A, 0x0510FEEF, 0xE308FF15);
	r4 = D(r4, s1_0_0, 0x0D02FCFC, 0xFB07F9F4, 0xFD070307, 0x0201F807);
	r5 = D(r5, s1_0_0, 0x0404F3FC, 0xFB02FC00, 0xFEFAFAF4, 0xFD02FFFE);
	r6 = D(r6, s1_0_0, 0xF3FFFBEE, 0x04FA0003, 0x08FC0803, 0x0D0305F2);
	r7 = D(r7, s1_0_0, 0xFAFE00FB, 0xE6F8FA0F, 0x05011503, 0x02FFF3E8);
	r0 = D(r0, s1_0_1, 0xE7050209, 0x0BF70509, 0x1CFAEC1D, 0x05FFF3D7);
	r1 = D(r1, s1_0_1, 0x11F10F18, 0x00D8D20A, 0xFE0A060A, 0x1714E3DA);
	r2 = D(r2, s1_0_1, 0xFCF5FC00, 0xF6F8F804, 0x06FDF8F7, 0x060B0E06);
	r3 = D(r3, s1_0_1, 0x25FE05FC, 0xDEFA02FA, 0x1207010B, 0xFD09EC06);
	r4 = D(r4, s1_0_1, 0x0CEBFEFC, 0xECFBE8FF, 0x071113F2, 0xF60805EF);
	r5 = D(r5, s1_0_1, 0xFBF8FE17, 0x03FBF5F4, 0x09EE0214, 0xF90503EE);
	r6 = D(r6, s1_0_1, 0x010A010A, 0x0EF60600, 0x21FB0BFA, 0x03EF0B23);
	r7 = D(r7, s1_0_1, 0x0AF3030D, 0xEF0F0DF3, 0xEEF71004, 0x1BF1FE03);
	r0 = D(r0, s1_0_2, 0xFAF603F6, 0xFFFFFEFF, 0x07FADEF8, 0xF5F4ED0C);
	r1 = D(r1, s1_0_2, 0x08EA0BFD, 0x17FEFB02, 0x02F80B02, 0x13F5FFE2);
	r2 = D(r2, s1_0_2, 0x00FB02F5, 0x02FE03FB, 0x0201FD0A, 0x0206160A);
	r3 = D(r3, s1_0_2, 0x1705F914, 0xEAF9FEFC, 0x0C01FEF0, 0x0900EAFA);
	r4 = D(r4, s1_0_2, 0xFBEDFE0A, 0x001106E7, 0xFB0B090D, 0x0810FD04);
	r5 = D(r5, s1_0_2, 0x0AEC050A, 0x0009FFFF, 0x050402FC, 0xFD01F701);
	r6 = D(r6, s1_0_2, 0x0DF8F0F5, 0x01FF0405, 0x37F10810, 0x0B0715F4);
	r7 = D(r7, s1_0_2, 0x070604F2, 0x01090B01, 0xEF030AFD, 0x01FA08F7);
	r0 = D(r0, s1_1_0, 0xF9FE090A, 0x0301FEF9, 0x0705F8F1, 0xFAF9F0FB);
	r1 = D(r1, s1_1_0, 0xF9FF0412, 0x1305F4FA, 0x1DFA0610, 0x2DF20CF6);
	r2 = D(r2, s1_1_0, 0xEAF3FCF4, 0xEBFF03FF, 0xFBFBFE00, 0x0BFAF709);
	r3 = D(r3, s1_1_0, 0x0A14F608, 0xEA1D0603, 0x19FCF105, 0x090808E7);
	r4 = D(r4, s1_1_0, 0x470A0A11, 0xFBF605EC, 0x1A03F8F3, 0xFC11FCEC);
	r5 = D(r5, s1_1_0, 0xED12FCFC, 0xF503F9ED, 0x0EEAF6F5, 0xF50B04FB);
	r6 = D(r6, s1_1_0, 0x20F3F601, 0x02F4FCFE, 0x0EF7010D, 0xE0E4010C);
	r7 = D(r7, s1_1_0, 0x07F5050B, 0xFFED061A, 0xE928EA0C, 0xBCF1070F);
	r0 = D(r0, s1_1_1, 0xEBFA1EF3, 0xFE050617, 0xD1DEF6F5, 0x0D1E17F4);
	r1 = D(r1, s1_1_1, 0x14DD1626, 0xE4F9EBE2, 0x0F0F0706, 0x5817EDFC);
	r2 = D(r2, s1_1_1, 0xF8140818, 0xF70CF709, 0x06F9F2FA, 0xFA1D1204);
	r3 = D(r3, s1_1_1, 0x240EF514, 0xEFE81D05, 0x1E170C11, 0xF72A0316);
	r4 = D(r4, s1_1_1, 0x0ABE0AF7, 0x2A81C1E3, 0x0BFA050D, 0x141E190E);
	r5 = D(r5, s1_1_1, 0xF0171C07, 0x23EFFBFD, 0x02EFF2EB, 0xFC0206FA);
	r6 = D(r6, s1_1_1, 0x1114FC12, 0x070500F3, 0x16D9F8DE, 0x0F02E6FC);
	r7 = D(r7, s1_1_1, 0x080016ED, 0x32F5F9FB, 0xEAFB1C08, 0xFA061F05);
	r0 = D(r0, s1_1_2, 0xF3EEF306, 0xFEF802F6, 0xFD14D907, 0x0903F80F);
	r1 = D(r1, s1_1_2, 0x07BDF413, 0x1216FC07, 0xF0EFE000, 0x13081711);
	r2 = D(r2, s1_1_2, 0xFFFE1011, 0xF90A0100, 0xFFF60206, 0x0E140BEA);
	r3 = D(r3, s1_1_2, 0xC8EB00E6, 0xF5F4F407, 0x24E6F6F5, 0xFA002FDE);
	r4 = D(r4, s1_1_2, 0x12F6ECF1, 0x151CC70F, 0xFEFCEFED, 0x060C09E6);
	r5 = D(r5, s1_1_2, 0x07EB06F2, 0x03040406, 0xFD0EFD17, 0x01070A10);
	r6 = D(r6, s1_1_2, 0x0A060B0D, 0xFA08FF15, 0x16011304, 0x170927F6);
	r7 = D(r7, s1_1_2, 0x06ED1F0A, 0x02001709, 0x04F6FCEF, 0xE80CFDFC);
	r0 = D(r0, s1_2_0, 0xEEF30002, 0xFBFFFE00, 0x1C04000C, 0x3306F9F2);
	r1 = D(r1, s1_2_0, 0x0CF805FC, 0x0EBB0EFF, 0x08180001, 0xE8E4FE01);
	r2 = D(r2, s1_2_0, 0x0914FCEE, 0xF6F706FF, 0xE6F40109, 0xF4050101);
	r3 = D(r3, s1_2_0, 0x0E1DFFFE, 0x0C0D0104, 0x0BF4F6F2, 0xFCF308FB);
	r4 = D(r4, s1_2_0, 0x3B120105, 0xEDEDECF2, 0x0F0005FF, 0x0CF9FFF2);
	r5 = D(r5, s1_2_0, 0x2308030C, 0x090BFDF9, 0x05F70500, 0x02060306);
	r6 = D(r6, s1_2_0, 0x05FB01EC, 0xFF0302FF, 0x1319EEFD, 0xDBEFF9FA);
	r7 = D(r7, s1_2_0, 0x10F700F7, 0xD8EEF9E9, 0xD6E70404, 0x08E2F4E2);
	r0 = D(r0, s1_2_1, 0xF61510E8, 0xF1F4FCF8, 0x0E1E09F4, 0x2117F903);
	r1 = D(r1, s1_2_1, 0xEFCB1103, 0xE8CFF8F3, 0xFC1D0516, 0x13C6F800);
	r2 = D(r2, s1_2_1, 0x070108F0, 0x0FFC02FA, 0x05F907F8, 0xE8F70D01);
	r3 = D(r3, s1_2_1, 0xFBF7120B, 0xE7FEF4FB, 0x0E81EC19, 0x0F06FF05);
	r4 = D(r4, s1_2_1, 0xFB14F9F7, 0xFFE9E118, 0xF101FEFF, 0x1AFD07E4);
	r5 = D(r5, s1_2_1, 0xFD09FFFE, 0x08080106, 0x1408FB02, 0x014E0209);
	r6 = D(r6, s1_2_1, 0x0F0405FF, 0xFC2DF90D, 0x07D6080C, 0x07F00903);
	r7 = D(r7, s1_2_1, 0x0B02FC06, 0x2E0113F1, 0xD5DEFEFB, 0x3CD7E5E1);
	r0 = D(r0, s1_2_2, 0xF7F90506, 0xFBFBFCFE, 0x060406F6, 0x0B0106FD);
	r1 = D(r1, s1_2_2, 0xFDCF0D10, 0x08ED0802, 0x00FC06FA, 0xF3F7FDEF);
	r2 = D(r2, s1_2_2, 0x0D060CF7, 0xFE0C05F7, 0xFC030402, 0xFF0C0A00);
	r3 = D(r3, s1_2_2, 0x30F10DFD, 0xF11001FA, 0x04B0FD33, 0x15EC09FC);
	r4 = D(r4, s1_2_2, 0x1709110F, 0x000ED4E9, 0xF903E81F, 0x09040FE6);
	r5 = D(r5, s1_2_2, 0x09F803F7, 0x01F5FE09, 0xFFFC0101, 0xFF010CEB);
	r6 = D(r6, s1_2_2, 0xFC0B0EEE, 0xFD080002, 0x11050600, 0x1302FFFF);
	r7 = D(r7, s1_2_2, 0x0AFA0AF5, 0xE2F706DA, 0xDE07EC01, 0x1820DDD1);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(1.862e-03, 1.374e-03, -4.785e-03, -1.498e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-3.931e-03, -1.539e-02, 4.226e-03, -2.264e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-5.437e-03, 7.920e-04, -2.525e-03, 6.493e-03);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-1.294e-02, 1.571e-03, -2.390e-02, 9.959e-04);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-8.487e-04, -2.321e-02, -8.768e-03, -1.627e-02);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-7.909e-03, -6.310e-02, -1.241e-02, -2.745e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.714e-02, -2.943e-03, -2.900e-03, -4.469e-03);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.114e-02, -1.601e-02, -7.201e-03, -2.864e-02);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-TEST-conv4
//!HOOK LUMA
//!COMPUTE 32 16 8 8
//!BIND conv3
//!BIND LUMA
//!SAVE conv4
//!WIDTH LUMA.w 4 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_spirv_intrinsics : require
spirv_instruction (extensions = ["SPV_KHR_integer_dot_product"], capabilities = [6019, 6018], id = 4450)
int dp4(int a, int b, spirv_literal int fmt);
#define D(r, s, a, b, c, d) r + ivec4(dp4(s, a, 0), dp4(s, b, 0), dp4(s, c, 0), dp4(s, d, 0))
shared int G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(4, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			vec4 r, g, b, a;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v0 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v1 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v2 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v3 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv3_pt;
			r = conv3_gather(p, 0);
			g = conv3_gather(p, 1);
			b = conv3_gather(p, 2);
			a = conv3_gather(p, 3);
			vec4 v4 = vec4(r.w, g.w, b.w, a.w) * 1.0000000e+00;
			vec4 v5 = vec4(r.z, g.z, b.z, a.z) * 1.0000000e+00;
			vec4 v6 = vec4(r.x, g.x, b.x, a.x) * 1.0000000e+00;
			vec4 v7 = vec4(r.y, g.y, b.y, a.y) * 1.0000000e+00;
			G[0][ay][ax] = int(packSnorm4x8(v0));
			G[1][ay][ax] = int(packSnorm4x8(v1));
			G[2][ay][ax] = int(packSnorm4x8(v2));
			G[3][ay][ax] = int(packSnorm4x8(v3));
			G[4][ay][ax] = int(packSnorm4x8(v4));
			G[5][ay][ax] = int(packSnorm4x8(v5));
			G[6][ay][ax] = int(packSnorm4x8(v6));
			G[7][ay][ax] = int(packSnorm4x8(v7));
		}
	}
	barrier();
	int s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	ivec4 r0, r1, r2, r3, r4, r5, r6, r7;
	vec4 f0, f1, f2, f3, f4, f5, f6, f7;
	r0 = ivec4(0); r1 = ivec4(0); r2 = ivec4(0); r3 = ivec4(0); r4 = ivec4(0); r5 = ivec4(0); r6 = ivec4(0); r7 = ivec4(0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x02FDFB06, 0x01FE04FF, 0xFAF83004, 0xFAE32017);
	r1 = D(r1, s0_0_0, 0xFEFA0501, 0x00FD0401, 0xFAF90A00, 0xFB02EAFF);
	r2 = D(r2, s0_0_0, 0xFEFE07FF, 0x03F8FEFF, 0x00000000, 0xF9001406);
	r3 = D(r3, s0_0_0, 0x0103EF06, 0x0300FB01, 0x02EB1C05, 0xEA000418);
	r4 = D(r4, s0_0_0, 0xFD0509EC, 0x0001100E, 0x00FA0806, 0xFE05FFF6);
	r5 = D(r5, s0_0_0, 0x070201FF, 0x04EB1A00, 0xF109ECE9, 0x0205FCF7);
	r6 = D(r6, s0_0_0, 0x07FDEC03, 0x01FE0201, 0x03FE0BFC, 0xFCDB31E1);
	r7 = D(r7, s0_0_0, 0xFE08FA00, 0x01000104, 0xFBF01D0A, 0xFE010703);
	r0 = D(r0, s0_0_1, 0x000806F9, 0x0605FCF3, 0xF902E8F8, 0x010A16F6);
	r1 = D(r1, s0_0_1, 0x00010A07, 0x02FA0A05, 0x01010CF7, 0x0803EC05);
	r2 = D(r2, s0_0_1, 0x03020001, 0x02060208, 0x0200F902, 0x03040515);
	r3 = D(r3, s0_0_1, 0xFBFB1400, 0x0604F0FC, 0xF90EE80C, 0x0F0300F9);
	r4 = D(r4, s0_0_1, 0x03F8110F, 0xFB04030F, 0x00F9FE02, 0x02FC0708);
	r5 = D(r5, s0_0_1, 0x0209FDF6, 0x0FFA0908, 0xEBEE2CE8, 0xF6EC0205);
	r6 = D(r6, s0_0_1, 0x13EB360F, 0x08000101, 0x0300F80A, 0x12161BE0);
	r7 = D(r7, s0_0_1, 0xF706F9FF, 0x08FDF8F2, 0xFBF8F5F5, 0xFEF82410);
	r0 = D(r0, s0_0_2, 0x01FF0109, 0xF9FDF90B, 0xFEFEFD0B, 0xFFFEF1FA);
	r1 = D(r1, s0_0_2, 0x04FFFDFC, 0x0004EFF7, 0xFB02F810, 0x050602FF);
	r2 = D(r2, s0_0_2, 0x00000000, 0xF7FC0902, 0x00FF0101, 0x03060401);
	r3 = D(r3, s0_0_2, 0xFF02F6FB, 0xFF05FC02, 0xFA0802F3, 0x060BE318);
	r4 = D(r4, s0_0_2, 0xFBFEFE02, 0xFA000000, 0x03FB0003, 0xFEFA0205);
	r5 = D(r5, s0_0_2, 0xFB0408FC, 0xF9FF01F9, 0x010DFFF1, 0x050C02FE);
	r6 = D(r6, s0_0_2, 0xEFE0FED5, 0x0001F901, 0xF602FEF6, 0xFAED0307);
	r7 = D(r7, s0_0_2, 0xFAFF04FF, 0xF6000002, 0x0100FA03, 0xFE000303);
	r0 = D(r0, s0_1_0, 0xF8FD01E3, 0x0904FAF8, 0xFDEDF307, 0xE6C5E39B);
	r1 = D(r1, s0_1_0, 0x02030003, 0x01FEFB03, 0xFFF5030E, 0xFF062D00);
	r2 = D(r2, s0_1_0, 0xFDFBD407, 0xFF0301F7, 0x00FFFF00, 0xF6E5EAFF);
	r3 = D(r3, s0_1_0, 0x01EDFD07, 0x01FE0004, 0xE4F7F5FA, 0x0FCF3A01);
	r4 = D(r4, s0_1_0, 0xF3FC23F5, 0x09FF19FE, 0xFDFEF303, 0xFBFA0809);
	r5 = D(r5, s0_1_0, 0xFF010001, 0x0DFF0109, 0x00FB01FC, 0x030000FC);
	r6 = D(r6, s0_1_0, 0xFDF8F805, 0xFD0408FD, 0x0AFFF4EE, 0x0A12E4FE);
	r7 = D(r7, s0_1_0, 0xFEFF0D01, 0xFCFFF8FF, 0xFBE5E703, 0x00FE0A02);
	r0 = D(r0, s0_1_1, 0xEFF21017, 0xEFCB0B07, 0xE5F90FF3, 0xEF0FEB00);
	r1 = D(r1, s0_1_1, 0xFFF513E5, 0xEBFB23F8, 0xF7DA15F5, 0xFBE52711);
	r2 = D(r2, s0_1_1, 0x0C0305FA, 0xF910E1D7, 0x00FF2DFF, 0x08EFEEFF);
	r3 = D(r3, s0_1_1, 0xF2F123E9, 0xF7CFF9EE, 0xD7E530D0, 0xC3C502DB);
	r4 = D(r4, s0_1_1, 0xEFDC03E5, 0xE5F72AE7, 0xD2F01FEB, 0xF9E420D2);
	r5 = D(r5, s0_1_1, 0xEE04DBEA, 0xCB06FFEB, 0xC2D9238A, 0xFBCB1BFB);
	r6 = D(r6, s0_1_1, 0xE9F21DC4, 0x0606F8F6, 0xEDF8E9FA, 0xBCAACE8D);
	r7 = D(r7, s0_1_1, 0xF3E8FAFF, 0xF1E51ADE, 0xF4E5180A, 0x03FDECF8);
	r0 = D(r0, s0_1_2, 0x010DF6FD, 0xEDE3F9D4, 0xF8FF02FA, 0x0806F6ED);
	r1 = D(r1, s0_1_2, 0xFCF20C10, 0x0117ECEE, 0x07EA16DE, 0xE404F9F9);
	r2 = D(r2, s0_1_2, 0x0100FFFF, 0xFCE4011D, 0xFF0000FF, 0x02FB04F0);
	r3 = D(r3, s0_1_2, 0xF90CFAE6, 0xFFF90BFC, 0xFAFA0B00, 0xC4C70BD7);
	r4 = D(r4, s0_1_2, 0xEB0A01F3, 0xF6030300, 0xFC07FF01, 0xF611EFFF);
	r5 = D(r5, s0_1_2, 0xEADA1809, 0xFD1B02DC, 0xF20AE40A, 0x0E10F3E8);
	r6 = D(r6, s0_1_2, 0xC61DDD81, 0xFE00F2FC, 0x00020FF2, 0x03F8EE2D);
	r7 = D(r7, s0_1_2, 0x030CFBFB, 0xF912F501, 0x000708FF, 0xFDFD01FA);
	r0 = D(r0, s0_2_0, 0xF904EFFD, 0x02EA0601, 0x0D04FD07, 0xD7CE13E3);
	r1 = D(r1, s0_2_0, 0xFFFD0105, 0x020005FF, 0xFFFCEF0C, 0xF7F22518);
	r2 = D(r2, s0_2_0, 0x02FFF203, 0xFB00FFFC, 0x0001FF00, 0xFEFF0AF4);
	r3 = D(r3, s0_2_0, 0x01FDFD01, 0x0B0407FD, 0x0D050700, 0x02E70FF5);
	r4 = D(r4, s0_2_0, 0xEDFBFAFD, 0xFE00F803, 0x07FF0303, 0xF8FEFA05);
	r5 = D(r5, s0_2_0, 0x040403FC, 0xFF08F3FE, 0x0AF8FD0F, 0xFCF807FF);
	r6 = D(r6, s0_2_0, 0x15010AEB, 0x02FEFEFE, 0xF7F006EA, 0xFBF5F5EA);
	r7 = D(r7, s0_2_0, 0xFC00F801, 0x02F505FE, 0x05FCF707, 0xFF00FF00);
	r0 = D(r0, s0_2_1, 0xF8EB26F0, 0xEEFBF8EE, 0xFAF207FF, 0xF9011209);
	r1 = D(r1, s0_2_1, 0x0002E906, 0x00FE06FF, 0xF911F902, 0x2AC8FB01);
	r2 = D(r2, s0_2_1, 0xFD00FF04, 0xF5020AEB, 0xFE0006FE, 0x1FFD0D02);
	r3 = D(r3, s0_2_1, 0xEAF3F9FB, 0xFF01FC0B, 0xFAFC04F3, 0xF105EC1B);
	r4 = D(r4, s0_2_1, 0xFD0DEC0A, 0x00FFFA00, 0xF201DD08, 0xF60203F6);
	r5 = D(r5, s0_2_1, 0x06FBEA09, 0x04E91204, 0xFFFBD6DB, 0xF1FCFC04);
	r6 = D(r6, s0_2_1, 0xFF040EEE, 0x060D0E02, 0xE8DF1EF4, 0xF90B09D2);
	r7 = D(r7, s0_2_1, 0xFFFD11FC, 0xEDFFF9FE, 0x00F7F5FF, 0xFF040001);
	r0 = D(r0, s0_2_2, 0xF90C01FC, 0xFA0804F1, 0xED16F9F3, 0x030EF7FC);
	r1 = D(r1, s0_2_2, 0x00FA0403, 0x0509FB01, 0xFF04FBFE, 0xFEECFB10);
	r2 = D(r2, s0_2_2, 0x00000001, 0x03F8060F, 0x030002FF, 0x040A04FB);
	r3 = D(r3, s0_2_2, 0x00FF0405, 0x07000000, 0xD900EE01, 0x07EBEB01);
	r4 = D(r4, s0_2_2, 0xEAE919F4, 0x03FF01FE, 0xF3F30809, 0xF403FD05);
	r5 = D(r5, s0_2_2, 0xF7EE0A00, 0xF61AFCED, 0x0FEE1017, 0x0706FFFE);
	r6 = D(r6, s0_2_2, 0xCB10E906, 0xFCFF04F9, 0x010AEFF1, 0xFA0D0825);
	r7 = D(r7, s0_2_2, 0xFF0202FF, 0xFA0404FC, 0xEB0004F9, 0x0201FF01);
	r0 = D(r0, s1_0_0, 0x04FE03FB, 0x02FCFC09, 0xFAFC16F4, 0xF4E0F111);
	r1 = D(r1, s1_0_0, 0xFCFCFFFC, 0x00FEFEFF, 0xF7F700FB, 0x0800F0F7);
	r2 = D(r2, s1_0_0, 0x00FD00FF, 0xFDFCFD03, 0xFF010001, 0xFE0102C7);
	r3 = D(r3, s1_0_0, 0xFC0504FC, 0x03FEFB02, 0x00F30CE9, 0x09FA818D);
	r4 = D(r4, s1_0_0, 0xFDFCF7F0, 0xFD0001F3, 0x00FA04F5, 0xFDFDFD00);
	r5 = D(r5, s1_0_0, 0x07070803, 0x0AE4FDF8, 0xEAF5F536, 0xFEFE0206);
	r6 = D(r6, s1_0_0, 0xF20E1205, 0x00FF0202, 0x00020303, 0xFA25FE05);
	r7 = D(r7, s1_0_0, 0x000202F9, 0xFCFD02FA, 0xF6F6F9EF, 0xFEFD01FC);
	r0 = D(r0, s1_0_1, 0xFCF90006, 0xFAF9EFE4, 0x0108FEE4, 0xFF10EAEF);
	r1 = D(r1, s1_0_1, 0x0003FF01, 0x06FAFEFD, 0xFDF90CFC, 0xFBFA05FF);
	r2 = D(r2, s1_0_1, 0xFF00FFFF, 0xFDF7F604, 0xFF0200FF, 0xFCFCF9F8);
	r3 = D(r3, s1_0_1, 0x020506FB, 0xFD03D7F2, 0x0A0402F4, 0xFB0E8181);
	r4 = D(r4, s1_0_1, 0x01EED2EA, 0xFF0202FC, 0xFDFDF8FC, 0xFC000904);
	r5 = D(r5, s1_0_1, 0x05F7FEEF, 0xECF5F30D, 0x08F404FC, 0x05F503FA);
	r6 = D(r6, s1_0_1, 0x17F8D0F8, 0x01FE0101, 0xF4F1E1FE, 0x09DBD231);
	r7 = D(r7, s1_0_1, 0xFD0F00F6, 0xFDF6FC02, 0x030009F4, 0xFDFC03FA);
	r0 = D(r0, s1_0_2, 0x00FBF6FC, 0xFEFB18FF, 0x02F1EAFF, 0xFE01010D);
	r1 = D(r1, s1_0_2, 0xFF0306FE, 0xFC05FD02, 0xF90F110A, 0x0B0209F6);
	r2 = D(r2, s1_0_2, 0x000000FF, 0x0200FBFF, 0x00010000, 0x05000500);
	r3 = D(r3, s1_0_2, 0xFE00FD00, 0x0204F0F9, 0x060901F3, 0x1AEB81E0);
	r4 = D(r4, s1_0_2, 0x0102060A, 0xFFFFFF01, 0x07FB0102, 0xF8040009);
	r5 = D(r5, s1_0_2, 0xF9030000, 0xF7F4140C, 0xFFFE04F8, 0xFBF9FD08);
	r6 = D(r6, s1_0_2, 0xF4EAF4F5, 0xFE0402FF, 0xFF050B05, 0x081005F3);
	r7 = D(r7, s1_0_2, 0x03FCFEFF, 0x02F2FE09, 0x03FFFA01, 0xFFFE0200);
	r0 = D(r0, s1_1_0, 0xFB07EF0A, 0xF6EF0BF0, 0x08D0F9EC, 0x02B01E02);
	r1 = D(r1, s1_1_0, 0xFF05FEFF, 0x02F9FFFD, 0x100200EE, 0xEDF536E0);
	r2 = D(r2, s1_1_0, 0x01FB0001, 0xFB040503, 0x01FE0000, 0x0705EFC9);
	r3 = D(r3, s1_1_0, 0xFDF1F601, 0xFF00FDF7, 0x0905F59E, 0xE10826E3);
	r4 = D(r4, s1_1_0, 0x03D904FA, 0xFE0603F8, 0x02FCFB02, 0x01F8FDF9);
	r5 = D(r5, s1_1_0, 0x08F2FE02, 0x0FDCF903, 0x080A0BE8, 0x03080304);
	r6 = D(r6, s1_1_0, 0xEDE70202, 0xFCFCFD01, 0x07EB05F4, 0x08E0F714);
	r7 = D(r7, s1_1_0, 0xFAFD00FA, 0xFCF2FEFB, 0x01DF0CDD, 0x040200FC);
	r0 = D(r0, s1_1_1, 0x07F00B04, 0x0DE90BEF, 0xF5D4FBFD, 0xF5E2F80A);
	r1 = D(r1, s1_1_1, 0x03F807EA, 0xFBF702FD, 0x21FAFAB6, 0xDC111A0B);
	r2 = D(r2, s1_1_1, 0xFE01FF01, 0x12E80CFD, 0xFF01FFFE, 0x020FCAFA);
	r3 = D(r3, s1_1_1, 0x05E7FFF5, 0xEC0400E8, 0xF40513D5, 0xED1223D0);
	r4 = D(r4, s1_1_1, 0xE3F0FDF9, 0xFEF90207, 0xECEF08EB, 0x09D90201);
	r5 = D(r5, s1_1_1, 0x0504F5F0, 0xE1C5FF0D, 0xF0E209FE, 0x12D20BE9);
	r6 = D(r6, s1_1_1, 0xDB8CDC1C, 0xFE0600F8, 0x06F712EB, 0x17E70A0A);
	r7 = D(r7, s1_1_1, 0xECF20404, 0x0EEC0AF3, 0xE5E0EAFE, 0x010204F6);
	r0 = D(r0, s1_1_2, 0x00FC0501, 0x0ED1F0FE, 0x02FE1812, 0x0D07FD03);
	r1 = D(r1, s1_1_2, 0x02FCFC00, 0xF30AFB01, 0x03F3FAFC, 0xDB30220C);
	r2 = D(r2, s1_1_2, 0x000101FF, 0x09ECFB01, 0x01FFFFFF, 0x0102DD05);
	r3 = D(r3, s1_1_2, 0xFC09FF02, 0xF9F3FE06, 0xF9EFFE04, 0xE21F260A);
	r4 = D(r4, s1_1_2, 0xFBF7FEEE, 0x020101FD, 0xF7FD02F5, 0xFDFAF9F8);
	r5 = D(r5, s1_1_2, 0x03CE030D, 0xF3121100, 0xFDD7EAFA, 0xF702F905);
	r6 = D(r6, s1_1_2, 0x03A91810, 0x0001FCFF, 0x02DEF305, 0x16C4E710);
	r7 = D(r7, s1_1_2, 0xFEFF02FE, 0x02FBFEF5, 0xFC050DFD, 0x0100FFFF);
	r0 = D(r0, s1_2_0, 0xF8F2FEFB, 0x05F6F4FE, 0x050803EE, 0xDDF30713);
	r1 = D(r1, s1_2_0, 0xF900FF00, 0xFF020000, 0x00100603, 0x37200181);
	r2 = D(r2, s1_2_0, 0x0401FFFB, 0xF502FBFB, 0x000000FF, 0xFD020304);
	r3 = D(r3, s1_2_0, 0x09F908F5, 0x04FE07F9, 0x07FEFE11, 0x2A15409B);
	r4 = D(r4, s1_2_0, 0x0107E1E3, 0x0001FEFD, 0xF1FC00FF, 0xFF04FCFF);
	r5 = D(r5, s1_2_0, 0x020107FE, 0x040404F4, 0x17F609FE, 0xF8FDF904);
	r6 = D(r6, s1_2_0, 0xEBF215FE, 0x0907FFFD, 0xF8ED02EB, 0xE024221B);
	r7 = D(r7, s1_2_0, 0xFE0100F9, 0x03F209EF, 0xFDF0EEE5, 0x01000000);
	r0 = D(r0, s1_2_1, 0xFDECFF0B, 0x21EF11F2, 0xF5E113EC, 0xF301F6FB);
	r1 = D(r1, s1_2_1, 0xF9FDFCFA, 0xF801FBF9, 0xF906EDED, 0xFDECEC81);
	r2 = D(r2, s1_2_1, 0xFF01FF02, 0xFEFD0217, 0xFEFF0002, 0x05060507);
	r3 = D(r3, s1_2_1, 0xFFFAF6F6, 0x08FF0001, 0xFFEEFACE, 0xFEF81FA4);
	r4 = D(r4, s1_2_1, 0x04EA0DEE, 0xFE0408F7, 0xE8F3FDF6, 0xFC05EACF);
	r5 = D(r5, s1_2_1, 0x01FE06FA, 0xE6021507, 0xE7E5F1F5, 0x03FEFBFA);
	r6 = D(r6, s1_2_1, 0x1CFAEAF1, 0x05F702F5, 0x0BECF704, 0x0D049F27);
	r7 = D(r7, s1_2_1, 0xFB0205FC, 0xF5FEFF09, 0xEDF821FA, 0x00FFFFFF);
	r0 = D(r0, s1_2_2, 0x00090201, 0xF2F0FCD1, 0x0BE6EAFA, 0xFC000400);
	r1 = D(r1, s1_2_2, 0xFC010501, 0xFB020603, 0x0102F4EA, 0x24ECD5F5);
	r2 = D(r2, s1_2_2, 0x0001FF00, 0x010000F8, 0x00000000, 0x04FCFFFD);
	r3 = D(r3, s1_2_2, 0xFF02FB08, 0x050807FC, 0xF80AEE09, 0x180541FF);
	r4 = D(r4, s1_2_2, 0xECF1F205, 0xFE01FE00, 0xF4F6FE02, 0xFB00F709);
	r5 = D(r5, s1_2_2, 0xECFF0704, 0x06F0E705, 0xEAED0714, 0xFC03020A);
	r6 = D(r6, s1_2_2, 0x15D6F60F, 0x040100FE, 0xFB0E0602, 0x05E51EF9);
	r7 = D(r7, s1_2_2, 0x01FFFE02, 0x00FC0105, 0xFEF9F001, 0xFFFF01FE);
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x03FEF702, 0x010901FE, 0xECF7F9E5, 0xDAFACAD1);
	r1 = D(r1, s0_0_0, 0x0301F903, 0xFCFF03FF, 0xFFFC0604, 0x0A09F112);
	r2 = D(r2, s0_0_0, 0x030CF606, 0x0401FD08, 0x00FE02FF, 0x05F6020E);
	r3 = D(r3, s0_0_0, 0x01010603, 0x090600FF, 0xFCF00403, 0x0B09F0FC);
	r4 = D(r4, s0_0_0, 0xF905DAF3, 0xFBFA0200, 0xFEFB07FB, 0x01FEFD05);
	r5 = D(r5, s0_0_0, 0xF9FD0FFD, 0xF0EEFFF1, 0xD206EC3B, 0x0607FD07);
	r6 = D(r6, s0_0_0, 0x0D050200, 0xFF0006FE, 0xF4FC0BFB, 0xE9C5E00E);
	r7 = D(r7, s0_0_0, 0x050303F7, 0x060308FD, 0xFEE9F1EC, 0x0103FA04);
	r0 = D(r0, s0_0_1, 0xF7F705FB, 0x0700FCFC, 0x09011012, 0x110BF911);
	r1 = D(r1, s0_0_1, 0xFDF70B00, 0x0403ED09, 0xF4FBFC15, 0x0B0C04F0);
	r2 = D(r2, s0_0_1, 0xFDFF01F8, 0xF3F6FEFA, 0xFFFB03FC, 0xE9FEFF13);
	r3 = D(r3, s0_0_1, 0x06F709F7, 0x090603FF, 0xF915E32E, 0xFCF60AF8);
	r4 = D(r4, s0_0_1, 0xF60418CD, 0xFEF9FF1D, 0x0604F8E8, 0xF9FDFA07);
	r5 = D(r5, s0_0_1, 0x01FFE418, 0xE8F7DAFE, 0xE3E90BA4, 0xF7F20504);
	r6 = D(r6, s0_0_1, 0xCDF0DFCD, 0xFFFE0006, 0x0606FF09, 0xE70FCDBC);
	r7 = D(r7, s0_0_1, 0xFCF4FFFD, 0xFB06FC09, 0xFF09FDEF, 0xF6FBFD16);
	r0 = D(r0, s0_0_2, 0x01010006, 0xF6F6FB0C, 0xEAFA08E4, 0x04FAFBEB);
	r1 = D(r1, s0_0_2, 0x00FDFD12, 0xFBFA08EC, 0xF6F60CFD, 0xFCF1FDE9);
	r2 = D(r2, s0_0_2, 0x0000FF00, 0x0D05FF0E, 0x01FE0002, 0xF707F8FA);
	r3 = D(r3, s0_0_2, 0xF0FCFB01, 0xF904F4F9, 0xFFF70ADE, 0xE311D6EE);
	r4 = D(r4, s0_0_2, 0xFC04F401, 0xFB01FF00, 0xF9FD02E7, 0x02FD0610);
	r5 = D(r5, s0_0_2, 0xFA04030E, 0xEE02FDBE, 0xF201FD0F, 0xF9FB02EC);
	r6 = D(r6, s0_0_2, 0x0BE4F012, 0x0402FF12, 0x00F8FE09, 0x02120F1D);
	r7 = D(r7, s0_0_2, 0xFC02FAE9, 0x05F9FD0C, 0x01FC05F4, 0xFB05F904);
	r0 = D(r0, s0_1_0, 0x0105F302, 0xF90BEE00, 0x00FDF701, 0xBAACECC7);
	r1 = D(r1, s0_1_0, 0xF608F900, 0x07FB0001, 0x0F02FBFF, 0xEA1AF62A);
	r2 = D(r2, s0_1_0, 0xFC10DBF0, 0x0808F103, 0xFFFFFEFF, 0xCDF1F80F);
	r3 = D(r3, s0_1_0, 0xFCFE0DF8, 0xEEF7F409, 0x17FFE2FD, 0xDCDFE502);
	r4 = D(r4, s0_1_0, 0xF0F70FE0, 0x040FFB01, 0xFCFDFB03, 0x08FF1106);
	r5 = D(r5, s0_1_0, 0x05F913F8, 0x00FC00FE, 0xD4E818FB, 0xFE07FB04);
	r6 = D(r6, s0_1_0, 0xF6EFEE0D, 0x02FEFD05, 0x14090504, 0xD7B5E621);
	r7 = D(r7, s0_1_0, 0xF7FE0EFC, 0x0006F006, 0xE204FCE0, 0xFB05FCFF);
	r0 = D(r0, s0_1_1, 0xFEEC0E06, 0xF9F90B18, 0xE7F6CD06, 0x0BF02EF7);
	r1 = D(r1, s0_1_1, 0xECFAF2DD, 0xF518FA00, 0xEF0CDA02, 0xFA09F9FB);
	r2 = D(r2, s0_1_1, 0x03FA100B, 0xE3DAFAF2, 0x00F81F05, 0x03ECFD30);
	r3 = D(r3, s0_1_1, 0xFAFFCA0B, 0xEEEB0419, 0xDEEDDDB2, 0xC3EEE4FC);
	r4 = D(r4, s0_1_1, 0xD1F30907, 0xFB0906DE, 0xE0E90BD5, 0xFB14C108);
	r5 = D(r5, s0_1_1, 0xE805E910, 0xD9EBE506, 0xE1EBD09F, 0xF20107FD);
	r6 = D(r6, s0_1_1, 0x01F6ECAF, 0xFAFDEFF8, 0xEDF2EE0D, 0xD4168615);
	r7 = D(r7, s0_1_1, 0xE1FFF213, 0xFDF5E712, 0xFCF011E8, 0xFB06FF08);
	r0 = D(r0, s0_1_2, 0xF8FDF9FD, 0x04FEEC00, 0xF00811CF, 0xF501FBE8);
	r1 = D(r1, s0_1_2, 0x00FF04F8, 0x05F51305, 0xF110EFE9, 0xF1EB1F1F);
	r2 = D(r2, s0_1_2, 0x0000FF01, 0x070602F1, 0x0100FBFF, 0x0C0701F5);
	r3 = D(r3, s0_1_2, 0xFD09F513, 0x05090EFF, 0xF1001ABD, 0x01030F10);
	r4 = D(r4, s0_1_2, 0xF508F5F9, 0xFDFFFEF8, 0xFF07F900, 0xF6010D0C);
	r5 = D(r5, s0_1_2, 0x08FB0AE8, 0x050AF0EA, 0xF5052336, 0x03F50EFF);
	r6 = D(r6, s0_1_2, 0xCAF1FBBB, 0xF6000502, 0x0A07FCFE, 0xF80D3402);
	r7 = D(r7, s0_1_2, 0xF905FBFF, 0x0202FB0B, 0xFA05E8F3, 0xFF03FFFD);
	r0 = D(r0, s0_2_0, 0xE4F400FC, 0xFEFEF90A, 0xFFFEFD09, 0xDED8F902);
	r1 = D(r1, s0_2_0, 0xF504F7FF, 0x00030101, 0xF5020003, 0xD0BCB1DD);
	r2 = D(r2, s0_2_0, 0x03FFFD04, 0xE803FC01, 0x010000FF, 0x0F0510EF);
	r3 = D(r3, s0_2_0, 0x09030E05, 0x0D08FDF9, 0xED0803F1, 0xFDF8D607);
	r4 = D(r4, s0_2_0, 0xF709F310, 0xFBFFF702, 0xF406FEFE, 0xF700F805);
	r5 = D(r5, s0_2_0, 0x0A0709FF, 0xF7050E13, 0xE90108EE, 0xFC02FB01);
	r6 = D(r6, s0_2_0, 0x030903EC, 0xFC03FB03, 0x00FEE31B, 0xCADF070A);
	r7 = D(r7, s0_2_0, 0x01FD0203, 0x0301F805, 0xEF04F70C, 0xFF00FFFF);
	r0 = D(r0, s0_2_1, 0x0AEB08F4, 0x03FEEA09, 0xF0FF15F4, 0x05E50007);
	r1 = D(r1, s0_2_1, 0xF806F90B, 0xFEFC0300, 0xFF00FD07, 0xC6EDAA0B);
	r2 = D(r2, s0_2_1, 0x010302FE, 0x06F80702, 0x000100FE, 0xFBFB0AEE);
	r3 = D(r3, s0_2_1, 0xF3DBFF0D, 0x0101FCF6, 0xC6E71F05, 0xFA09E609);
	r4 = D(r4, s0_2_1, 0x0B02F0FB, 0x0205F809, 0xFB050211, 0x07F7000B);
	r5 = D(r5, s0_2_1, 0xEBF6F8FE, 0xEDF709ED, 0xE3F9F6E8, 0xF9FD0109);
	r6 = D(r6, s0_2_1, 0xE30324F7, 0x030205F4, 0x09EF08F8, 0x030E13F6);
	r7 = D(r7, s0_2_1, 0x010008F9, 0xFBF0040D, 0xED050D02, 0x00FEFE01);
	r0 = D(r0, s0_2_2, 0x00FE0102, 0xFF01FB09, 0x0802F70A, 0x040EF7F9);
	r1 = D(r1, s0_2_2, 0xFC0206FC, 0x04FEFFFD, 0x0601EE08, 0xE61FF6EC);
	r2 = D(r2, s0_2_2, 0x00FF0001, 0xFDF6FCF8, 0x00FE0000, 0xFE00FDFC);
	r3 = D(r3, s0_2_2, 0x040B06F8, 0x01FAFE05, 0xFE0BF50F, 0x050DF909);
	r4 = D(r4, s0_2_2, 0xEEF531EA, 0x0001FB02, 0xFCFD0EEF, 0x03FAFD06);
	r5 = D(r5, s0_2_2, 0xEEEA0CFC, 0x0DFEF803, 0xEEE70FED, 0x05FCFEFB);
	r6 = D(r6, s0_2_2, 0xDCBBDB19, 0x00FC02FD, 0xFCFB051A, 0x08E4E4E2);
	r7 = D(r7, s0_2_2, 0x00FC08FE, 0x020306FD, 0xFEFB13FF, 0x0001FE00);
	r0 = D(r0, s1_0_0, 0x0102F8FC, 0x07030C03, 0x10ECFCF0, 0xD3C681A5);
	r1 = D(r1, s1_0_0, 0xFD010501, 0x03FEFDFC, 0x06E3FA03, 0x0106E8FC);
	r2 = D(r2, s1_0_0, 0xFFFDFD00, 0x0508FF00, 0xFF000000, 0xFDE6F008);
	r3 = D(r3, s1_0_0, 0xFF00FFF7, 0xFF0205FD, 0x0AF8F913, 0x04E5C8E5);
	r4 = D(r4, s1_0_0, 0xF7D31008, 0xFDEBFEF4, 0x03F803FD, 0xFEFFFA03);
	r5 = D(r5, s1_0_0, 0x06FAFD04, 0x07CFFCDA, 0xD410F0CF, 0xFF030BFF);
	r6 = D(r6, s1_0_0, 0x14120CF7, 0x00FEFEFE, 0x030606FE, 0x0CF2F006);
	r7 = D(r7, s1_0_0, 0xFB02F8FF, 0x02020DFF, 0x02E50CF8, 0x00FBFFFA);
	r0 = D(r0, s1_0_1, 0x00E4F409, 0xFFD5E4FD, 0xF7EE0BFF, 0x21FD2B1C);
	r1 = D(r1, s1_0_1, 0x05F009FD, 0xFFEFFE04, 0x01E6FD06, 0xFFFDE200);
	r2 = D(r2, s1_0_1, 0xFE01FF03, 0xF7F8D801, 0x00000000, 0x04F2FB0B);
	r3 = D(r3, s1_0_1, 0x09E10508, 0x03F4DBFD, 0xFED40412, 0xFBE79A07);
	r4 = D(r4, s1_0_1, 0x09D9F3F3, 0xFEF70BFF, 0x00F50803, 0xF703FEF8);
	r5 = D(r5, s1_0_1, 0xF000FFE0, 0x07D4EE2D, 0x109EFC19, 0x06E1EFE6);
	r6 = D(r6, s1_0_1, 0xF7DDAF81, 0xFE0206FE, 0x01FE0DFA, 0xF183C7EC);
	r7 = D(r7, s1_0_1, 0xFFFA0302, 0xFDE0DCFF, 0x010904ED, 0x00FE0000);
	r0 = D(r0, s1_0_2, 0x0406FAFD, 0xFAFCFEF6, 0x09040804, 0x18F504FB);
	r1 = D(r1, s1_0_2, 0x03F90407, 0xFB00F703, 0xFDF7F3FF, 0x00FCE6F8);
	r2 = D(r2, s1_0_2, 0xFF000200, 0x05040D06, 0x000100FF, 0xFF000604);
	r3 = D(r3, s1_0_2, 0xFE00F102, 0x03F6EB00, 0xFAF3FE14, 0x0CDAE1EC);
	r4 = D(r4, s1_0_2, 0xFFF508FE, 0x00FA02FE, 0x03FB08F4, 0x02FE0106);
	r5 = D(r5, s1_0_2, 0x08FAFF05, 0xF2F8E7E7, 0x01E6FDDA, 0xFF05F705);
	r6 = D(r6, s1_0_2, 0x23CCE123, 0x02FCFF00, 0x0205F309, 0xF8EAF80F);
	r7 = D(r7, s1_0_2, 0x000001F7, 0xFC020501, 0x05040C01, 0x01FE04FF);
	r0 = D(r0, s1_1_0, 0xF2FB01F4, 0xE7F4F9F3, 0xFFF405CE, 0x8BBADDF5);
	r1 = D(r1, s1_1_0, 0xFC030100, 0xFC01FDFA, 0x190FF7F4, 0xE8810128);
	r2 = D(r2, s1_1_0, 0x040E0016, 0xF301F9F5, 0x02FE0000, 0xFFFFEF01);
	r3 = D(r3, s1_1_0, 0xF704F9EE, 0xF3F5FA00, 0xF9F404E0, 0xEBDAFB28);
	r4 = D(r4, s1_1_0, 0x02F106C9, 0x050900EE, 0xF9FC02F1, 0x0B05FBFA);
	r5 = D(r5, s1_1_0, 0xFEFBFE08, 0xEBF703D8, 0x06D9FAFF, 0xF50100F3);
	r6 = D(r6, s1_1_0, 0xE4F2EBFB, 0x06FCF901, 0xFEFC02FE, 0xE6E8B7F0);
	r7 = D(r7, s1_1_0, 0x03F8FEF8, 0xF8E6FCFD, 0xF3EF1AC8, 0x020502FE);
	r0 = D(r0, s1_1_1, 0x0FF1E905, 0x02F5E5DD, 0x180EF6FD, 0xFB03E50E);
	r1 = D(r1, s1_1_1, 0xFD0802EF, 0xFCFFFBFF, 0x0B0EEAD6, 0xFCB41428);
	r2 = D(r2, s1_1_1, 0x0203FDFF, 0xEAECEEF9, 0x00FD00F9, 0x09FC17FB);
	r3 = D(r3, s1_1_1, 0xF606EB05, 0x05DEF3FB, 0xF30F0B0C, 0x19E6FE30);
	r4 = D(r4, s1_1_1, 0x05DAF8FF, 0xFC0EF30F, 0x08EE06DF, 0xFCFFE4F6);
	r5 = D(r5, s1_1_1, 0x8107FDD8, 0x1603E414, 0x81BDF0FB, 0xFDFEFFEE);
	r6 = D(r6, s1_1_1, 0xD8BDF6D4, 0xFD0C0011, 0xF8D9D4E0, 0xD4D00DF0);
	r7 = D(r7, s1_1_1, 0x08F5F70A, 0xF803DEF3, 0x0C030A08, 0x00FB02FC);
	r0 = D(r0, s1_1_2, 0x05FBFBF2, 0xF1F7D005, 0xF1F7FEED, 0x1AF4EB00);
	r1 = D(r1, s1_1_2, 0x0104080B, 0xFDF602EB, 0xF80AD50E, 0x00C80C37);
	r2 = D(r2, s1_1_2, 0x00000001, 0x0603F400, 0xFF030005, 0x0003050F);
	r3 = D(r3, s1_1_2, 0xF1FEF3FB, 0xFE080F0D, 0x0203FBFB, 0x0EF61530);
	r4 = D(r4, s1_1_2, 0xF5F40601, 0x020300FC, 0x000807FD, 0xFDFAEFF5);
	r5 = D(r5, s1_1_2, 0x0E000110, 0x01DCF104, 0x1012FE02, 0x00F9F1F4);
	r6 = D(r6, s1_1_2, 0x398100E5, 0xFFFF0204, 0xFDFB0F0B, 0xFAFBC207);
	r7 = D(r7, s1_1_2, 0x02FE09F7, 0xF7F9F6FE, 0xFAFDFEF9, 0xFE000104);
	r0 = D(r0, s1_2_0, 0xEAF7FFFB, 0x0E0506F6, 0xF7FDFEF0, 0x9917F00E);
	r1 = D(r1, s1_2_0, 0xFBFD00FC, 0xFDFE0000, 0xE4FF0114, 0x29F3F018);
	r2 = D(r2, s1_2_0, 0xFF000200, 0xF20001F3, 0x00010000, 0x0907FD0F);
	r3 = D(r3, s1_2_0, 0xFE08FBFD, 0x05040107, 0xFB0FFD03, 0x250700F6);
	r4 = D(r4, s1_2_0, 0xF1ECFDFF, 0xFDFE0103, 0xF5F80104, 0xF5FEFF0A);
	r5 = D(r5, s1_2_0, 0x03FD03F5, 0x090702FA, 0xED0105C6, 0xFDFF0002);
	r6 = D(r6, s1_2_0, 0x2315FAF7, 0x0003FFFF, 0xFDF7F7F0, 0xDD04FA0C);
	r7 = D(r7, s1_2_0, 0x0102FFFD, 0xF905FD00, 0xF2F7FBF2, 0x0001FFFF);
	r0 = D(r0, s1_2_1, 0x030FEF07, 0xE605FF09, 0xF50601EF, 0x19FCF4FE);
	r1 = D(r1, s1_2_1, 0x04F405F8, 0xFAFEFD04, 0xF8F301F4, 0x02E0C535);
	r2 = D(r2, s1_2_1, 0xFF010200, 0x0207FF05, 0x0001FF01, 0xF4FFFBF6);
	r3 = D(r3, s1_2_1, 0xFFFBF008, 0xF6020007, 0x01F4F7F1, 0xF5F6ED35);
	r4 = D(r4, s1_2_1, 0xF61916FA, 0x03FC06F7, 0xF4FD01F3, 0x050001F5);
	r5 = D(r5, s1_2_1, 0xD9FFFFF6, 0x03FCF501, 0x81E201AF, 0xFDFEFA05);
	r6 = D(r6, s1_2_1, 0xBE08F481, 0xFD0900FD, 0xEC03F112, 0xE2020FE7);
	r7 = D(r7, s1_2_1, 0x0000FF03, 0x02FBFCFC, 0xF0FC05FB, 0xFF01FF01);
	r0 = D(r0, s1_2_2, 0x0202F8FA, 0x0AFF0EF9, 0x08030600, 0x12FBF303);
	r1 = D(r1, s1_2_2, 0xFDFF0806, 0xFB040003, 0x0E0600F5, 0xEF068115);
	r2 = D(r2, s1_2_2, 0x0000FEFF, 0x0504FFFC, 0x000000FF, 0xFE04FEFD);
	r3 = D(r3, s1_2_2, 0xFBFE0008, 0xFFFEFAFC, 0x11EFFEEC, 0xDE0EF122);
	r4 = D(r4, s1_2_2, 0x0D01F314, 0x01FDFF01, 0xFB05070F, 0xFE02FC0B);
	r5 = D(r5, s1_2_2, 0x05F9FA05, 0xFB01F900, 0x23010C21, 0xFF00F503);
	r6 = D(r6, s1_2_2, 0x3AE7B918, 0x0000F501, 0x06FFF5F4, 0xF8FFE703);
	r7 = D(r7, s1_2_2, 0xFD01F9FF, 0xFF010A09, 0x040401FF, 0x010002FE);
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0xFBFD00FE, 0xF606FEFF, 0xFE0CF5E9, 0x13F9E302);
	r1 = D(r1, s0_0_0, 0x020104FE, 0xFE01FF00, 0xFD060101, 0x19090BFC);
	r2 = D(r2, s0_0_0, 0xFD010102, 0xF8FFFF01, 0x04000000, 0xFC03F902);
	r3 = D(r3, s0_0_0, 0x02FD02FF, 0xFC02FEFF, 0xFD08E6D8, 0x1CFFF607);
	r4 = D(r4, s0_0_0, 0x07FC0709, 0xFA05FFFE, 0x0205F5F9, 0x02FFFD03);
	r5 = D(r5, s0_0_0, 0xFC020200, 0xFC02F415, 0x0DFC09FD, 0xFE0002FC);
	r6 = D(r6, s0_0_0, 0x1E0E0202, 0x01040100, 0xFA09F9FF, 0x1509B5D6);
	r7 = D(r7, s0_0_0, 0x05FCFF06, 0xF103F803, 0x0804FBD1, 0xFF0102FD);
	r0 = D(r0, s0_0_1, 0x0507F5FD, 0xFCF60408, 0xFEF804FB, 0x0DECE0F1);
	r1 = D(r1, s0_0_1, 0xFC04FCED, 0x05FFFB02, 0x05FC01FC, 0xFFF9050C);
	r2 = D(r2, s0_0_1, 0x000000FE, 0x12020000, 0x03FF00FF, 0x0100F70B);
	r3 = D(r3, s0_0_1, 0xFE04F5FD, 0x07FA0509, 0xFDF2F8D6, 0x13F70708);
	r4 = D(r4, s0_0_1, 0xFF0E061C, 0x04FEFDF8, 0xFFFC09FC, 0x000805FA);
	r5 = D(r5, s0_0_1, 0x0DFFFDF5, 0x1FF6CDE5, 0x0303C6C6, 0x0A07F208);
	r6 = D(r6, s0_0_1, 0xF5D80015, 0x0402FAFB, 0x00F60A0B, 0x0E22D8E7);
	r7 = D(r7, s0_0_1, 0x0CFC0902, 0x08FC0C07, 0xFA01041C, 0x02FE0200);
	r0 = D(r0, s0_0_2, 0xFE02FE06, 0x050EFEEF, 0x0408FC14, 0x09FC03FD);
	r1 = D(r1, s0_0_2, 0xFFFCFF01, 0x0303FEFF, 0xF6FFE9D9, 0x14000714);
	r2 = D(r2, s0_0_2, 0x00FE0000, 0xFCFFF9FF, 0x03FF0000, 0x00FBF8FF);
	r3 = D(r3, s0_0_2, 0x070FFF04, 0xFFFA030A, 0xF9FA0107, 0x13FAF618);
	r4 = D(r4, s0_0_2, 0xF60102F2, 0xFD030101, 0xFC050106, 0x0101F8FC);
	r5 = D(r5, s0_0_2, 0x00FDF6F0, 0xFA02F9F9, 0xF20C16FE, 0x030BFCF7);
	r6 = D(r6, s0_0_2, 0x3102C8B2, 0xFEFEFF02, 0x000A05F3, 0x04E3FCEF);
	r7 = D(r7, s0_0_2, 0xF902FF06, 0x050BF5F3, 0x00020001, 0x020001FF);
	r0 = D(r0, s0_1_0, 0x0DFC08FB, 0x0EFD0502, 0x0EFDF909, 0xF0088FF6);
	r1 = D(r1, s0_1_0, 0x09FD08FF, 0xFF000301, 0xFD000DFB, 0xDB06E0E7);
	r2 = D(r2, s0_1_0, 0x050402FF, 0x0BFD06F4, 0x05FFFF00, 0x0C01FEE8);
	r3 = D(r3, s0_1_0, 0xF507021A, 0x10FE05FC, 0x14FB08E3, 0xF5FAFAE7);
	r4 = D(r4, s0_1_0, 0x0703DAD7, 0x0BF6F7FA, 0x0AFE0900, 0xF205F502);
	r5 = D(r5, s0_1_0, 0xF40AF604, 0x07070104, 0x0A06F009, 0x00FF07F9);
	r6 = D(r6, s0_1_0, 0xED030500, 0x02FDFC03, 0xF4FC0D06, 0x2BD981ED);
	r7 = D(r7, s0_1_0, 0xFA0AF9FF, 0x0B020DFE, 0x25FFCED2, 0x0200FF00);
	r0 = D(r0, s0_1_1, 0xF713F1F3, 0x0720E6F9, 0x0101DEDD, 0xE1FCE9F3);
	r1 = D(r1, s0_1_1, 0x0BF8F5FD, 0x08FFF6FE, 0x26C6D9B0, 0x06F8D7AB);
	r2 = D(r2, s0_1_1, 0x040101FD, 0x0909EAFA, 0x18FEFD01, 0x0315F3E6);
	r3 = D(r3, s0_1_1, 0x1AECEEE5, 0x0417F2F5, 0x10C6E0AB, 0x0AE881B2);
	r4 = D(r4, s0_1_1, 0x021FE8C8, 0x0805F501, 0x1106F306, 0x1CF0EAFE);
	r5 = D(r5, s0_1_1, 0x21FFF906, 0x17FFBAE2, 0x1E2FD4E7, 0x0AEAE400);
	r6 = D(r6, s0_1_1, 0xF935F421, 0x05F1FCFB, 0x1505E1EE, 0x0134A101);
	r7 = D(r7, s0_1_1, 0x080CFBFA, 0x1DF9FEF9, 0x0718E1E7, 0x0208FD00);
	r0 = D(r0, s0_1_2, 0x01FC0709, 0x2518E0F7, 0xF30F0205, 0x0F11FDFC);
	r1 = D(r1, s0_1_2, 0x00F3FC02, 0xF10CFD00, 0x0FF9E4E3, 0x06F0B9A0);
	r2 = D(r2, s0_1_2, 0xFF00FF00, 0xF5FCFA07, 0x0100FF00, 0xFDFD04F9);
	r3 = D(r3, s0_1_2, 0xFDFF0300, 0x0407FBF7, 0x0114EF05, 0x0307BEB2);
	r4 = D(r4, s0_1_2, 0xFDFC090A, 0xFFFE0000, 0xFC0A0208, 0xFE1A00FC);
	r5 = D(r5, s0_1_2, 0xF4EC00EF, 0xFF1CFBF0, 0xFD06FBFD, 0xF70CFEFB);
	r6 = D(r6, s0_1_2, 0x05C9E7C4, 0xFBFCFDFE, 0x0601F002, 0xE0F3D914);
	r7 = D(r7, s0_1_2, 0x030503FB, 0xFB09FC03, 0xF7070006, 0xFF030100);
	r0 = D(r0, s0_2_0, 0x05FEF108, 0x01FA0405, 0x06FE08FC, 0x2227810A);
	r1 = D(r1, s0_2_0, 0xFF050004, 0xFC010100, 0xFE17FFF6, 0x3EEFE5DB);
	r2 = D(r2, s0_2_0, 0xFF02FFFF, 0x02F70701, 0x02FFFFFF, 0xFC09FDF0);
	r3 = D(r3, s0_2_0, 0xFDFBF202, 0xFFFC01FC, 0x0BFDF405, 0x120A06E1);
	r4 = D(r4, s0_2_0, 0x05170EE7, 0xF90504FD, 0xFC05FD02, 0x050B0AFF);
	r5 = D(r5, s0_2_0, 0xF60507FB, 0xF90DFFFE, 0xFB09F702, 0xFC000306);
	r6 = D(r6, s0_2_0, 0x09EC00F9, 0xFFFC01FF, 0x160CF6FC, 0x12ECCFF9);
	r7 = D(r7, s0_2_0, 0x0500FCFC, 0x0C06F8FC, 0xE8100905, 0xFF000001);
	r0 = D(r0, s0_2_1, 0x0704DAFD, 0x1F06F7F3, 0xFF0BEA0A, 0xDCF6ED0E);
	r1 = D(r1, s0_2_1, 0x040801FA, 0xFE08FF01, 0xF513010D, 0xFAD803EA);
	r2 = D(r2, s0_2_1, 0xFDF60100, 0x0E0EEBFD, 0x04FF00FF, 0x03F0FFFB);
	r3 = D(r3, s0_2_1, 0xF90DFEFD, 0xFBFFF7FB, 0xF023F3DC, 0x0408F6F9);
	r4 = D(r4, s0_2_1, 0x13F6DEBA, 0x07040200, 0xFD1B04EE, 0x060B0105);
	r5 = D(r5, s0_2_1, 0x10F8FE01, 0x0008F609, 0x0117FBF1, 0x070D04FA);
	r6 = D(r6, s0_2_1, 0x05F00311, 0x01FEFDF8, 0xFCFDED01, 0x2846D7F1);
	r7 = D(r7, s0_2_1, 0xFC00FEFF, 0xF609FE01, 0x0809FDF6, 0x02000100);
	r0 = D(r0, s0_2_2, 0xFDFDFD00, 0xE80F050C, 0x01180303, 0x111DF702);
	r1 = D(r1, s0_2_2, 0xF9030200, 0xFDFC01FE, 0x040AFDDB, 0x0909D2FA);
	r2 = D(r2, s0_2_2, 0x00000101, 0x0100FC04, 0x0002FF00, 0x0300FD02);
	r3 = D(r3, s0_2_2, 0x01FBFDFF, 0xFC0101F8, 0x0D370702, 0xFEFDF5E9);
	r4 = D(r4, s0_2_2, 0xFA05F906, 0x00010000, 0xFF03F807, 0xF900FAFF);
	r5 = D(r5, s0_2_2, 0xF714F504, 0x0A1803F8, 0x05FEE50F, 0xF80302FE);
	r6 = D(r6, s0_2_2, 0xEEDCD1F8, 0xFE07FCFA, 0xF80308FD, 0xEEE9ED0E);
	r7 = D(r7, s0_2_2, 0xFA01FF01, 0xFD040001, 0xFA080108, 0x010101FF);
	r0 = D(r0, s1_0_0, 0xEF00F8F8, 0x0000F9F8, 0xF609FDFA, 0x070F28A1);
	r1 = D(r1, s1_0_0, 0xFC00FA01, 0x0001FCFA, 0x03020101, 0xFF15FBFC);
	r2 = D(r2, s1_0_0, 0xEB021D01, 0xF8FEFEFA, 0x02010301, 0x22ED1D05);
	r3 = D(r3, s1_0_0, 0x03FD0AFA, 0x02FCF9F2, 0xEE0D1410, 0x0DE6FBEE);
	r4 = D(r4, s1_0_0, 0x0FFA2104, 0x01FAFC04, 0x05FEF903, 0x020200FE);
	r5 = D(r5, s1_0_0, 0x0502FDFD, 0xFC0A0BEA, 0x00181113, 0x02F80203);
	r6 = D(r6, s1_0_0, 0xEFF6F50B, 0xFCFB0D01, 0x03FAFEFC, 0x1DFB3919);
	r7 = D(r7, s1_0_0, 0x0CFE0806, 0xF7FEF1F9, 0x2FFAFA15, 0xFEFE0402);
	r0 = D(r0, s1_0_1, 0x0D02FFF9, 0x06F90BF6, 0x19F421F3, 0x06220B0A);
	r1 = D(r1, s1_0_1, 0xF1F90203, 0x0D061108, 0x150003F9, 0xFB06FFFC);
	r2 = D(r2, s1_0_1, 0x00031100, 0x17000FFF, 0x0F01F6FE, 0x0B03FEFE);
	r3 = D(r3, s1_0_1, 0xFDFA070A, 0x0D0707E2, 0x00F508F4, 0x0EFE1CE3);
	r4 = D(r4, s1_0_1, 0x0C0C0711, 0x1FF81100, 0x17FD1DFC, 0x02F9F908);
	r5 = D(r5, s1_0_1, 0xEE090D02, 0x13201D19, 0xF606F9FB, 0xF4FF1A04);
	r6 = D(r6, s1_0_1, 0xC61E0EB2, 0xF9FCF005, 0xFE070AFC, 0x080FDEB8);
	r7 = D(r7, s1_0_1, 0x1CFF1BFE, 0x220511E9, 0xF7FA0FFA, 0x09F72D04);
	r0 = D(r0, s1_0_2, 0x020105FE, 0x0E0BF7F5, 0x0D07F900, 0x02FC06F6);
	r1 = D(r1, s1_0_2, 0xF6FEFFFB, 0xFA1017F7, 0x07FA1FFE, 0x0111FCFB);
	r2 = D(r2, s1_0_2, 0xFF000300, 0xFD080509, 0xFF0000FF, 0x030001FC);
	r3 = D(r3, s1_0_2, 0xFE040CF2, 0x110807F8, 0x0810FA01, 0x1E1113E5);
	r4 = D(r4, s1_0_2, 0x04FAFFF8, 0x010407FE, 0x0003F400, 0x09FB0909);
	r5 = D(r5, s1_0_2, 0xF60D0206, 0x16F904FB, 0xE7F901F2, 0xF709F3F4);
	r6 = D(r6, s1_0_2, 0x0F294A05, 0xF8030700, 0x0C0401FD, 0xFF033D12);
	r7 = D(r7, s1_0_2, 0x0A06FE04, 0x08F9F309, 0x0403FD07, 0xFEFB0700);
	r0 = D(r0, s1_1_0, 0xFD13131B, 0x10F5060A, 0x01FE0FF3, 0xFF1FADA0);
	r1 = D(r1, s1_1_0, 0xFF060905, 0x07FFFE00, 0xF9FF0FF2, 0x220A0BFA);
	r2 = D(r2, s1_1_0, 0x1A124B03, 0x02060409, 0xFF01FC02, 0xE5122020);
	r3 = D(r3, s1_1_0, 0xFCFCF9E2, 0x10001808, 0xF6F81B0E, 0x0C23311C);
	r4 = D(r4, s1_1_0, 0x10DDD4FC, 0x05F816FC, 0x03040F09, 0x04FBFFF4);
	r5 = D(r5, s1_1_0, 0x04F3DFFE, 0xF703FEF7, 0x0FF50303, 0x01FCFC06);
	r6 = D(r6, s1_1_0, 0x0DF30304, 0x0CFF0605, 0x08FBF501, 0x2B01F918);
	r7 = D(r7, s1_1_0, 0x00FEFB07, 0x0B000E0E, 0x14F2F0EC, 0xFCFF09FD);
	r0 = D(r0, s1_1_1, 0xF2E5C603, 0x15F0DEF1, 0x1D08C911, 0x13182117);
	r1 = D(r1, s1_1_1, 0x0AD0F60A, 0xFA0BF4FA, 0x2AEE0FE0, 0x28DD0409);
	r2 = D(r2, s1_1_1, 0xFEF61EFF, 0xFCE7EEF0, 0xF2FC06FF, 0xF1E12121);
	r3 = D(r3, s1_1_1, 0x250CF408, 0x07D7F71A, 0x20C9EB16, 0x2BCD8100);
	r4 = D(r4, s1_1_1, 0x2407D51E, 0x1112FA0B, 0x14E99F0B, 0x2CE6E3F2);
	r5 = D(r5, s1_1_1, 0xF5223020, 0x000A960F, 0x141BBF03, 0x0ADC18DF);
	r6 = D(r6, s1_1_1, 0x00FCFCB5, 0x28FA4301, 0x25EA0AD8, 0x1A0D81E9);
	r7 = D(r7, s1_1_1, 0xF8F0FC22, 0x0FD181DD, 0x2B03F50C, 0xF7FD3004);
	r0 = D(r0, s1_1_2, 0xFCF9FEF4, 0x26EAC9DD, 0x0FEE15EC, 0xFD0D03FA);
	r1 = D(r1, s1_1_2, 0x00090C03, 0x06110CF6, 0x2DE406F0, 0xFB0D330E);
	r2 = D(r2, s1_1_2, 0xFE0003FF, 0x081A020D, 0x0006FC00, 0x06110910);
	r3 = D(r3, s1_1_2, 0xFEFFF8E1, 0x0703020C, 0xFC14E615, 0x0F020E1F);
	r4 = D(r4, s1_1_2, 0x02FB17F3, 0x00F709FF, 0x09EC14F4, 0x02FB18ED);
	r5 = D(r5, s1_1_2, 0x1C208119, 0x000607E5, 0xFDEA14F2, 0xFF1003FF);
	r6 = D(r6, s1_1_2, 0x1317F0EB, 0x05FA0DFE, 0x17080307, 0x2E27F916);
	r7 = D(r7, s1_1_2, 0x0AF110FE, 0x07010CF3, 0xFCFD06EF, 0xFF0405FE);
	r0 = D(r0, s1_2_0, 0xFAFF08F8, 0x010309FA, 0xFEFA0904, 0x0910F9DE);
	r1 = D(r1, s1_2_0, 0x01FF04FD, 0x03FE0101, 0xF0FB0001, 0x0581D2E4);
	r2 = D(r2, s1_2_0, 0xFE0118FB, 0xFD040307, 0x00000601, 0x06EEFD03);
	r3 = D(r3, s1_2_0, 0x070613EA, 0x04FDFEF1, 0x08FFF8F8, 0x0C0724D9);
	r4 = D(r4, s1_2_0, 0x02FD08FE, 0x00050700, 0x04FCF9F5, 0xF801020A);
	r5 = D(r5, s1_2_0, 0xFAFBF404, 0x01F3FBFA, 0x01FEFCF5, 0x05080703);
	r6 = D(r6, s1_2_0, 0x11F70609, 0xFEF807FB, 0x01FC120C, 0xEF192A0C);
	r7 = D(r7, s1_2_0, 0x01000403, 0x0BFC01F2, 0x090104FA, 0x00010001);
	r0 = D(r0, s1_2_1, 0x1E10F607, 0x19EA11F6, 0x1DF3FFFB, 0xF6F006F2);
	r1 = D(r1, s1_2_1, 0xF7050FFD, 0x00040F01, 0xF60AF810, 0x3A8E81D3);
	r2 = D(r2, s1_2_1, 0xFDFF0A00, 0xF8E803E8, 0x0001FA05, 0x03FCEDEC);
	r3 = D(r3, s1_2_1, 0x07131807, 0x03F7F6DD, 0x0E1904FC, 0x0FE701EC);
	r4 = D(r4, s1_2_1, 0x0FCD2A03, 0xF6F80A01, 0x00060E02, 0xFB0A0318);
	r5 = D(r5, s1_2_1, 0xFD1308FC, 0x04FE1D08, 0xFC1B28F8, 0x03FD0AFA);
	r6 = D(r6, s1_2_1, 0xEAFB0CCB, 0x05F832F7, 0x2E08EDF2, 0x02FD0AFA);
	r7 = D(r7, s1_2_1, 0x04F9F702, 0x00FF1006, 0x09F106F8, 0x03FFF801);
	r0 = D(r0, s1_2_2, 0xFCF308F9, 0x08070905, 0x07F90EF8, 0x0AFEFE03);
	r1 = D(r1, s1_2_2, 0x00050801, 0x02010E04, 0xFF1404FA, 0x32E83FCD);
	r2 = D(r2, s1_2_2, 0xFF0000FF, 0x06060306, 0x00000100, 0x02FFFDFA);
	r3 = D(r3, s1_2_2, 0x0405F503, 0x000500F4, 0xF1FA1210, 0x21242DD5);
	r4 = D(r4, s1_2_2, 0x0F000614, 0xFC01FBFE, 0x0907FE02, 0x030AFEFF);
	r5 = D(r5, s1_2_2, 0xFD0CFB06, 0x0C0203EF, 0xF5241117, 0x0401FC06);
	r6 = D(r6, s1_2_2, 0x22078124, 0x01030002, 0xF2F419EA, 0x11FC1C03);
	r7 = D(r7, s1_2_2, 0x0200FF02, 0x0707FDFB, 0x03000502, 0xFFFEFEFC);
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 = D(r0, s0_0_0, 0x060705FC, 0xFBF60700, 0x03161102, 0x24F9281F);
	r1 = D(r1, s0_0_0, 0x00FD0402, 0x03FEFC01, 0xFEFFFE00, 0x06FAEEFF);
	r2 = D(r2, s0_0_0, 0xFFFFF600, 0xFD020001, 0x000000FF, 0x09E10809);
	r3 = D(r3, s0_0_0, 0xFF07F605, 0x00FA00FF, 0x021112FD, 0x04D0F41C);
	r4 = D(r4, s0_0_0, 0x02D7060C, 0xFE00FBFA, 0x03FE0503, 0x0100F9FD);
	r5 = D(r5, s0_0_0, 0xFF02FCFE, 0x15EF0CF0, 0xFE12F8FA, 0xFD08FD00);
	r6 = D(r6, s0_0_0, 0xFD0700FF, 0xFE06FEFE, 0x01F701FE, 0xF2020FF1);
	r7 = D(r7, s0_0_0, 0xFEFCFDFD, 0xFCFA0802, 0xF5F5FF0A, 0xFF00FC01);
	r0 = D(r0, s0_0_1, 0x02030307, 0x0C1A08FF, 0x11050D14, 0xF610DAF0);
	r1 = D(r1, s0_0_1, 0x00F306FB, 0xFBFF00FC, 0x04FFFF02, 0x10F20C0F);
	r2 = D(r2, s0_0_1, 0x0002FEFE, 0x030013FF, 0xFE0005FF, 0x06FCFC02);
	r3 = D(r3, s0_0_1, 0xFE050C05, 0x07FDFE0C, 0x0B2E0A15, 0x1B1E1E09);
	r4 = D(r4, s0_0_1, 0x06FBF507, 0x00F70CFF, 0xFFFEFE0B, 0x00F6FFFD);
	r5 = D(r5, s0_0_1, 0xFB0707F6, 0xC91EF516, 0xFCC0DE04, 0x06FF0EFC);
	r6 = D(r6, s0_0_1, 0x2DEB16FF, 0xFE0302F9, 0xF91001FF, 0x2DDA1325);
	r7 = D(r7, s0_0_1, 0x04F8FD01, 0x0CFEF4FC, 0x03F4080B, 0x01F9FE01);
	r0 = D(r0, s0_0_2, 0xFF01FF03, 0x07F10006, 0x01FA06F5, 0x01080609);
	r1 = D(r1, s0_0_2, 0x01FB0407, 0xF704F607, 0x020E000A, 0x05E804F8);
	r2 = D(r2, s0_0_2, 0x0000FF01, 0xFE06F900, 0xFFFF0200, 0x0009F902);
	r3 = D(r3, s0_0_2, 0x0100FCFD, 0x06FBF6FC, 0x0204FAF9, 0x1BC5E7EC);
	r4 = D(r4, s0_0_2, 0x030FFB01, 0x00FEFE01, 0x000502F5, 0x0608040C);
	r5 = D(r5, s0_0_2, 0x0208EFFE, 0x0AED0105, 0x05C6FDF8, 0xF605F80A);
	r6 = D(r6, s0_0_2, 0xE61AEA05, 0x0200FB05, 0x06F70408, 0xF11BF700);
	r7 = D(r7, s0_0_2, 0xFD02F9F9, 0x00030C04, 0x000102F4, 0x01010000);
	r0 = D(r0, s0_1_0, 0xF6010803, 0xFD08F6E9, 0x03EA04FC, 0xF5F2FC47);
	r1 = D(r1, s0_1_0, 0xFC080003, 0xFE02F705, 0x05F50214, 0xEF31EEF5);
	r2 = D(r2, s0_1_0, 0xFEFF1F01, 0xFD0A03FC, 0x01FF0701, 0x02F10B18);
	r3 = D(r3, s0_1_0, 0x0AFBFB0D, 0x09FA010E, 0xFEEF0D14, 0x00F3FF1A);
	r4 = D(r4, s0_1_0, 0x171D0B13, 0x08F20B05, 0x000A05FE, 0xFFFA040C);
	r5 = D(r5, s0_1_0, 0xFDFE030D, 0x01E70A0E, 0x131104F2, 0xFF0EFDFB);
	r6 = D(r6, s0_1_0, 0xF80301E6, 0x02F6FB02, 0xF405F7E7, 0xD6E5F9FF);
	r7 = D(r7, s0_1_0, 0x03F10801, 0x0104FE01, 0x13FD1F03, 0x01FF0003);
	r0 = D(r0, s0_1_1, 0xEE072206, 0x10DD0A1C, 0xD415F90C, 0xFBEB0EEA);
	r1 = D(r1, s0_1_1, 0xFEF22813, 0xFC04F9FE, 0x11CEFC12, 0x01150907);
	r2 = D(r2, s0_1_1, 0xFFFF0E01, 0x06F92D0F, 0x0000E8FF, 0xF5F62414);
	r3 = D(r3, s0_1_1, 0xE90DFFFB, 0xFCFB291D, 0x12BF1C27, 0xE301FC1D);
	r4 = D(r4, s0_1_1, 0x02F6F313, 0xFD00DF0C, 0xFFECF616, 0x01F90603);
	r5 = D(r5, s0_1_1, 0xF8FE2AFE, 0xD5162104, 0x1FF20820, 0x08FB15FB);
	r6 = D(r6, s0_1_1, 0x09F80544, 0x03021C03, 0x08F31E0D, 0x28E3F038);
	r7 = D(r7, s0_1_1, 0xFBFE1008, 0xFA021307, 0xF4F3F00B, 0xFEFB1A00);
	r0 = D(r0, s0_1_2, 0x02FF04F6, 0xFB0E0DEF, 0xF8FAFD04, 0xFF00EE05);
	r1 = D(r1, s0_1_2, 0x0108F7FD, 0xF7FAFE05, 0x0EFEF418, 0xFE49E629);
	r2 = D(r2, s0_1_2, 0x00000000, 0x04FFECF6, 0x0001F7FE, 0x0502F303);
	r3 = D(r3, s0_1_2, 0xFE030100, 0x0006F802, 0xF9FFEA11, 0x012C040D);
	r4 = D(r4, s0_1_2, 0x08F7FD0D, 0x010201FD, 0x04F90508, 0xFEFD0703);
	r5 = D(r5, s0_1_2, 0x040ED602, 0x06F80302, 0xFB0314DC, 0x00FB010C);
	r6 = D(r6, s0_1_2, 0x00FB0D1B, 0x01020206, 0x0406EDFE, 0xFFF4E7FF);
	r7 = D(r7, s0_1_2, 0x05FD0BFC, 0x00F901FB, 0x01F9FC0C, 0xFE02FB03);
	r0 = D(r0, s0_2_0, 0x02020EFE, 0x0EF10D17, 0xFAFAF6F8, 0x00CEDE1D);
	r1 = D(r1, s0_2_0, 0x01FEFB01, 0x01FDF7FF, 0x02E6000D, 0xFFBFD810);
	r2 = D(r2, s0_2_0, 0xFD0107FC, 0x0507FF06, 0x000102FE, 0xFD0EE9FA);
	r3 = D(r3, s0_2_0, 0x07FCFA08, 0x01F8F9FF, 0x08FEFBF7, 0xF481D1F4);
	r4 = D(r4, s0_2_0, 0xF8D1EB08, 0xFBFFF805, 0x020600FE, 0xFAFC050B);
	r5 = D(r5, s0_2_0, 0x010A0702, 0x06E1ECFE, 0x02F2110A, 0x0609F908);
	r6 = D(r6, s0_2_0, 0x06010415, 0x0000F900, 0xFBDD2009, 0x00EC0D0F);
	r7 = D(r7, s0_2_0, 0xFE00FBFD, 0x03EA05F9, 0xFAE3EC01, 0xFF00FCFE);
	r0 = D(r0, s0_2_1, 0xFE0DE804, 0xE51306F5, 0x13F4FA09, 0xFC052606);
	r1 = D(r1, s0_2_1, 0x00F31501, 0xFEFEEE03, 0xFDEF0902, 0x08A4ED1D);
	r2 = D(r2, s0_2_1, 0x000001FF, 0xFB0222F9, 0x0000FDFF, 0x060DFD07);
	r3 = D(r3, s0_2_1, 0x040AFDFB, 0x0202FE0B, 0x0F0FF012, 0x02F81101);
	r4 = D(r4, s0_2_1, 0x050019F7, 0xFFFF11FB, 0x03F40202, 0xFCF305FB);
	r5 = D(r5, s0_2_1, 0x0BEAFBFF, 0x0815FD0F, 0xFDBB020D, 0xFF08F5F9);
	r6 = D(r6, s0_2_1, 0x0DC9F017, 0x06FEFBFE, 0xF618D903, 0xFEDEFC10);
	r7 = D(r7, s0_2_1, 0x00FEFB02, 0x000408FF, 0xFEF6050B, 0x0100FE00);
	r0 = D(r0, s0_2_2, 0xFF010BF5, 0x08F1F5F1, 0xFD0303F0, 0x0007FB14);
	r1 = D(r1, s0_2_2, 0x01FCFC07, 0xFF05F704, 0xFA09EFF8, 0x08D1010F);
	r2 = D(r2, s0_2_2, 0x01000101, 0x0201F60B, 0x00000001, 0xFB01FD00);
	r3 = D(r3, s0_2_2, 0x0207F907, 0x01FCFC04, 0xFC16F701, 0xF4DCCD06);
	r4 = D(r4, s0_2_2, 0x020D011A, 0xFF0204FE, 0x0100FF0E, 0xFF05F508);
	r5 = D(r5, s0_2_2, 0xFCFFF50A, 0x0404F7EE, 0xDBE9F805, 0x0106F70B);
	r6 = D(r6, s0_2_2, 0xFE180622, 0x0002FD03, 0xFDFC0DF2, 0xF106FA18);
	r7 = D(r7, s0_2_2, 0xFEFDFFFD, 0x0103F5FE, 0x0604FE09, 0x010101FF);
	r0 = D(r0, s1_0_0, 0xFC040205, 0x07FD0317, 0xCCFB090C, 0x30040B03);
	r1 = D(r1, s1_0_0, 0xFDFCFF05, 0x00000401, 0x0BF708EA, 0x120B18FC);
	r2 = D(r2, s1_0_0, 0xFE00FDFD, 0x0400F204, 0xFF0000FF, 0x03FBF5EF);
	r3 = D(r3, s1_0_0, 0x1100F6FE, 0xF8FF031A, 0x07FDF8F3, 0x0CFF2D03);
	r4 = D(r4, s1_0_0, 0x10FCF606, 0xFFFEFCFA, 0xF5010403, 0x0AFDFDF5);
	r5 = D(r5, s1_0_0, 0x04040AF1, 0xF50405F4, 0xE300FF17, 0x0FFBF4F8);
	r6 = D(r6, s1_0_0, 0xFB000105, 0x02FE01F9, 0x020903FE, 0xFD08C20D);
	r7 = D(r7, s1_0_0, 0xFA04FE0B, 0xFAFE0014, 0xF1FCF00F, 0x06FF01F9);
	r0 = D(r0, s1_0_1, 0xD5FBFFFC, 0xF30902DF, 0xF2FC07F3, 0xDBE7E7DD);
	r1 = D(r1, s1_0_1, 0xF301FF07, 0xFF05FE0F, 0x0FFD00FF, 0x060B0CDB);
	r2 = D(r2, s1_0_1, 0xFF010000, 0xE50AFD01, 0x0201FF02, 0xF10000ED);
	r3 = D(r3, s1_0_1, 0xEDFEF50B, 0xFA0110E8, 0xF8F0F5FB, 0xDCE838B4);
	r4 = D(r4, s1_0_1, 0xFEFFF9D7, 0xF5FDFEFC, 0xEAFCFEFA, 0xF801F50D);
	r5 = D(r5, s1_0_1, 0x15F80B07, 0xBFF2EF16, 0x1EF81116, 0x04020817);
	r6 = D(r6, s1_0_1, 0x411E12E0, 0xF3FFFD09, 0xEA0003F6, 0x48E40A13);
	r7 = D(r7, s1_0_1, 0xFD0403F9, 0xED0405F5, 0xFA00FFEF, 0x13FFFDF7);
	r0 = D(r0, s1_0_2, 0x0C02FD00, 0xE305EB14, 0x04FD0300, 0x2A0A0C11);
	r1 = D(r1, s1_0_2, 0xFEFD0200, 0x1108FFFF, 0xF7FF0505, 0x02F206F8);
	r2 = D(r2, s1_0_2, 0xFF00FF00, 0xEEFA00FB, 0x000000FF, 0x03FCFD00);
	r3 = D(r3, s1_0_2, 0x0B040005, 0x050607FC, 0x100304FF, 0x03F21FFC);
	r4 = D(r4, s1_0_2, 0xF9000009, 0xFEFE0000, 0x0303FD03, 0xECFDF4F3);
	r5 = D(r5, s1_0_2, 0xEAF703F0, 0x1718FBFA, 0xF60104F2, 0x0CFF00FA);
	r6 = D(r6, s1_0_2, 0x81E1DE1C, 0x020105FE, 0xF0030506, 0xB2EFECEC);
	r7 = D(r7, s1_0_2, 0x0402FD06, 0xF1FFEEFE, 0xFF030106, 0x02FC00FF);
	r0 = D(r0, s1_1_0, 0x18F9FB0E, 0x07F7F4FD, 0x1300F4F9, 0x7DC3051E);
	r1 = D(r1, s1_1_0, 0xF600F510, 0x0700FD01, 0xF30C0411, 0xE808051B);
	r2 = D(r2, s1_1_0, 0x0101F9FE, 0x1000E61B, 0x000001FE, 0x200FEFFA);
	r3 = D(r3, s1_1_0, 0x17050808, 0x06FEF6F4, 0x0B04E203, 0x1A01F1F9);
	r4 = D(r4, s1_1_0, 0xF5F919EF, 0xE9FE0701, 0xF501F402, 0xF4FF0B00);
	r5 = D(r5, s1_1_0, 0x01020AF2, 0xFF020000, 0xAE060503, 0x0300FE00);
	r6 = D(r6, s1_1_0, 0x160D0F11, 0x0AFFFD00, 0xF0F9F504, 0xF901EA09);
	r7 = D(r7, s1_1_0, 0x06010200, 0x18FCE3FE, 0xEA0117FE, 0xFEFF0403);
	r0 = D(r0, s1_1_1, 0x13E4E007, 0x2C04EA1B, 0x09FA0726, 0xB7C8E8F4);
	r1 = D(r1, s1_1_1, 0xF9FA0EFF, 0x01FD0926, 0xE5FF13F5, 0xDEEBED22);
	r2 = D(r2, s1_1_1, 0x0103FFFE, 0x1AF30D13, 0x04000103, 0x00DC07FC);
	r3 = D(r3, s1_1_1, 0xEEF9F50F, 0x09FAF20E, 0x0AFBFDC4, 0xE4E8A41C);
	r4 = D(r4, s1_1_1, 0xFAEBBC06, 0xF200F5F3, 0xFDFE0407, 0x080202D5);
	r5 = D(r5, s1_1_1, 0x0EFE061C, 0x08EEFF17, 0x46090806, 0xFC091217);
	r6 = D(r6, s1_1_1, 0x5DF504F0, 0xF9F10CEA, 0x4EF32012, 0x31B90805);
	r7 = D(r7, s1_1_1, 0x02FEFD0F, 0x01F9EC02, 0x00EDE60A, 0x07FF0500);
	r0 = D(r0, s1_1_2, 0x00FE0102, 0xC4D6EDE8, 0xEE03F9FC, 0x150D0C02);
	r1 = D(r1, s1_1_2, 0xFFFDFEFD, 0xF8020908, 0xF500FFDF, 0x0DDAFE13);
	r2 = D(r2, s1_1_2, 0x01FF0001, 0xFDE2EAF9, 0xFE00FEFF, 0xFCE3FAF6);
	r3 = D(r3, s1_1_2, 0x0A011405, 0xFCD0F2F4, 0x0301E2F4, 0x10B0FAF8);
	r4 = D(r4, s1_1_2, 0x13DD0EF6, 0x03040200, 0x01F109FF, 0x02F80508);
	r5 = D(r5, s1_1_2, 0x0AEAF8F8, 0x0EFD0A05, 0xFAFB0FFA, 0x0AF51109);
	r6 = D(r6, s1_1_2, 0xEAE7FB1A, 0x06F7FF05, 0xF1C6E5E7, 0xF5F4F3F5);
	r7 = D(r7, s1_1_2, 0xFDF503FB, 0xEBE6FF02, 0x06FD01FF, 0x0000FFFF);
	r0 = D(r0, s1_2_0, 0x0AFD020B, 0xFB0204F7, 0xF9FF0205, 0x20FC343A);
	r1 = D(r1, s1_2_0, 0xFF0006FE, 0xFC0205FE, 0x03F90305, 0xFC093DF0);
	r2 = D(r2, s1_2_0, 0x040003FF, 0x00FDEBF9, 0x0000FF00, 0xFD0110FA);
	r3 = D(r3, s1_2_0, 0xFF08050B, 0xFBFE02FD, 0xFD040FFC, 0xF90E33FF);
	r4 = D(r4, s1_2_0, 0xFC03E310, 0x04FDF700, 0xFFFF08FD, 0x01FB0104);
	r5 = D(r5, s1_2_0, 0x00FFF7F2, 0x02000406, 0x030509F4, 0xFE04FAF7);
	r6 = D(r6, s1_2_0, 0x0A02E7EB, 0xFC01FB00, 0x0D01D108, 0x15E2E4FF);
	r7 = D(r7, s1_2_0, 0xFF00FBFF, 0xFD0004FE, 0xFFFDEE04, 0x0000FD00);
	r0 = D(r0, s1_2_1, 0x020700FC, 0x02F4EDF8, 0xFE070EF4, 0xF2CDCEFC);
	r1 = D(r1, s1_2_1, 0x04FF0201, 0x01FF0107, 0xFB03E9FE, 0x1CC854AD);
	r2 = D(r2, s1_2_1, 0x01FF0100, 0xFF051503, 0xFFFF0101, 0x0109FCFD);
	r3 = D(r3, s1_2_1, 0x01F2DBF5, 0xFF0306FE, 0xFD06DCF4, 0x070624DF);
	r4 = D(r4, s1_2_1, 0xFEFA1CEC, 0x02010904, 0x0201FCFD, 0xFFFBEFFF);
	r5 = D(r5, s1_2_1, 0x01030701, 0xF3F30D08, 0x1EF111FB, 0xFB04FF06);
	r6 = D(r6, s1_2_1, 0x2015252C, 0xF80510F5, 0xFCE8E2EB, 0x1B032FFF);
	r7 = D(r7, s1_2_1, 0x00000102, 0x03FAF100, 0xF60513F3, 0xFF010000);
	r0 = D(r0, s1_2_2, 0x05090702, 0x07EC02FC, 0x0CF70B01, 0x130A0301);
	r1 = D(r1, s1_2_2, 0xFCFDFDFB, 0xFB0002FD, 0x0601000B, 0xD3D01FEA);
	r2 = D(r2, s1_2_2, 0x00010100, 0xFDFFEEFD, 0xFFFF0100, 0xF81605FC);
	r3 = D(r3, s1_2_2, 0xFDFEF5F8, 0x000A0303, 0x0BFD0A0A, 0xF3061A08);
	r4 = D(r4, s1_2_2, 0xFF0AF3EF, 0x0202FE03, 0xFCFFFDF8, 0xFEFC0403);
	r5 = D(r5, s1_2_2, 0xFAEEFD00, 0x19FD2C01, 0xFFEAFA14, 0x06F60100);
	r6 = D(r6, s1_2_2, 0xF09DB521, 0x000AFDFC, 0x000E120E, 0xFAE4D8FF);
	r7 = D(r7, s1_2_2, 0xFE070101, 0x000008FA, 0x00F601FA, 0x00000001);
	f0 = vec4(r0) * 6.2000124e-05;
	f0 += vec4(-9.063e-03, -3.125e-03, -6.896e-03, -1.673e-02);
	f0 = max(f0, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), f0);
	f1 = vec4(r1) * 6.2000124e-05;
	f1 += vec4(-2.024e-03, -5.296e-03, -7.721e-03, -2.008e-02);
	f1 = max(f1, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), f1);
	f2 = vec4(r2) * 6.2000124e-05;
	f2 += vec4(-8.962e-04, -3.780e-03, -1.232e-03, -1.459e-02);
	f2 = max(f2, vec4(0.0));
	imageStore(out_image, opos + ivec2(0, 1), f2);
	f3 = vec4(r3) * 6.2000124e-05;
	f3 += vec4(-6.885e-03, -4.068e-03, -8.764e-03, -2.605e-02);
	f3 = max(f3, vec4(0.0));
	imageStore(out_image, opos + ivec2(1, 1), f3);
	f4 = vec4(r4) * 6.2000124e-05;
	f4 += vec4(-9.189e-03, -3.867e-03, -4.844e-03, -3.974e-03);
	f4 = max(f4, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 0), f4);
	f5 = vec4(r5) * 6.2000124e-05;
	f5 += vec4(-1.150e-02, -2.978e-03, -2.916e-04, -6.991e-03);
	f5 = max(f5, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 0), f5);
	f6 = vec4(r6) * 6.2000124e-05;
	f6 += vec4(-1.199e-02, -6.790e-03, -4.772e-03, -2.587e-02);
	f6 = max(f6, vec4(0.0));
	imageStore(out_image, opos + ivec2(2, 1), f6);
	f7 = vec4(r7) * 6.2000124e-05;
	f7 += vec4(-1.440e-03, -2.589e-03, -4.788e-03, -9.096e-04);
	f7 = max(f7, vec4(0.0));
	imageStore(out_image, opos + ivec2(3, 1), f7);
}

//!DESC CuNNy-4x32-TEST-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv4
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
shared V4 G[8][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			vec2 p;
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(1, 1)) * conv4_pt;
			V4 sr0 = V4(conv4_gather(p, 0));
			V4 sg0 = V4(conv4_gather(p, 1));
			V4 sb0 = V4(conv4_gather(p, 2));
			V4 sa0 = V4(conv4_gather(p, 3));
			G[0][ay][ax] = V4(sr0.w, sg0.w, sb0.w, sa0.w);
			G[1][ay][ax] = V4(sr0.z, sg0.z, sb0.z, sa0.z);
			G[2][ay][ax] = V4(sr0.x, sg0.x, sb0.x, sa0.x);
			G[3][ay][ax] = V4(sr0.y, sg0.y, sb0.y, sa0.y);
			p = vec2(clamp(pos + ivec2(x - 1, y - 1), ivec2(0), sz) * ivec2(4, 2) + ivec2(3, 1)) * conv4_pt;
			V4 sr1 = V4(conv4_gather(p, 0));
			V4 sg1 = V4(conv4_gather(p, 1));
			V4 sb1 = V4(conv4_gather(p, 2));
			V4 sa1 = V4(conv4_gather(p, 3));
			G[4][ay][ax] = V4(sr1.w, sg1.w, sb1.w, sa1.w);
			G[5][ay][ax] = V4(sr1.z, sg1.z, sb1.z, sa1.z);
			G[6][ay][ax] = V4(sr1.x, sg1.x, sb1.x, sa1.x);
			G[7][ay][ax] = V4(sr1.y, sg1.y, sb1.y, sa1.y);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(9.923e-03, -1.168e-03, 6.760e-03, -3.831e-03, 4.636e-02, -2.162e-02, -1.715e-02, 4.832e-03, 5.678e-02, -2.273e-02, -1.485e-02, -5.855e-03, -2.882e-04, 2.640e-04, -2.233e-04, -9.706e-04) * s0_0_0;
	r0 += M4(-1.648e-01, 8.569e-02, -2.265e-02, 4.272e-02, -5.383e-02, 9.343e-02, -4.749e-05, -1.754e-03, 2.180e-02, -7.006e-02, 5.112e-02, -3.255e-02, 6.032e-03, -3.075e-03, -2.039e-03, -3.421e-03) * s0_0_1;
	r0 += M4(-4.705e-03, 3.698e-02, 5.697e-03, -1.870e-02, 1.078e-02, -2.039e-02, -4.074e-03, 1.372e-02, -2.714e-03, 2.070e-02, -3.463e-04, -2.459e-03, 2.514e-01, -2.363e-01, 1.255e-01, -1.362e-01) * s0_0_2;
	r0 += M4(8.584e-03, -2.330e-03, 6.377e-03, -4.042e-03, -2.173e-01, 9.017e-02, 1.675e-01, 2.000e-03, -3.700e-02, 4.895e-04, 1.718e-02, -1.492e-02, -3.582e-03, 1.108e-03, -3.551e-03, 1.633e-03) * s0_1_0;
	r0 += M4(3.523e-02, -2.110e-02, -1.613e-01, 6.324e-02, 2.697e-02, 7.855e-02, 2.792e-02, -1.647e-01, -9.003e-02, 1.510e-01, -2.140e-01, 1.769e-01, 1.369e-03, -9.147e-03, 1.392e-02, -7.411e-03) * s0_1_1;
	r0 += M4(-3.046e-02, 4.522e-02, -2.850e-02, 9.450e-02, -3.802e-03, -2.754e-03, 1.218e-03, 3.210e-03, 1.560e-02, -4.371e-02, 7.790e-04, 2.313e-02, 2.114e-01, -2.028e-01, 2.706e-01, -2.438e-01) * s0_1_2;
	r0 += M4(-2.370e-04, -1.919e-03, -3.067e-04, -2.571e-03, 1.703e-02, -1.415e-03, 2.164e-02, -4.188e-02, -4.202e-03, 9.794e-04, -1.459e-02, 3.406e-03, 2.029e-03, -1.402e-04, 1.500e-03, 2.513e-04) * s0_2_0;
	r0 += M4(-9.502e-03, -3.415e-05, 2.927e-02, -2.142e-02, 1.040e-03, -1.051e-02, -3.188e-03, 3.650e-02, 1.431e-02, -3.259e-02, 8.982e-02, -5.314e-02, -1.146e-02, 1.291e-02, -1.205e-02, 8.193e-03) * s0_2_1;
	r0 += M4(-1.788e-03, 1.336e-03, -5.569e-03, 5.085e-03, 1.442e-03, -2.866e-03, -1.190e-03, 4.682e-04, 6.163e-03, 1.704e-02, 2.643e-02, -7.691e-02, 4.055e-02, -5.335e-02, 1.069e-01, -1.242e-01) * s0_2_2;
	r0 += M4(-8.261e-03, 4.276e-03, -1.217e-02, 8.495e-03, 1.320e-02, 6.940e-03, -2.939e-03, 6.726e-03, 5.718e-03, 1.283e-02, -5.300e-03, -2.569e-04, -1.927e-01, -1.216e-01, 1.931e-01, 1.285e-01) * s1_0_0;
	r0 += M4(5.784e-02, 6.525e-02, -1.758e-02, -1.096e-02, 1.121e-02, -6.744e-03, 3.961e-03, -5.390e-03, 1.507e-02, 7.277e-03, 1.029e-04, -4.632e-03, -2.930e-01, -2.466e-01, 3.060e-01, 2.511e-01) * s1_0_1;
	r0 += M4(-4.946e-03, 1.462e-02, 1.759e-03, 3.904e-04, -2.577e-03, 2.660e-03, 2.218e-04, -7.692e-04, 3.851e-03, 3.682e-03, -2.143e-04, -1.299e-03, -2.198e-01, -3.198e-01, 2.079e-01, 3.216e-01) * s1_0_2;
	r0 += M4(-6.714e-02, 4.478e-02, -7.742e-02, 1.868e-02, 1.403e-01, 2.648e-03, 1.018e-01, 9.734e-03, -1.758e-01, -3.816e-02, 1.567e-01, 2.841e-02, 1.243e-02, 1.232e-02, -2.092e-02, -1.100e-02) * s1_1_0;
	r0 += M4(3.657e-02, -2.532e-01, 2.328e-01, 2.122e-02, -1.258e-01, 1.064e-01, -4.772e-02, 4.565e-03, -5.575e-03, -1.577e-01, 4.788e-03, 1.554e-01, 1.929e-03, 4.255e-03, -1.655e-03, -6.892e-03) * s1_1_1;
	r0 += M4(-2.350e-02, 6.323e-02, -2.678e-02, 4.315e-02, 1.195e-02, -3.333e-02, 4.782e-03, -7.618e-03, -5.933e-03, 8.868e-03, 2.904e-03, -1.031e-02, 6.770e-03, 5.074e-03, -6.172e-03, -8.127e-03) * s1_1_2;
	r0 += M4(5.397e-03, -6.593e-04, -1.462e-02, 2.235e-03, 4.428e-03, 3.196e-03, 5.488e-02, -2.906e-04, -8.112e-03, -3.177e-03, 1.900e-02, -2.300e-02, -1.323e-04, -3.667e-06, 2.278e-03, 1.550e-03) * s1_2_0;
	r0 += M4(3.764e-03, 3.235e-02, -4.279e-02, -6.909e-02, 1.087e-02, -1.168e-04, -5.923e-02, 1.018e-01, -5.942e-03, -4.715e-03, -7.105e-03, 2.718e-02, 1.959e-04, 1.191e-05, 1.121e-03, 1.496e-03) * s1_2_1;
	r0 += M4(-5.385e-03, 5.208e-03, -7.461e-03, 2.933e-02, 6.514e-03, -1.196e-02, 1.354e-02, -3.871e-02, 5.845e-04, -1.940e-03, 2.953e-04, -2.007e-03, -9.607e-05, -8.670e-05, 1.808e-04, 1.001e-03) * s1_2_2;
	s0_0_0 = G[2][xy.y+0][xy.x+0]; s0_0_1 = G[2][xy.y+0][xy.x+1];
	s0_0_2 = G[2][xy.y+0][xy.x+2]; s0_1_0 = G[2][xy.y+1][xy.x+0];
	s0_1_1 = G[2][xy.y+1][xy.x+1]; s0_1_2 = G[2][xy.y+1][xy.x+2];
	s0_2_0 = G[2][xy.y+2][xy.x+0]; s0_2_1 = G[2][xy.y+2][xy.x+1];
	s0_2_2 = G[2][xy.y+2][xy.x+2]; s1_0_0 = G[3][xy.y+0][xy.x+0];
	s1_0_1 = G[3][xy.y+0][xy.x+1]; s1_0_2 = G[3][xy.y+0][xy.x+2];
	s1_1_0 = G[3][xy.y+1][xy.x+0]; s1_1_1 = G[3][xy.y+1][xy.x+1];
	s1_1_2 = G[3][xy.y+1][xy.x+2]; s1_2_0 = G[3][xy.y+2][xy.x+0];
	s1_2_1 = G[3][xy.y+2][xy.x+1]; s1_2_2 = G[3][xy.y+2][xy.x+2];
	r0 += M4(1.127e-04, 5.043e-05, -3.176e-04, 1.465e-04, -2.375e-02, 5.723e-03, -1.083e-02, 4.551e-05, -1.997e-03, -1.289e-03, -6.800e-04, -8.561e-04, -4.383e-03, -4.043e-04, 2.633e-04, 7.719e-04) * s0_0_0;
	r0 += M4(-4.526e-03, -1.580e-04, -1.464e-03, 6.064e-03, 8.228e-02, -1.017e-01, -1.653e-03, 1.100e-02, -5.530e-02, -2.497e-02, -4.565e-03, 3.341e-03, -5.556e-03, -1.469e-02, 4.460e-04, 3.017e-03) * s0_0_1;
	r0 += M4(3.266e-02, 1.703e-02, -6.766e-03, -7.052e-03, -1.192e-02, 2.716e-02, -5.534e-03, 1.591e-02, 1.451e-03, -1.668e-02, 3.440e-03, 8.910e-04, -9.363e-03, -3.653e-03, 8.232e-04, -1.977e-03) * s0_0_2;
	r0 += M4(9.860e-05, -2.108e-05, -4.710e-05, -8.653e-05, -5.552e-02, 1.728e-02, -3.115e-02, 2.167e-02, -3.053e-02, 8.165e-03, -7.832e-03, 1.692e-02, -5.902e-03, 4.341e-04, 2.160e-03, 7.176e-04) * s0_1_0;
	r0 += M4(4.673e-02, -1.301e-02, 7.960e-03, -3.059e-02, 2.019e-01, -1.286e-01, 2.269e-01, -2.705e-01, -1.999e-01, -2.705e-01, -2.549e-01, -2.751e-01, 1.353e-01, 8.055e-04, -1.158e-01, -1.090e-02) * s0_1_1;
	r0 += M4(9.191e-02, 2.007e-01, 1.359e-01, 1.763e-01, -9.391e-03, 1.229e-02, -1.942e-02, 1.945e-02, 4.121e-03, -8.625e-05, 6.655e-05, -2.799e-02, 1.577e-02, 1.544e-01, -2.412e-02, -1.362e-01) * s0_1_2;
	r0 += M4(8.260e-04, 8.905e-08, 8.765e-04, 2.586e-05, -7.655e-03, 4.799e-03, -2.924e-02, 8.759e-03, 1.616e-04, -1.163e-03, -1.362e-02, -1.827e-03, 2.219e-03, 8.814e-04, 2.699e-04, -2.480e-03) * s0_2_0;
	r0 += M4(-2.573e-04, 3.599e-03, 3.557e-02, 8.675e-03, -1.206e-02, -1.159e-02, 3.408e-02, -4.708e-04, 2.273e-03, 3.579e-03, 2.947e-03, -1.363e-02, 6.028e-03, 1.863e-03, -3.058e-02, -2.220e-03) * s0_2_1;
	r0 += M4(-6.435e-03, -3.934e-03, 2.094e-03, 4.065e-02, 4.659e-04, -9.606e-05, -1.187e-03, 1.085e-02, -2.249e-03, -9.539e-04, -1.389e-05, 5.453e-03, -8.702e-04, 8.453e-03, 1.042e-02, -2.911e-02) * s0_2_2;
	r0 += M4(-1.010e-02, 7.515e-04, -3.664e-03, 2.792e-03, -6.038e-03, 1.997e-03, 5.153e-03, -1.813e-03, 2.705e-02, 6.457e-03, -1.361e-02, -1.091e-02, -3.119e-03, -8.401e-03, 3.644e-03, 8.347e-03) * s1_0_0;
	r0 += M4(-8.379e-03, 6.800e-02, 2.242e-02, -2.099e-02, -4.898e-02, -7.006e-03, 8.503e-03, 1.996e-02, -2.444e-02, 9.419e-04, -3.117e-04, -3.153e-03, 1.117e-02, 1.353e-02, -1.871e-03, -3.894e-03) * s1_0_1;
	r0 += M4(2.654e-02, -5.457e-02, 1.313e-02, -3.593e-03, 5.111e-03, -3.870e-02, 6.211e-03, 1.517e-02, -3.273e-03, -7.016e-03, 2.317e-03, 1.301e-03, -1.137e-02, -5.162e-03, 9.554e-03, 5.548e-03) * s1_0_2;
	r0 += M4(4.260e-02, -1.074e-02, -5.092e-03, -1.219e-02, 2.084e-02, -9.994e-03, -8.081e-02, 3.121e-02, -9.986e-03, 2.585e-02, 1.946e-02, -3.313e-02, 2.734e-01, 1.505e-01, -2.686e-01, -1.584e-01) * s1_1_0;
	r0 += M4(-2.095e-01, 1.579e-01, -2.046e-01, 2.955e-01, 2.347e-01, 2.085e-01, -1.344e-01, -2.929e-01, -1.763e-01, -1.773e-01, 1.763e-01, 1.727e-01, 3.228e-01, 3.292e-01, -3.263e-01, -3.169e-01) * s1_1_1;
	r0 += M4(1.086e-02, 1.956e-03, 2.197e-02, -5.665e-02, -2.735e-02, 1.992e-02, -3.014e-03, 2.011e-02, 8.926e-03, -8.285e-03, -7.685e-03, 2.131e-02, 1.613e-01, 2.743e-01, -1.532e-01, -2.693e-01) * s1_1_2;
	r0 += M4(2.280e-03, 9.682e-04, 4.382e-02, -5.963e-03, -1.449e-02, -4.475e-03, 3.097e-02, -6.828e-04, -1.978e-03, -3.818e-03, 5.505e-03, 5.708e-03, -3.643e-03, -4.002e-03, 7.054e-03, 1.364e-02) * s1_2_0;
	r0 += M4(2.980e-02, -1.229e-02, -8.448e-03, -3.675e-02, -9.146e-03, -2.166e-02, 2.533e-02, 6.566e-02, -3.777e-03, -1.338e-02, -1.728e-02, 3.126e-02, -1.735e-03, -1.097e-04, -2.539e-03, -6.830e-03) * s1_2_1;
	r0 += M4(-2.912e-05, -9.432e-04, -3.241e-03, 3.811e-03, 3.111e-03, 1.949e-03, -9.477e-04, 1.061e-02, 2.740e-02, 3.075e-02, -1.270e-02, -4.942e-02, -6.582e-03, -8.956e-03, 8.617e-03, 1.258e-02) * s1_2_2;
	s0_0_0 = G[4][xy.y+0][xy.x+0]; s0_0_1 = G[4][xy.y+0][xy.x+1];
	s0_0_2 = G[4][xy.y+0][xy.x+2]; s0_1_0 = G[4][xy.y+1][xy.x+0];
	s0_1_1 = G[4][xy.y+1][xy.x+1]; s0_1_2 = G[4][xy.y+1][xy.x+2];
	s0_2_0 = G[4][xy.y+2][xy.x+0]; s0_2_1 = G[4][xy.y+2][xy.x+1];
	s0_2_2 = G[4][xy.y+2][xy.x+2]; s1_0_0 = G[5][xy.y+0][xy.x+0];
	s1_0_1 = G[5][xy.y+0][xy.x+1]; s1_0_2 = G[5][xy.y+0][xy.x+2];
	s1_1_0 = G[5][xy.y+1][xy.x+0]; s1_1_1 = G[5][xy.y+1][xy.x+1];
	s1_1_2 = G[5][xy.y+1][xy.x+2]; s1_2_0 = G[5][xy.y+2][xy.x+0];
	s1_2_1 = G[5][xy.y+2][xy.x+1]; s1_2_2 = G[5][xy.y+2][xy.x+2];
	r0 += M4(-3.924e-02, 4.226e-02, 1.459e-03, -1.085e-02, 4.075e-03, -5.026e-04, 5.133e-04, 3.334e-04, -1.054e-01, 2.520e-02, 1.392e-02, 1.224e-02, 1.598e-03, -5.296e-03, 2.918e-03, 5.895e-03) * s0_0_0;
	r0 += M4(6.068e-02, -1.186e-01, 3.103e-03, 6.667e-02, 3.558e-02, 2.057e-02, 3.689e-05, -4.956e-03, 3.142e-02, 3.406e-02, -4.773e-02, 9.735e-03, 4.320e-02, -6.030e-03, -8.373e-03, -1.660e-02) * s0_0_1;
	r0 += M4(-4.758e-03, 3.108e-02, -3.756e-03, -1.654e-02, 6.215e-03, 1.882e-02, 3.151e-04, 1.936e-03, 1.579e-03, -1.569e-02, 5.035e-03, 4.704e-04, -9.602e-03, 3.821e-02, -7.245e-03, -1.987e-02) * s0_0_2;
	r0 += M4(-2.054e-02, -1.048e-02, 9.253e-02, -2.277e-02, 1.006e-02, -4.747e-03, 3.440e-03, -3.560e-03, 5.121e-02, -3.626e-02, 1.349e-02, 8.389e-03, 5.652e-02, 1.523e-02, 2.745e-02, -3.480e-02) * s0_1_0;
	r0 += M4(1.636e-01, 8.423e-02, -2.506e-01, 1.439e-02, -1.839e-01, -8.222e-03, 1.189e-01, 4.313e-02, -2.423e-01, 2.036e-01, 3.135e-01, -3.509e-01, -2.261e-01, -1.487e-01, 1.208e-01, 2.606e-01) * s0_1_1;
	r0 += M4(-4.089e-02, -1.243e-02, 5.433e-02, -3.357e-02, -4.390e-03, -1.249e-01, 8.941e-03, 9.956e-02, -2.620e-02, 6.668e-02, -4.025e-02, 3.772e-02, 3.086e-02, -1.269e-02, -5.936e-05, -5.822e-02) * s0_1_2;
	r0 += M4(6.214e-04, 2.789e-04, 5.539e-03, -2.106e-03, -4.000e-03, -6.058e-04, 9.248e-03, -7.334e-05, -9.643e-04, 1.234e-04, -7.306e-03, 1.879e-04, 1.599e-02, 1.666e-02, -7.446e-02, 1.594e-02) * s0_2_0;
	r0 += M4(-3.658e-03, 1.901e-04, 5.602e-03, -9.074e-03, 1.669e-02, 3.445e-03, -3.993e-02, 2.533e-02, 8.599e-03, -2.829e-02, 6.674e-03, 4.906e-02, 1.450e-02, 1.094e-02, 1.407e-02, -7.021e-02) * s0_2_1;
	r0 += M4(-1.740e-02, -1.631e-02, -2.480e-05, 4.345e-02, 1.174e-02, 1.149e-02, -1.979e-03, -6.519e-02, 6.539e-03, -4.012e-03, 9.611e-03, -5.693e-02, -5.269e-03, -3.682e-05, 2.331e-03, 6.678e-03) * s0_2_2;
	r0 += M4(2.053e-02, -1.881e-02, 1.145e-02, -1.783e-02, 1.425e-02, -7.984e-03, 5.353e-03, -2.860e-03, -2.632e-02, 2.593e-02, -2.778e-02, 2.960e-02, 2.728e-03, -3.656e-03, 3.065e-03, 2.922e-03) * s1_0_0;
	r0 += M4(-1.511e-02, 1.838e-02, 3.480e-03, 7.400e-03, -1.475e-02, 1.171e-02, -7.839e-03, 4.029e-03, 3.010e-02, -4.248e-02, -1.265e-02, 1.191e-02, 2.069e-03, 8.945e-03, -8.448e-03, 1.981e-03) * s1_0_1;
	r0 += M4(1.154e-03, -3.181e-03, -2.390e-04, -7.013e-05, 6.174e-04, -5.387e-03, 1.715e-03, -1.448e-03, 5.974e-03, -4.785e-03, 1.557e-03, -6.446e-04, 2.576e-04, 5.205e-03, -8.109e-04, -6.282e-04) * s1_0_2;
	r0 += M4(-1.434e-01, 6.736e-02, -6.335e-02, 2.606e-02, -7.036e-03, -1.529e-03, 1.307e-02, -1.049e-02, 7.530e-03, -5.023e-03, 6.080e-04, -5.260e-03, 9.743e-02, -2.020e-02, 4.993e-02, -1.803e-02) * s1_1_0;
	r0 += M4(-5.041e-02, 1.558e-01, -6.372e-02, 1.156e-01, -1.938e-01, 1.997e-01, -7.575e-02, 8.629e-02, 2.125e-01, -1.891e-01, 1.549e-01, -1.597e-01, 1.733e-01, -2.686e-01, 1.005e-01, -8.791e-02) * s1_1_1;
	r0 += M4(2.318e-03, -4.655e-03, 4.659e-03, -6.186e-03, -1.271e-03, 3.929e-03, -3.664e-03, -3.895e-03, -1.704e-03, 4.993e-04, 5.332e-03, -1.117e-02, -1.389e-02, 2.837e-02, -9.839e-03, 1.887e-02) * s1_1_2;
	r0 += M4(-8.284e-03, 2.944e-03, -6.623e-02, 3.019e-02, 3.123e-03, -1.185e-03, -6.303e-03, 1.854e-03, 6.618e-03, -6.460e-03, 6.321e-03, -5.360e-03, -4.129e-03, 6.467e-03, 4.454e-02, -8.082e-03) * s1_2_0;
	r0 += M4(1.224e-02, -1.252e-02, -6.606e-03, 3.888e-02, -4.796e-02, 4.437e-02, -1.616e-01, 1.619e-01, 7.157e-03, -7.169e-03, 9.839e-02, -8.856e-02, 1.782e-02, 8.005e-03, 1.030e-01, -1.733e-01) * s1_2_1;
	r0 += M4(1.771e-05, -5.018e-05, -4.803e-07, -7.784e-04, 5.246e-03, -1.072e-02, 3.616e-03, -1.121e-03, -1.219e-02, 1.914e-02, -1.529e-02, 2.236e-02, -6.793e-03, 1.437e-02, -1.261e-02, 3.599e-02) * s1_2_2;
	s0_0_0 = G[6][xy.y+0][xy.x+0]; s0_0_1 = G[6][xy.y+0][xy.x+1];
	s0_0_2 = G[6][xy.y+0][xy.x+2]; s0_1_0 = G[6][xy.y+1][xy.x+0];
	s0_1_1 = G[6][xy.y+1][xy.x+1]; s0_1_2 = G[6][xy.y+1][xy.x+2];
	s0_2_0 = G[6][xy.y+2][xy.x+0]; s0_2_1 = G[6][xy.y+2][xy.x+1];
	s0_2_2 = G[6][xy.y+2][xy.x+2]; s1_0_0 = G[7][xy.y+0][xy.x+0];
	s1_0_1 = G[7][xy.y+0][xy.x+1]; s1_0_2 = G[7][xy.y+0][xy.x+2];
	s1_1_0 = G[7][xy.y+1][xy.x+0]; s1_1_1 = G[7][xy.y+1][xy.x+1];
	s1_1_2 = G[7][xy.y+1][xy.x+2]; s1_2_0 = G[7][xy.y+2][xy.x+0];
	s1_2_1 = G[7][xy.y+2][xy.x+1]; s1_2_2 = G[7][xy.y+2][xy.x+2];
	r0 += M4(-3.929e-01, 3.723e-01, -2.784e-01, 2.708e-01, -1.749e-02, -2.410e-03, -2.955e-03, -5.254e-04, 1.198e-02, -1.453e-03, -2.404e-03, -5.326e-03, -3.443e-03, 1.020e-02, -5.163e-04, 4.380e-04) * s0_0_0;
	r0 += M4(3.352e-03, -1.068e-02, 1.166e-02, -3.695e-03, -7.984e-02, -1.125e-01, 2.620e-02, 3.054e-02, -1.461e-01, -7.910e-03, 1.258e-02, 5.844e-02, 2.154e-01, -1.841e-01, 1.172e-01, -1.165e-01) * s0_0_1;
	r0 += M4(4.779e-04, -1.307e-03, 9.284e-04, 2.289e-03, -2.933e-03, 1.554e-03, -8.085e-03, -2.534e-02, -1.522e-02, 1.179e-01, -6.638e-03, -7.107e-02, -1.483e-01, 1.861e-01, -1.056e-01, 9.371e-02) * s0_0_2;
	r0 += M4(-3.098e-01, 3.355e-01, -3.651e-01, 3.565e-01, -1.321e-02, 1.287e-03, 4.717e-02, -7.700e-03, -1.162e-02, -3.025e-03, -2.830e-02, 2.402e-02, -1.169e-02, 8.766e-03, 1.584e-03, 1.417e-02) * s0_1_0;
	r0 += M4(3.897e-03, -3.452e-03, -2.173e-03, -7.278e-03, -4.876e-02, -5.284e-02, 2.646e-01, 2.494e-01, -8.657e-04, 3.577e-02, 1.958e-01, -2.138e-01, 3.882e-01, -3.406e-01, 3.427e-01, -2.725e-01) * s0_1_1;
	r0 += M4(6.979e-04, 3.043e-03, 2.715e-04, -2.895e-03, -9.737e-03, -3.441e-02, -1.793e-02, 6.241e-02, 4.585e-03, -2.680e-02, -2.375e-02, 4.992e-02, -2.241e-01, 2.341e-01, -1.923e-01, 2.593e-01) * s0_1_2;
	r0 += M4(-2.224e-01, 2.162e-01, -2.868e-01, 3.020e-01, 1.463e-04, -7.840e-04, -1.189e-02, 3.557e-04, 1.153e-02, -1.460e-03, 1.545e-03, -5.785e-03, -1.577e-03, 9.084e-03, -9.238e-03, 5.253e-03) * s0_2_0;
	r0 += M4(7.507e-03, -8.417e-03, 9.902e-03, -1.119e-02, 1.452e-03, 9.366e-04, -6.104e-03, -1.511e-02, -3.673e-03, -6.817e-04, -4.991e-04, 1.442e-02, 1.487e-01, -1.233e-01, 2.948e-01, -2.416e-01) * s0_2_1;
	r0 += M4(4.351e-06, -1.400e-04, -4.133e-04, 2.103e-03, 1.324e-03, 6.362e-04, -3.497e-03, -1.254e-02, 1.354e-03, 4.124e-04, 3.122e-04, -5.441e-04, -7.578e-02, 1.289e-01, -1.625e-01, 1.927e-01) * s0_2_2;
	r0 += M4(-3.528e-03, -2.617e-03, -2.245e-03, 1.423e-03, -1.446e-02, 2.665e-03, 5.655e-03, 2.751e-03, 4.759e-03, 6.833e-03, -1.855e-03, -7.915e-03, -1.771e-03, -2.795e-04, 6.746e-04, -2.936e-03) * s1_0_0;
	r0 += M4(-5.286e-02, -4.164e-02, 1.175e-02, 1.393e-03, 2.032e-02, 2.999e-02, -4.238e-03, -1.959e-02, 4.482e-02, -5.664e-02, 2.838e-02, -1.025e-02, -9.696e-03, -4.742e-03, 8.439e-04, 3.123e-03) * s1_0_1;
	r0 += M4(-2.568e-04, -1.788e-02, -3.671e-03, -8.343e-04, 1.471e-02, -3.534e-02, 2.678e-02, -1.254e-02, -2.349e-02, 3.823e-02, 8.699e-03, -1.986e-02, -2.823e-04, -2.614e-03, -7.891e-05, 2.024e-05) * s1_0_2;
	r0 += M4(5.458e-02, -3.548e-03, 4.640e-02, -1.263e-03, 4.599e-02, -7.456e-03, 4.348e-02, -3.094e-02, 3.949e-03, 2.227e-03, 2.978e-03, -4.040e-03, 2.010e-02, 4.371e-03, -1.750e-02, 1.818e-03) * s1_1_0;
	r0 += M4(9.105e-02, 1.818e-01, -2.214e-01, -2.594e-02, 3.336e-01, -3.193e-01, -2.571e-01, 2.202e-01, 8.716e-02, 4.949e-03, -1.958e-01, 8.483e-02, 2.921e-01, 2.056e-01, 3.193e-02, 9.541e-03) * s1_1_1;
	r0 += M4(1.167e-02, -1.209e-02, 2.333e-02, -8.521e-02, -3.895e-02, 2.032e-02, -8.987e-03, 5.815e-02, 1.268e-01, -2.786e-01, -8.496e-03, 1.694e-01, -2.120e-02, 4.510e-02, -6.913e-03, -4.892e-03) * s1_1_2;
	r0 += M4(-3.576e-03, -4.617e-04, 1.352e-02, -1.162e-04, -6.270e-03, 2.894e-02, -9.058e-02, 1.696e-02, 1.910e-03, 3.755e-04, 2.688e-03, -1.292e-03, 2.277e-02, 4.729e-03, -2.924e-02, 6.556e-03) * s1_2_0;
	r0 += M4(8.658e-04, -1.617e-04, 1.077e-01, 7.529e-02, -2.985e-02, 1.278e-02, 1.785e-02, 5.899e-02, -1.433e-02, 4.711e-03, 2.896e-02, -1.162e-02, 2.939e-02, 4.241e-02, -1.343e-01, -1.499e-01) * s1_2_1;
	r0 += M4(5.612e-04, -6.845e-03, 1.343e-03, 3.726e-02, 2.373e-03, 8.618e-03, 3.111e-03, -1.581e-02, 1.971e-02, 1.172e-02, -8.585e-02, 5.946e-02, -2.151e-03, 1.245e-02, -8.030e-03, -1.408e-02) * s1_2_2;
	r0 += V4(-8.534e-09, 1.489e-08, 1.963e-08, -1.482e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
