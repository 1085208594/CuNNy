// CuNNy 2x8 BOX
// Copyright (c) 2024 funnyplanter

// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this program.  If not, see <https://www.gnu.org/licenses/>.
/* ------------------------------------------------------------------- */


//!DESC CuNNy-2x8-BOX-in
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND LUMA
//!SAVE in
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) F(LUMA_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(1, 1) + ivec2(0, 0)) + vec2(0.5)) * LUMA_pt).r)
shared F G[1][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
		}
	}
	barrier();
	F s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2];
	r0 += V4(5.154e-05, -1.935e-03, 1.973e-01, -2.929e-02) * s0_0_0;
	r1 += V4(-6.666e-02, -8.325e-02, 3.798e-01, 1.959e-02) * s0_0_0;
	r0 += V4(4.362e-02, -2.906e-02, -1.335e-02, 1.800e-02) * s0_0_1;
	r1 += V4(-1.323e-01, 2.610e-01, -9.861e-02, -6.627e-03) * s0_0_1;
	r0 += V4(-3.431e-02, 3.523e-02, -1.558e-01, 1.251e-02) * s0_0_2;
	r1 += V4(-1.253e-01, 8.636e-02, 1.752e-02, -1.206e-02) * s0_0_2;
	r0 += V4(-1.481e-02, 4.860e-02, -2.928e-02, 7.353e-01) * s0_1_0;
	r1 += V4(-2.282e-02, 2.046e-01, -5.510e+00, 1.166e-02) * s0_1_0;
	r0 += V4(-7.485e-01, -3.357e-01, -6.341e-01, -7.090e-01) * s0_1_1;
	r1 += V4(-3.708e-02, -4.620e-01, 5.799e-01, 7.162e-01) * s0_1_1;
	r0 += V4(7.520e-01, -5.645e-01, 2.007e-02, -2.537e-02) * s0_1_2;
	r1 += V4(3.037e-01, 6.818e-02, -2.219e-02, -3.961e-02) * s0_1_2;
	r0 += V4(2.445e-02, -1.191e-02, -1.657e-01, 2.784e-03) * s0_2_0;
	r1 += V4(5.231e-02, -2.019e-02, 2.491e-01, -3.070e-02) * s0_2_0;
	r0 += V4(-7.319e-03, 7.129e-01, 2.614e-01, -1.460e-02) * s0_2_1;
	r1 += V4(3.452e-01, 2.844e-01, 5.344e-02, -7.012e-01) * s0_2_1;
	r0 += V4(-9.293e-03, 1.483e-01, 5.158e-01, 2.001e-02) * s0_2_2;
	r1 += V4(3.685e-02, 2.581e-02, 1.138e-02, 4.516e-02) * s0_2_2;
	r0 += V4(2.979e-03, 7.334e-04, 1.524e-03, -3.258e-04);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(2.117e-02, 1.515e-02, 3.821e-02, 1.041e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BOX-conv1
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND in
//!BIND LUMA
//!SAVE conv1
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * in_pt))
#define l1(x, y) V4(in_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * in_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(-5.877e-02, 5.241e-01, 2.772e-01, -1.741e-02, -2.290e-01, 5.615e-01, 3.295e-01, 3.554e-02, -8.267e-02, -6.230e-01, -3.037e-01, -2.289e-02, -8.965e-02, 3.134e-02, -3.325e-03, 3.832e-02) * s0_0_0;
	r1 += M4(5.440e-02, 1.329e-01, -3.063e-02, 1.526e-01, 5.534e-02, -5.286e-02, 1.334e-01, 1.100e-02, -1.188e-01, -1.467e-01, -5.159e-02, -1.319e-01, 1.168e-02, -9.204e-02, -2.305e-02, 4.304e-02) * s0_0_0;
	r0 += M4(-1.406e-02, -3.729e-02, 2.324e-01, 1.668e-01, -4.299e-01, 4.806e-01, 6.767e-01, -6.434e-02, 6.831e-02, -5.920e-01, -8.620e-01, 4.503e-02, -1.490e-01, -3.959e-01, -3.182e-01, 2.057e-01) * s0_0_1;
	r1 += M4(1.120e-01, -2.777e-01, 1.062e-01, 1.354e-01, -2.559e-02, -6.579e-03, -6.058e-02, 1.733e-01, -1.135e-01, -2.627e-01, 2.690e-02, -4.555e-02, -3.109e-03, -3.293e-01, 1.645e-01, -1.019e-02) * s0_0_1;
	r0 += M4(-7.309e-02, -1.776e-02, -5.816e-02, 1.632e-02, -1.518e-01, 1.842e-01, 2.842e-01, 3.626e-02, 1.543e-01, -2.192e-01, -4.775e-01, -5.026e-02, -2.706e-01, -5.547e-02, -4.124e-02, 1.347e-01) * s0_0_2;
	r1 += M4(-4.162e-02, -1.812e-01, 1.372e-02, -2.424e-01, 1.474e-02, 7.939e-02, 3.786e-02, 6.454e-02, -3.989e-02, -2.676e-02, 3.070e-02, -1.516e-01, 1.334e-02, 1.101e-01, -5.793e-02, -3.097e-01) * s0_0_2;
	r0 += M4(1.391e-01, 7.089e-01, -1.267e-01, -4.349e-01, 5.009e-01, 2.959e-01, 4.578e-01, 6.419e-02, 1.354e-01, -5.525e-01, -7.284e-01, 2.423e-02, 9.495e-02, 1.629e-01, -7.202e-02, -6.126e-02) * s0_1_0;
	r1 += M4(1.813e-01, 2.576e-01, 1.637e-01, 7.033e-02, 7.318e-02, -1.153e-01, 2.581e-01, -8.901e-02, -3.603e-02, 1.709e-01, 5.419e-02, -1.831e-01, 1.135e-02, 3.361e-03, -2.594e-02, 4.095e-02) * s0_1_0;
	r0 += M4(2.608e-02, 4.425e-01, -1.265e-01, 4.600e-01, 2.228e-01, 6.148e-01, 6.843e-01, 1.787e-01, 2.344e-01, -8.365e-01, -1.000e+00, 1.089e-01, 2.871e-01, -2.923e-01, -1.463e-01, 5.698e-02) * s0_1_1;
	r1 += M4(2.239e-01, 6.307e-01, 3.564e-01, 1.000e+00, 1.327e-02, 2.236e-02, 2.510e-01, -4.634e-01, -1.534e-01, -1.348e-01, 9.069e-02, -2.265e-01, 4.903e-01, 4.846e-01, 7.455e-01, 1.210e-02) * s0_1_1;
	r0 += M4(3.729e-02, -1.176e-01, 2.107e-01, -3.352e-03, 1.096e-01, 2.045e-01, 5.587e-01, 2.758e-02, 1.341e-01, -2.430e-01, -7.794e-01, -9.106e-02, -8.351e-02, -2.822e-01, 4.325e-01, -1.760e-01) * s0_1_2;
	r1 += M4(-1.362e-02, -4.362e-02, -3.622e-02, -1.000e+00, -1.893e-02, -1.300e-01, 2.018e-03, -2.587e-01, 4.386e-02, -7.292e-02, 9.596e-02, -2.588e-01, 7.037e-02, -3.878e-01, -7.514e-02, -1.000e+00) * s0_1_2;
	r0 += M4(5.176e-01, -5.410e-01, 1.267e-02, -1.411e-01, -1.967e-02, 3.878e-01, 3.369e-01, -4.089e-03, -1.392e-01, -6.520e-01, -2.991e-01, 1.523e-02, -8.894e-02, -1.751e-01, 3.376e-02, 1.219e-02) * s0_2_0;
	r1 += M4(-2.221e-02, -4.387e-01, 1.431e-01, 7.918e-02, 2.707e-02, -2.177e-02, 1.273e-03, 1.028e-01, 2.352e-02, 6.787e-02, -9.410e-08, -9.582e-02, 2.865e-02, -3.059e-02, -7.217e-04, -2.555e-02) * s0_2_0;
	r0 += M4(-1.825e-01, 9.712e-02, 5.423e-02, 1.062e-01, 1.274e-01, 2.335e-01, 4.324e-01, -5.530e-02, -3.184e-03, -7.591e-01, -8.145e-01, 1.334e-02, 2.549e-01, 3.955e-01, -1.700e-01, 1.961e-02) * s0_2_1;
	r1 += M4(3.549e-02, -1.648e-01, -1.604e-01, 8.807e-02, -1.875e-02, -6.496e-02, 4.330e-02, 1.816e-01, -2.723e-02, 4.146e-02, -4.751e-03, 4.403e-02, 8.521e-02, 2.855e-02, 3.336e-01, 1.627e-01) * s0_2_1;
	r0 += M4(-1.558e-01, 7.886e-02, 1.620e-01, -5.287e-03, 1.772e-02, 2.705e-01, 2.739e-01, 1.586e-02, 3.158e-02, -1.723e-01, -3.763e-01, 1.619e-02, -8.237e-02, 3.930e-02, -2.862e-01, 1.423e-01) * s0_2_2;
	r1 += M4(-1.163e-02, 1.094e-01, -3.145e-02, 2.323e-02, -1.113e-02, 7.041e-02, -1.885e-03, -4.449e-02, -5.915e-03, -1.470e-01, -2.423e-02, -1.747e-01, -5.742e-03, 9.666e-02, 1.072e-01, -9.414e-02) * s0_2_2;
	r0 += M4(-6.436e-02, -4.891e-01, -6.699e-01, 2.802e-02, -3.372e-02, -1.820e-01, -1.411e-01, -2.179e-02, 4.961e-02, -1.288e-02, -6.759e-03, -5.300e-03, -7.608e-02, 1.870e-01, -8.564e-02, -4.719e-02) * s1_0_0;
	r1 += M4(5.043e-02, 4.963e-02, -4.678e-02, 7.995e-02, -4.917e-02, -1.409e-01, -5.041e-02, -1.117e-02, -1.519e-03, 2.636e-02, 5.461e-03, -9.249e-03, 2.593e-01, 5.566e-01, 3.223e-02, 1.029e-02) * s1_0_0;
	r0 += M4(-8.632e-03, 7.273e-02, 1.016e-01, -8.984e-02, -2.666e-01, -9.527e-02, 3.933e-04, -9.478e-02, -1.561e-01, -5.352e-02, -3.085e-01, -1.654e-02, -1.881e-01, -2.550e-01, 3.071e-02, 3.037e-01) * s1_0_1;
	r1 += M4(-2.476e-01, -2.225e-01, -4.072e-02, -2.073e-01, -2.465e-01, -2.087e-01, -1.440e-01, 1.739e-01, 5.186e-02, 1.165e-02, -6.646e-02, 9.697e-02, 1.000e+00, 8.128e-01, -7.368e-02, 2.920e-01) * s1_0_1;
	r0 += M4(-1.037e-02, 1.850e-01, 4.154e-01, 3.348e-02, 1.888e-01, 1.812e-02, 4.973e-03, 9.123e-02, -1.159e-01, -5.837e-02, -1.091e-01, 2.414e-01, -4.726e-03, -1.239e-01, -1.367e-01, 1.509e-01) * s1_0_2;
	r1 += M4(6.417e-03, -6.937e-02, -1.568e-02, 1.988e-01, 1.599e-02, 2.207e-02, 5.944e-02, -8.671e-02, 8.872e-02, -4.031e-01, 1.044e-01, 5.449e-02, -1.897e-02, 4.212e-02, -1.088e-03, -1.000e+00) * s1_0_2;
	r0 += M4(-1.567e-01, -6.413e-01, -2.619e-01, 1.436e-03, -2.033e-02, -1.065e-02, -2.996e-02, -2.353e-02, -8.956e-03, 4.316e-02, 2.823e-02, -3.116e-03, -3.627e-02, 5.768e-02, 1.107e-02, 6.399e-02) * s1_1_0;
	r1 += M4(6.478e-02, 1.607e-01, -1.274e-01, -1.019e-01, 5.631e-02, -7.453e-02, -1.264e-01, -9.201e-02, 2.667e-02, 2.678e-02, -4.751e-03, 4.125e-03, 8.088e-03, -1.094e-01, -4.137e-02, -2.605e-02) * s1_1_0;
	r0 += M4(-1.215e-01, -1.778e-01, -7.345e-01, -2.192e-02, 6.870e-01, -1.060e-01, 1.192e-01, 2.286e-01, 6.313e-02, 7.304e-02, -3.387e-01, 3.995e-02, 2.841e-01, 2.611e-03, -7.511e-02, -1.115e-01) * s1_1_1;
	r1 += M4(-7.787e-02, -1.401e-01, 1.545e-01, 3.697e-01, 4.792e-01, 6.321e-01, 4.409e-01, 5.569e-01, 4.476e-02, 3.613e-02, -1.476e-01, 1.103e-02, 1.211e-01, -4.307e-01, 2.889e-01, 2.159e-01) * s1_1_1;
	r0 += M4(1.042e-01, 3.589e-01, 7.871e-01, 7.609e-02, -2.803e-01, 2.904e-01, 2.521e-01, -7.677e-02, 2.670e-01, 1.163e-01, -1.198e-02, 1.000e+00, -1.446e-01, -6.287e-02, 1.874e-01, 5.044e-02) * s1_1_2;
	r1 += M4(-4.747e-02, -9.585e-02, -5.692e-02, -3.498e-02, -1.736e-02, 9.179e-02, 7.413e-05, -4.202e-01, 1.760e-01, 6.153e-02, 2.880e-01, 9.346e-02, 3.335e-02, -2.462e-01, -1.548e-01, -2.499e-01) * s1_1_2;
	r0 += M4(1.266e-01, -2.425e-01, -4.577e-01, 8.238e-03, 2.636e-02, 7.915e-02, -2.190e-01, 5.382e-04, -2.349e-02, 8.029e-02, 2.253e-02, -2.017e-03, 1.054e-01, -2.101e-02, -1.208e-01, -1.333e-02) * s1_2_0;
	r1 += M4(-3.577e-02, -4.414e-02, 4.518e-02, -8.467e-02, -2.294e-02, 1.238e-01, -3.848e-02, -1.226e-02, -3.094e-02, -8.961e-02, -3.167e-02, 1.775e-03, -4.260e-02, -3.758e-02, 2.218e-02, -1.949e-02) * s1_2_0;
	r0 += M4(-7.767e-03, 8.585e-02, 6.178e-02, 4.707e-03, -1.354e-01, 4.056e-01, 9.420e-02, -1.489e-01, 1.041e-01, -8.588e-01, -3.903e-01, -2.622e-02, -1.796e-02, 2.125e-01, -6.916e-02, -3.287e-02) * s1_2_1;
	r1 += M4(2.217e-02, 5.428e-02, 7.903e-02, -1.717e-01, -3.192e-02, -3.585e-01, -2.443e-01, -9.873e-02, 3.895e-02, 5.218e-03, 4.652e-02, -8.956e-02, -3.226e-03, -1.609e-02, -5.635e-02, -1.497e-01) * s1_2_1;
	r0 += M4(-1.732e-02, 2.112e-01, 4.172e-01, 5.112e-02, -1.921e-02, 1.829e-01, 2.126e-01, -6.095e-02, -1.127e-01, 2.003e-01, -1.390e-01, 1.260e-01, -6.856e-02, 1.077e-01, 2.549e-01, -1.161e-02) * s1_2_2;
	r1 += M4(-1.704e-02, 1.267e-01, -1.116e-02, 3.401e-01, 8.398e-02, 8.862e-02, 9.417e-02, -3.525e-01, 9.252e-02, 2.376e-02, -4.903e-02, 1.222e-01, 4.042e-02, 4.578e-02, 1.947e-02, 7.337e-05) * s1_2_2;
	r0 += V4(-9.959e-04, 4.509e-03, 6.380e-03, 7.434e-03);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(6.373e-04, -8.130e-04, 2.172e-03, -1.508e-02);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BOX-conv2
//!HOOK LUMA
//!COMPUTE 16 8 8 8
//!BIND conv1
//!BIND LUMA
//!SAVE conv2
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h
//!COMPONENTS 4
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv1_pt))
#define l1(x, y) V4(conv1_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv1_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 1);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0, r1;
	r0 = V4(0.0); r1 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.945e-02, 1.503e-02, -2.826e-03, 4.344e-02, -1.511e-01, -3.647e-02, -1.140e-01, 1.822e-01, 6.496e-01, -2.025e-01, 7.508e-02, -1.000e+00, -2.568e-01, 2.216e-02, 1.471e-02, -9.674e-02) * s0_0_0;
	r1 += M4(-2.627e-02, -9.054e-03, -2.019e-02, -8.109e-03, -2.718e-02, 1.873e-01, 1.546e-02, 3.764e-03, 1.572e-01, -1.093e-01, -1.870e-01, -8.000e-02, -5.614e-03, 8.794e-02, 5.554e-02, 1.135e-02) * s0_0_0;
	r0 += M4(-8.502e-01, -2.171e-01, -5.965e-02, 7.524e-01, -1.000e+00, -5.745e-01, 2.889e-01, 5.606e-01, -8.309e-01, -3.768e-01, -4.044e-01, -6.118e-02, 1.663e-01, 4.462e-02, 8.169e-02, 2.698e-01) * s0_0_1;
	r1 += M4(-2.189e-01, -2.446e-01, 5.714e-02, -4.860e-02, 3.948e-02, -3.972e-01, 2.087e-01, 6.976e-02, -2.115e-01, 7.265e-01, -7.806e-02, -7.593e-02, -2.595e-01, 9.672e-02, -5.050e-02, 6.036e-02) * s0_0_1;
	r0 += M4(1.579e-02, -4.746e-02, 1.609e-01, 2.397e-01, 5.060e-01, 8.587e-02, 2.114e-01, 6.467e-02, -2.669e-01, -1.600e-01, -2.846e-02, -5.719e-02, -2.545e-02, -1.892e-02, -1.883e-01, 4.020e-02) * s0_0_2;
	r1 += M4(-3.075e-02, 2.544e-01, 2.891e-02, 3.463e-02, 3.369e-01, -1.535e-01, -5.134e-03, 1.584e-02, -1.362e-01, -1.204e-01, 5.912e-03, -2.510e-02, 8.222e-02, 2.321e-01, -4.724e-02, 4.157e-02) * s0_0_2;
	r0 += M4(1.032e-01, -1.141e-01, -7.325e-02, -2.806e-01, 2.056e-01, -1.482e-01, 3.183e-02, -1.212e-01, 1.226e-01, -6.507e-01, 7.803e-02, 8.982e-01, -3.497e-02, 1.930e-01, 1.848e-01, 4.039e-01) * s0_1_0;
	r1 += M4(1.098e-01, -3.175e-02, 6.926e-02, -2.224e-03, 8.659e-04, -4.932e-02, 6.600e-02, 8.316e-04, 5.263e-01, -2.964e-02, 1.704e-01, 2.714e-02, -3.527e-01, 7.852e-02, 8.196e-02, 1.272e-01) * s0_1_0;
	r0 += M4(-5.504e-01, -2.305e-01, 2.849e-01, -1.000e+00, -1.000e+00, 1.932e-01, -7.154e-02, -8.263e-01, -1.988e-01, -4.883e-01, -1.553e-01, -1.229e-01, -1.194e-01, -2.383e-01, -1.000e+00, -7.658e-02) * s0_1_1;
	r1 += M4(-1.000e+00, 3.697e-01, -1.059e-01, 9.783e-02, -4.081e-01, 5.435e-01, -2.703e-01, -6.601e-02, -8.065e-01, -1.000e+00, -7.010e-02, 1.509e-02, 2.805e-01, -3.591e-02, -1.674e-01, 6.092e-01) * s0_1_1;
	r0 += M4(-2.136e-01, -7.980e-02, -1.828e-01, 1.861e-01, 1.014e-02, -5.187e-01, 1.240e-01, 1.118e-01, -1.455e-01, 8.672e-03, 8.910e-03, -1.095e-01, 7.012e-02, 1.043e-01, -3.352e-01, 1.050e-01) * s0_1_2;
	r1 += M4(-2.242e-01, -2.830e-02, -3.321e-02, -1.844e-02, 6.806e-01, 5.840e-01, 1.210e-01, 1.103e-02, 2.946e-02, -3.037e-01, -1.971e-02, 4.166e-03, -2.495e-01, 1.316e-02, -1.185e-01, 8.658e-02) * s0_1_2;
	r0 += M4(5.176e-02, -4.788e-02, -9.358e-03, 2.590e-01, -9.970e-03, -1.896e-01, 5.589e-02, 8.498e-02, -4.122e-02, 1.452e-02, 4.723e-02, -3.437e-01, 1.553e-01, 1.546e-01, 9.575e-02, -1.310e-01) * s0_2_0;
	r1 += M4(-9.826e-02, -6.813e-02, 1.324e-01, 5.465e-03, 1.179e-01, 3.528e-03, -2.864e-03, -6.906e-04, -1.153e-01, -6.558e-02, -1.235e-01, -1.379e-02, 1.486e-01, -2.360e-02, -4.644e-02, 2.864e-02) * s0_2_0;
	r0 += M4(-1.938e-01, 1.125e-01, -3.931e-03, 2.845e-01, -1.170e-01, 1.068e-01, -9.100e-02, 3.425e-01, -1.172e-01, -2.261e-01, -4.774e-02, -1.349e-01, -3.263e-02, -4.790e-01, -5.173e-03, -1.794e-01) * s0_2_1;
	r1 += M4(-9.501e-02, 2.783e-01, 4.033e-01, 1.489e-01, 2.144e-01, -2.443e-01, 1.008e-02, 2.982e-02, -4.177e-02, 2.900e-01, 3.962e-02, -1.511e-02, 6.412e-02, 1.186e-01, -1.654e-01, -2.918e-04) * s0_2_1;
	r0 += M4(1.087e-01, -6.152e-02, 1.694e-02, 1.975e-01, -5.801e-02, -1.507e-01, -1.151e-02, 1.533e-01, -4.701e-02, 8.302e-02, -2.649e-02, 5.679e-02, -3.829e-02, 1.295e-01, 5.485e-02, 2.768e-02) * s0_2_2;
	r1 += M4(-2.046e-01, 1.381e-01, 4.811e-03, 1.181e-02, 1.787e-01, -1.345e-01, -1.107e-02, 2.882e-02, -1.945e-01, 2.767e-02, -5.441e-03, -1.456e-03, 3.436e-02, 2.592e-02, 1.371e-02, 3.080e-02) * s0_2_2;
	r0 += M4(3.825e-01, 5.402e-02, -7.321e-02, -2.251e-01, -3.030e-01, -6.238e-02, 3.944e-02, 3.954e-01, -8.332e-03, -1.053e-01, 1.367e-04, -4.457e-01, 2.595e-01, -3.196e-02, -9.841e-02, -1.536e-01) * s1_0_0;
	r1 += M4(1.273e-01, -1.506e-01, -2.408e-02, -5.164e-02, -9.957e-02, 9.057e-02, 9.935e-03, 4.420e-02, -1.123e-01, 4.162e-02, -3.577e-02, -6.605e-03, 9.210e-02, 7.237e-02, 5.220e-02, 3.339e-02) * s1_0_0;
	r0 += M4(-2.270e-01, -7.703e-02, -2.646e-01, -3.367e-01, 1.570e-01, 4.008e-02, 1.812e-01, 1.539e-02, -4.684e-01, -1.473e-02, -7.207e-02, -7.364e-01, 2.930e-02, 2.033e-01, -5.387e-02, -3.980e-01) * s1_0_1;
	r1 += M4(2.369e-01, -2.967e-01, 1.400e-01, -2.616e-02, -1.131e-01, 3.780e-01, -1.470e-01, 8.253e-02, -2.528e-02, -3.496e-01, -1.813e-02, 2.837e-02, 1.141e-01, -4.209e-01, 3.433e-02, 1.549e-02) * s1_0_1;
	r0 += M4(-1.027e-01, -9.344e-02, 1.304e-01, 3.124e-02, 7.391e-02, 1.109e-01, -5.307e-02, 8.884e-02, 2.842e-01, 2.243e-01, 3.350e-01, -2.433e-01, -1.415e-03, -3.308e-02, 5.698e-02, -1.950e-02) * s1_0_2;
	r1 += M4(-5.948e-03, -3.582e-01, 2.741e-02, -1.021e-02, -7.300e-02, 1.519e-01, -3.624e-03, 9.328e-04, -1.467e-01, -4.287e-01, 6.665e-02, -5.827e-02, 5.907e-02, -1.130e-01, -3.118e-03, -1.640e-02) * s1_0_2;
	r0 += M4(-4.346e-01, -1.499e-01, -7.685e-02, 7.628e-02, 2.623e-01, 2.375e-02, -4.857e-02, 1.986e-01, -7.977e-02, 4.991e-03, 2.275e-02, 8.461e-01, -2.022e-01, -2.687e-01, 1.208e-01, -9.018e-01) * s1_1_0;
	r1 += M4(1.898e-01, 9.726e-02, -2.156e-01, 3.657e-02, -1.548e-01, 5.871e-02, 1.441e-01, 1.760e-02, 8.495e-02, -2.106e-01, 2.092e-01, 3.918e-02, -2.645e-01, -5.387e-01, 3.845e-01, -2.094e-01) * s1_1_0;
	r0 += M4(8.618e-01, 7.056e-03, 2.068e-01, -1.307e-01, -7.324e-01, 7.519e-02, 1.718e-01, 5.137e-01, 7.533e-01, 9.868e-01, -6.716e-01, 1.000e+00, 5.342e-01, 8.404e-01, 1.000e+00, -2.176e-01) * s1_1_1;
	r1 += M4(-2.070e-01, 6.731e-01, -7.091e-01, 6.848e-02, 1.995e-01, -6.928e-01, 4.923e-01, 1.384e-01, 3.280e-01, 5.521e-01, 6.543e-01, 3.124e-01, 3.619e-01, -1.585e-01, -1.856e-01, 8.209e-02) * s1_1_1;
	r0 += M4(-4.440e-01, 1.966e-01, 1.582e-01, -5.968e-02, 3.603e-01, -1.841e-01, 1.255e-01, -9.026e-02, 1.659e-01, -4.374e-01, 6.581e-01, 3.510e-02, -7.398e-02, 1.795e-02, -2.268e-02, -1.436e-01) * s1_1_2;
	r1 += M4(-2.230e-01, 3.528e-01, 3.514e-02, -1.460e-02, -2.314e-01, -1.509e-01, 4.728e-02, 2.427e-02, 2.548e-01, 1.557e-01, 3.693e-01, -7.928e-02, -8.854e-02, -2.847e-01, -2.903e-02, -2.858e-02) * s1_1_2;
	r0 += M4(-1.782e-01, 1.268e-01, -1.173e-01, -3.256e-01, 6.360e-03, -1.490e-01, 7.692e-02, 3.991e-02, -1.044e-01, 5.485e-02, -1.143e-02, -4.365e-01, -1.197e-01, 3.121e-02, -8.766e-02, 3.193e-01) * s1_2_0;
	r1 += M4(-4.359e-01, -2.007e-01, -4.186e-03, -4.064e-02, -1.376e-01, 3.642e-01, -7.699e-03, -4.554e-02, -1.626e-02, 1.599e-01, -2.773e-01, -1.422e-02, 4.690e-01, -4.463e-01, 2.333e-01, -2.724e-03) * s1_2_0;
	r0 += M4(-1.359e-01, -4.939e-01, 3.076e-01, 2.142e-01, 1.653e-01, 5.566e-01, -4.497e-02, -3.687e-02, 2.965e-01, -6.506e-02, -1.217e-01, -3.389e-01, 1.492e-01, 1.071e-01, -2.210e-02, -1.090e-01) * s1_2_1;
	r1 += M4(2.019e-01, -2.521e-01, 7.888e-01, 3.496e-02, 3.005e-02, 1.351e-01, 2.959e-01, -1.758e-02, -1.090e-01, -5.215e-01, -6.002e-01, -2.214e-01, -3.449e-01, 8.154e-03, -1.294e-02, 5.071e-02) * s1_2_1;
	r0 += M4(8.588e-02, -6.005e-02, -2.312e-02, -2.523e-02, -1.066e-01, 4.290e-02, -8.661e-03, 1.176e-01, -1.255e-01, 5.419e-02, 1.173e-02, -3.196e-01, 4.735e-02, -7.382e-02, 8.666e-02, -1.549e-02) * s1_2_2;
	r1 += M4(-1.111e-01, -1.177e-01, 5.801e-02, -1.886e-02, -2.181e-02, 1.052e-01, -1.787e-02, -8.752e-03, 2.865e-01, -2.372e-01, 5.611e-03, -2.879e-02, 3.714e-02, 4.911e-02, 2.338e-03, -8.199e-03) * s1_2_2;
	r0 += V4(-1.616e-02, -1.151e-02, -7.433e-03, -1.992e-02);
	r0 = max(r0, V4(0.0));
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0));
	r1 += V4(-1.651e-02, -1.617e-02, -6.913e-03, -9.090e-03);
	r1 = max(r1, V4(0.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r1));
}

//!DESC CuNNy-2x8-BOX-out-shuffle
//!HOOK LUMA
//!COMPUTE 16 16 8 8
//!BIND conv2
//!BIND LUMA
//!WIDTH LUMA.w 2 *
//!HEIGHT LUMA.h 2 *
//!COMPONENTS 1
//!WHEN OUTPUT.w LUMA.w / 1.3 > OUTPUT.h LUMA.h / 1.3 > *
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : enable
#ifdef GL_EXT_shader_explicit_arithmetic_types_float16
#	define V4 f16vec4
#	define M4 f16mat4
#	define F float16_t
#else
#	define V4 vec4
#	define M4 mat4
#	define F float
#endif
#define l0(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(0, 0)) + vec2(0.5)) * conv2_pt))
#define l1(x, y) V4(conv2_tex((vec2(clamp(pos + ivec2(x, y), ivec2(0), sz) * ivec2(2, 1) + ivec2(1, 0)) + vec2(0.5)) * conv2_pt))
shared V4 G[2][10][10];
void hook() {
	ivec2 xy = ivec2(gl_LocalInvocationID.xy);
	ivec2 pos = ivec2(gl_WorkGroupID.xy) * ivec2(8, 8) + xy;
	ivec2 opos = pos * ivec2(2, 2);
	ivec2 sz = ivec2(LUMA_size) - ivec2(1);
	for (int y = 0; y < 10; y += 8) {
		int ay = xy.y + y;
		if (ay >= 10) break;
		for (int x = 0; x < 10; x += 8) {
			int ax = xy.x + x;
			if (ax >= 10) break;
			G[0][ay][ax] = l0(x - 1, y - 1);
			G[1][ay][ax] = l1(x - 1, y - 1);
		}
	}
	barrier();
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0;
	r0 = V4(0.0);
	s0_0_0 = G[0][xy.y+0][xy.x+0]; s0_0_1 = G[0][xy.y+0][xy.x+1];
	s0_0_2 = G[0][xy.y+0][xy.x+2]; s0_1_0 = G[0][xy.y+1][xy.x+0];
	s0_1_1 = G[0][xy.y+1][xy.x+1]; s0_1_2 = G[0][xy.y+1][xy.x+2];
	s0_2_0 = G[0][xy.y+2][xy.x+0]; s0_2_1 = G[0][xy.y+2][xy.x+1];
	s0_2_2 = G[0][xy.y+2][xy.x+2]; s1_0_0 = G[1][xy.y+0][xy.x+0];
	s1_0_1 = G[1][xy.y+0][xy.x+1]; s1_0_2 = G[1][xy.y+0][xy.x+2];
	s1_1_0 = G[1][xy.y+1][xy.x+0]; s1_1_1 = G[1][xy.y+1][xy.x+1];
	s1_1_2 = G[1][xy.y+1][xy.x+2]; s1_2_0 = G[1][xy.y+2][xy.x+0];
	s1_2_1 = G[1][xy.y+2][xy.x+1]; s1_2_2 = G[1][xy.y+2][xy.x+2];
	r0 += M4(2.935e-02, -3.379e-02, -5.450e-03, -1.037e-02, -4.698e-02, 9.684e-03, 1.341e-02, 2.130e-02, -2.708e-02, -6.246e-03, 2.144e-03, 1.875e-02, -4.926e-03, 3.220e-03, 1.573e-03, -3.730e-04) * s0_0_0;
	r0 += M4(-4.070e-03, -6.567e-02, 6.974e-03, 3.662e-02, -8.921e-02, 2.280e-01, -1.568e-02, 6.458e-03, -5.848e-02, -6.860e-02, 1.770e-02, 2.221e-02, 3.186e-02, 8.616e-03, -1.065e-02, -3.549e-03) * s0_0_1;
	r0 += M4(-1.993e-02, 2.616e-02, -1.124e-02, -1.459e-02, 3.596e-02, -6.271e-02, 2.018e-02, 1.640e-02, 2.619e-03, -2.600e-02, -4.684e-03, 7.551e-03, -5.327e-03, 3.680e-02, -1.089e-02, -1.230e-02) * s0_0_2;
	r0 += M4(-9.057e-02, 2.449e-02, 5.849e-02, -7.367e-03, 1.399e-01, -4.089e-02, 3.573e-02, -5.971e-02, 3.627e-02, -2.539e-02, 3.631e-02, -8.375e-02, 4.732e-02, -2.391e-02, 1.267e-02, 1.130e-03) * s0_1_0;
	r0 += M4(4.116e-01, -2.803e-01, 3.018e-01, -4.717e-01, -1.489e-01, 1.339e-02, -2.744e-01, 4.361e-01, -8.659e-02, 3.838e-01, -1.495e-01, 1.268e-01, -3.950e-01, 1.016e-02, 2.118e-01, 9.643e-02) * s0_1_1;
	r0 += M4(-7.945e-03, -1.672e-02, -4.627e-02, 1.067e-01, 4.977e-03, 5.818e-02, 1.973e-02, -9.394e-02, 1.108e-02, -3.922e-02, 1.048e-02, -3.242e-02, 2.646e-02, -2.920e-01, 4.101e-02, 1.860e-01) * s0_1_2;
	r0 += M4(2.593e-02, 2.676e-02, -8.033e-02, -2.406e-04, -4.431e-02, 1.748e-02, 2.183e-03, 1.852e-02, -4.552e-02, 1.648e-02, -6.964e-02, 6.744e-03, -2.871e-03, 8.069e-03, -2.530e-02, 6.256e-06) * s0_2_0;
	r0 += M4(-1.338e-03, -5.764e-02, 8.081e-02, 1.434e-03, 9.375e-03, 4.824e-02, 2.270e-02, -9.592e-02, -9.334e-03, -4.602e-02, -2.033e-02, 9.976e-02, -8.801e-03, -2.411e-02, 7.199e-02, -4.395e-03) * s0_2_1;
	r0 += M4(-2.708e-03, 2.157e-02, 6.719e-03, -3.080e-02, -1.287e-02, -3.994e-03, -6.385e-03, 2.161e-02, 4.623e-03, -2.611e-03, 1.294e-03, -1.138e-02, -7.766e-03, -6.089e-03, -3.292e-02, 4.545e-02) * s0_2_2;
	r0 += M4(-2.144e-01, 1.929e-01, -8.715e-02, 6.349e-02, 1.501e-02, -1.263e-02, 1.273e-02, 4.694e-03, 2.106e-03, -6.026e-03, 1.258e-02, 1.728e-02, -2.284e-03, -2.412e-02, 2.487e-03, -4.750e-03) * s1_0_0;
	r0 += M4(1.362e-01, -1.194e-01, -2.720e-02, 5.564e-02, 5.178e-02, 5.363e-02, 1.123e-02, 1.112e-02, 2.644e-01, 6.898e-02, -2.738e-02, -3.138e-02, 5.701e-02, 4.773e-02, 4.325e-02, 2.945e-02) * s1_0_1;
	r0 += M4(1.799e-03, 1.988e-02, 1.334e-03, -6.307e-03, -1.715e-02, -1.603e-02, 1.060e-02, -2.167e-03, -5.905e-03, 1.038e-01, 1.455e-02, -2.313e-02, -1.065e-02, 7.196e-03, -9.029e-03, 1.462e-02) * s1_0_2;
	r0 += M4(1.140e-01, -3.696e-02, -5.833e-02, 8.862e-02, 7.298e-02, -6.207e-03, -8.520e-02, 4.423e-02, -1.309e-02, 1.254e-02, -3.845e-02, -1.895e-02, -6.562e-03, 5.334e-02, -1.125e-02, 1.516e-02) * s1_1_0;
	r0 += M4(1.571e-01, -2.192e-01, 3.257e-01, -3.564e-01, 3.018e-01, 3.877e-01, -4.287e-01, -4.418e-01, 8.577e-02, -7.003e-02, 3.890e-01, 1.429e-01, -4.399e-01, -3.611e-01, -2.495e-01, -2.188e-01) * s1_1_1;
	r0 += M4(-3.821e-02, 7.690e-02, -5.313e-03, 1.788e-03, 2.832e-03, 3.936e-04, 5.195e-02, -7.245e-02, -2.203e-02, 3.436e-02, -2.765e-02, 1.036e-01, 9.053e-03, -8.384e-02, 2.871e-02, -3.137e-02) * s1_1_2;
	r0 += M4(-1.219e-02, 5.523e-03, 4.395e-02, -2.571e-02, -9.926e-03, 1.319e-03, 2.264e-02, 7.464e-03, 4.506e-03, -4.982e-03, 1.389e-02, 1.084e-02, 7.219e-03, -6.238e-03, -6.849e-03, -6.611e-03) * s1_2_0;
	r0 += M4(1.128e-03, 4.430e-02, -7.007e-02, 1.805e-02, -4.367e-02, -4.575e-02, 5.529e-02, 4.230e-02, 1.363e-02, 1.683e-02, 9.153e-04, -3.699e-02, 1.027e-02, 4.407e-02, -1.321e-01, -2.539e-02) * s1_2_1;
	r0 += M4(-2.088e-03, -6.977e-03, -2.545e-02, 4.194e-02, 3.411e-03, 7.472e-04, -5.579e-03, 2.203e-02, -3.222e-03, 1.791e-03, 2.558e-03, 3.369e-03, 2.810e-02, -4.148e-04, 2.089e-02, -4.504e-02) * s1_2_2;
	r0 += V4(-2.972e-08, -1.074e-08, -2.944e-08, -1.583e-08);
	r0 = tanh(r0);
	vec2 opt = 0.5 * LUMA_pt;
	vec2 fpos = (vec2(opos) + vec2(0.5)) * opt;
	imageStore(out_image, opos + ivec2(0, 0), vec4(r0.x + LUMA_tex(fpos + vec2(0.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 0), vec4(r0.y + LUMA_tex(fpos + vec2(1.0, 0.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(0, 1), vec4(r0.z + LUMA_tex(fpos + vec2(0.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
	imageStore(out_image, opos + ivec2(1, 1), vec4(r0.w + LUMA_tex(fpos + vec2(1.0, 1.0) * opt).r, 0.0, 0.0, 1.0));
}
