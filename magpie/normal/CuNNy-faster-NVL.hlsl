// CuNNy faster NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000168

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in (1x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(1.353e-01, 1.984e-02, 1.211e-02, 7.598e-01) * s0_0_0;
	r1 += V4(-1.652e-02, 1.962e-02, 3.038e-01, -2.677e-02) * s0_0_0;
	r0 += V4(-3.271e-01, 1.228e-02, -7.949e-01, -7.767e-01) * s0_0_1;
	r1 += V4(-1.923e-03, 5.059e-01, 3.410e-01, 4.174e-02) * s0_0_1;
	r0 += V4(2.191e-02, 5.508e-03, 3.210e-03, 1.244e-02) * s0_0_2;
	r1 += V4(2.057e-02, -5.037e-03, 1.729e-01, -6.058e-03) * s0_0_2;
	r0 += V4(-7.642e-02, -2.865e-02, -5.194e-03, 1.476e-02) * s0_1_0;
	r1 += V4(9.685e-03, -4.657e-03, -2.844e-01, 5.297e-01) * s0_1_0;
	r0 += V4(7.368e-01, -3.904e-02, 7.920e-01, 1.424e-02) * s0_1_1;
	r1 += V4(-8.027e-01, -1.428e-02, -5.293e-01, -2.466e-01) * s0_1_1;
	r0 += V4(-5.454e-03, -1.669e-02, -4.788e-03, -2.104e-02) * s0_1_2;
	r1 += V4(6.826e-01, 1.992e-02, -2.191e-01, 5.138e-02) * s0_1_2;
	r0 += V4(-2.345e-03, -1.705e-01, -5.146e-03, -3.928e-03) * s0_2_0;
	r1 += V4(8.427e-04, -2.452e-02, 5.649e-02, -1.625e-03) * s0_2_0;
	r0 += V4(-5.449e-02, 4.110e-01, 6.028e-03, 1.676e-03) * s0_2_1;
	r1 += V4(1.616e-01, 1.001e-02, 2.011e-02, 4.106e-02) * s0_2_1;
	r0 += V4(2.678e-04, 1.965e-02, -2.196e-03, -5.237e-04) * s0_2_2;
	r1 += V4(-5.201e-02, 6.417e-03, 1.263e-01, -2.240e-02) * s0_2_2;
	r0 += V4(9.737e-03, 3.376e-04, -6.982e-05, 1.065e-04);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(-1.634e-03, 6.261e-03, 7.272e-03, 1.764e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-2.009e-02, -1.789e-02, 5.410e-02, -1.018e-01, -2.488e-02, 1.013e-01, -2.033e-01, -4.382e-02, 5.287e-02, -1.402e-01, -6.212e-02, 4.560e-01, -1.269e-02, -1.121e-02, 9.638e-03, 1.005e-01));
	r1 += mul(s0_0_0, M4(-1.947e-02, 6.905e-02, -1.609e-02, -2.140e-04, 6.323e-02, -4.002e-01, -1.263e-01, 3.092e-01, -1.294e-01, 8.955e-02, 1.101e-01, 1.204e-01, -3.794e-03, 3.231e-02, 3.193e-02, -4.481e-02));
	r0 += mul(s0_0_1, M4(-1.252e-01, -1.412e-01, -1.671e-01, -4.204e-01, 2.861e-01, 4.473e-01, 2.779e-01, 3.734e-01, 7.202e-02, -5.246e-02, -5.593e-02, 2.520e-01, -2.025e-02, -2.284e-02, 2.660e-02, 1.801e-02));
	r1 += mul(s0_0_1, M4(-1.397e-01, 4.127e-01, 3.657e-01, 2.927e-01, 1.501e-01, 3.577e-02, -2.781e-01, -6.894e-01, -7.010e-02, -1.503e-01, -1.323e-01, 1.248e-01, -4.272e-02, 2.196e-02, 6.256e-02, -1.979e-02));
	r0 += mul(s0_0_2, M4(8.818e-02, 4.104e-02, -1.251e-01, 1.045e-01, -2.006e-02, -5.030e-01, 5.947e-02, 1.440e-01, 8.278e-02, -6.784e-02, -1.126e-01, 2.260e-01, -1.056e-02, 1.069e-02, -2.931e-03, -4.174e-02));
	r1 += mul(s0_0_2, M4(-1.107e-01, -2.038e-02, 2.319e-01, -1.275e-01, 2.549e-01, -7.610e-01, 5.256e-02, 4.579e-02, 1.268e-02, -1.359e-02, -1.205e-01, 6.674e-02, -6.435e-03, 1.685e-02, -6.875e-03, -5.187e-03));
	r0 += mul(s0_1_0, M4(-2.647e-02, 1.581e-01, -4.675e-01, -2.397e-01, -2.415e-01, -1.453e-02, -2.241e-01, -7.641e-02, 1.025e-02, -2.017e-01, 5.676e-02, -1.338e-03, 2.228e-02, -4.388e-02, 3.552e-02, 1.094e-01));
	r1 += mul(s0_1_0, M4(-5.359e-02, 1.791e-01, -4.806e-01, 4.063e-01, -3.246e-02, 1.376e-01, 9.113e-02, 1.185e-01, -5.858e-02, 2.876e-01, 2.085e-01, -2.084e-01, -2.496e-02, 1.374e-01, -1.230e-02, -5.269e-02));
	r0 += mul(s0_1_1, M4(7.693e-01, 4.973e-01, 9.013e-01, 2.145e-01, -1.358e-01, -7.300e-02, 3.370e-01, -6.581e-02, -2.825e-01, 7.363e-03, -4.778e-01, 2.370e-03, 6.706e-02, -5.024e-01, -5.630e-01, 5.037e-02));
	r1 += mul(s0_1_1, M4(-3.390e-01, -4.088e-01, 1.860e-02, -5.125e-02, -5.501e-02, 2.181e-01, -2.456e-01, 4.751e-01, 9.773e-01, -3.649e-01, 6.324e-02, -2.549e-01, -7.285e-02, 4.463e-01, -1.850e-01, 3.765e-01));
	r0 += mul(s0_1_2, M4(-4.072e-01, -4.837e-01, 1.950e-01, -4.694e-01, -3.875e-01, 1.525e-01, 3.914e-02, 3.271e-01, 1.912e-02, 1.313e-01, -2.085e-01, 3.134e-01, 1.538e-01, 2.329e-01, -2.027e-01, 6.497e-01));
	r1 += mul(s0_1_2, M4(-6.273e-02, 4.464e-01, 2.800e-01, 5.523e-02, -7.807e-02, -1.942e-01, 2.269e-01, 3.414e-01, 3.979e-01, -3.232e-01, 9.206e-02, 2.508e-01, -1.885e-01, -2.588e-01, -5.411e-01, 8.527e-02));
	r0 += mul(s0_2_0, M4(1.042e-01, 1.314e-01, -2.124e-01, 3.154e-01, 1.232e-02, -2.773e-02, -5.021e-02, 8.435e-02, -1.191e-01, -3.216e-03, 5.527e-01, -2.201e-01, 1.872e-02, -7.804e-03, 6.714e-02, 1.684e-02));
	r1 += mul(s0_2_0, M4(-2.712e-02, -3.838e-01, 1.058e-01, 3.135e-01, -6.042e-03, -1.323e-01, 6.627e-02, 8.942e-02, -4.040e-02, 6.699e-01, -6.384e-03, -3.271e-01, 3.409e-03, 6.494e-03, -1.588e-02, -9.252e-02));
	r0 += mul(s0_2_1, M4(-6.035e-01, -8.325e-02, -3.198e-01, 3.337e-01, -1.228e-01, 3.631e-02, 1.035e-02, 1.911e-01, 2.413e-01, -1.869e-01, 1.620e-01, -1.550e+00, -1.332e-01, -3.435e-01, 5.527e-01, -3.636e-02));
	r1 += mul(s0_2_1, M4(-8.194e-02, -2.769e-01, -6.658e-01, -3.370e-03, 3.559e-02, -8.973e-02, -2.214e-01, -1.285e-01, 7.851e-02, 2.794e-01, 7.168e-01, 1.301e-01, 3.178e-02, 5.098e-01, -5.286e-02, -3.046e-01));
	r0 += mul(s0_2_2, M4(-8.803e-02, -6.241e-01, 4.072e-02, -2.562e-01, -7.760e-03, -1.435e-01, -4.834e-02, -1.655e-01, 1.270e-01, 6.968e-01, -9.049e-02, 8.537e-02, -3.310e-01, 6.596e-01, -3.080e-01, 3.193e-01));
	r1 += mul(s0_2_2, M4(3.392e-02, 1.750e-01, -5.566e-01, -6.172e-01, 6.639e-02, 7.724e-02, -1.076e-01, -9.003e-02, -6.347e-01, -7.332e-03, 2.940e-01, 3.604e-01, 4.170e-01, -2.597e-01, 7.282e-01, -5.059e-01));
	r0 += mul(s1_0_0, M4(4.371e-03, 1.616e-01, 4.512e-01, 4.401e-01, 4.060e-02, -1.872e-01, -1.483e-02, 5.290e-01, -3.090e-03, 6.685e-02, -7.623e-02, -2.388e-01, -1.854e-02, -4.407e-02, 1.802e-01, -3.608e-02));
	r1 += mul(s1_0_0, M4(8.436e-02, -4.054e-01, 1.642e-01, -4.511e-01, -1.818e-01, 9.842e-03, -5.420e-02, 1.313e-01, 7.604e-02, -2.685e-01, -5.110e-02, -3.861e-02, 2.795e-02, -1.064e-01, 1.599e-01, -5.284e-02));
	r0 += mul(s1_0_1, M4(-8.962e-02, -2.423e-01, -4.269e-02, -6.629e-01, 7.934e-02, -1.978e-01, -1.278e-01, 1.946e-01, -8.164e-02, 1.931e-01, 1.663e-01, -3.417e-01, -1.919e-01, 3.946e-01, 2.496e-01, -1.332e-01));
	r1 += mul(s1_0_1, M4(8.455e-02, -1.174e-01, 2.526e-01, -6.123e-02, -1.362e-01, 1.135e-01, 1.012e-01, 3.859e-01, 1.565e-01, 1.737e-01, -1.086e-02, -1.929e-01, 2.266e-01, -3.221e-01, -1.427e-03, -2.589e-01));
	r0 += mul(s1_0_2, M4(1.709e-02, 7.112e-02, -9.174e-02, 7.594e-02, 1.284e-01, -1.438e-02, -2.587e-01, 3.805e-01, -8.088e-02, -6.563e-03, 1.043e-01, -2.695e-02, 4.601e-02, 8.328e-02, 1.460e-01, -4.907e-01));
	r1 += mul(s1_0_2, M4(9.246e-02, -9.440e-02, -1.909e-01, 7.446e-02, -1.098e-01, -1.299e-02, -6.792e-02, 3.713e-02, 4.213e-03, 3.413e-03, 6.568e-02, -6.243e-02, 2.743e-01, -4.711e-02, 1.873e-01, -1.269e-01));
	r0 += mul(s1_1_0, M4(-1.920e-01, 5.289e-02, 4.699e-01, -1.025e-01, -1.160e-01, -9.215e-03, 1.627e-01, -9.435e-02, -2.461e-02, 1.097e-01, -1.430e-01, -3.665e-03, -4.920e-02, 7.678e-02, -2.242e-01, -7.320e-02));
	r1 += mul(s1_1_0, M4(-1.191e-01, 2.845e-02, 5.556e-01, -8.086e-02, 1.556e-01, -4.761e-02, 5.485e-03, -8.676e-01, 8.060e-02, -3.174e-01, -2.611e-02, 2.260e-01, 8.262e-03, 3.855e-02, -1.038e-01, 7.540e-02));
	r0 += mul(s1_1_1, M4(3.837e-01, 5.293e-01, -2.694e-01, -1.114e+00, -2.231e-01, -4.120e-01, -7.095e-01, -6.296e-01, 3.429e-01, -3.193e-01, -1.597e-01, 6.206e-02, 1.165e-01, -3.355e-01, -4.124e-01, 2.684e-01));
	r1 += mul(s1_1_1, M4(5.020e-01, 2.320e-01, -6.426e-01, 4.732e-01, 5.936e-01, -6.662e-02, 7.204e-02, 7.629e-02, -2.140e-01, -9.847e-04, -2.892e-01, 4.850e-01, -3.339e-01, 5.561e-01, -1.636e-01, -1.487e-01));
	r0 += mul(s1_1_2, M4(-1.616e-02, -4.183e-02, 5.841e-04, -5.752e-02, -3.651e-01, 2.903e-01, 6.948e-02, 8.597e-02, -3.398e-03, -1.881e-01, 1.391e-01, 3.148e-02, 7.129e-01, 4.671e-01, 6.777e-01, 5.762e-01));
	r1 += mul(s1_1_2, M4(-4.169e-01, -1.768e-02, -1.694e-01, -7.476e-02, 4.620e-01, -4.228e-02, -1.379e-01, 3.235e-01, -4.112e-01, 1.962e-01, -1.701e-01, -3.061e-01, -9.328e-01, -2.725e-01, -3.720e-01, -6.482e-02));
	r0 += mul(s1_2_0, M4(2.748e-01, -9.884e-02, 3.729e-01, -2.349e-01, 3.074e-01, 1.392e-01, 8.876e-01, -2.057e-01, -7.258e-02, 2.512e-02, -1.257e-01, 6.379e-03, -6.567e-02, -4.681e-03, -6.269e-02, 1.829e-02));
	r1 += mul(s1_2_0, M4(1.669e-02, 1.111e-01, 1.004e-01, -7.257e-02, 1.800e-01, 2.016e-01, 3.780e-01, 1.799e-01, 6.926e-04, -2.529e-01, 1.437e-01, 1.057e-01, 8.428e-03, -8.191e-02, 6.678e-02, 7.095e-02));
	r0 += mul(s1_2_1, M4(3.115e-01, 4.453e-03, 2.118e-02, -1.392e-01, 3.206e-01, 9.057e-02, 2.443e-01, 2.414e-01, -1.132e-01, 2.702e-01, 1.074e-01, 3.369e-01, 1.892e-02, -1.673e-01, -2.984e-01, -3.899e-01));
	r1 += mul(s1_2_1, M4(-2.475e-01, -3.559e-03, 3.819e-01, 1.888e-01, -9.922e-02, 7.384e-03, 7.535e-01, -2.784e-01, 2.389e-02, 6.612e-02, -7.250e-03, 1.165e-01, 1.081e-01, 1.267e-01, -2.644e-01, -1.781e-01));
	r0 += mul(s1_2_2, M4(2.606e-02, -4.897e-04, -2.720e-02, -7.609e-02, 3.117e-02, 3.123e-01, -4.033e-01, -1.056e-01, -2.594e-03, -1.900e-01, 1.155e-01, -1.069e-01, 3.062e-01, 1.438e-01, -4.400e-02, -1.074e-01));
	r1 += mul(s1_2_2, M4(-2.104e-01, -7.837e-02, 7.984e-02, 1.006e-01, 5.542e-02, 6.948e-02, 1.648e-01, 2.363e-01, 7.252e-02, 7.817e-03, 1.969e-01, -1.184e-01, 1.132e-02, 1.860e-01, -8.397e-02, -2.329e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.590e-02, -3.718e-02, 6.763e-02, -2.990e-02, 1.084e-01, 1.646e-01, 4.274e-02, 2.483e-01, 1.574e-02, -3.674e-02, 1.412e-01, 1.185e-01, 5.693e-02, 1.335e-02, -1.000e-02, 3.505e-02));
	r1 += mul(s0_0_0, M4(1.018e-01, 1.782e-01, 1.427e-02, 3.622e-02, 3.611e-02, -4.739e-02, -2.839e-02, 1.104e-02, 1.193e-02, -3.061e-02, 5.945e-02, 2.623e-02, -2.312e-03, -1.014e-01, -1.981e-02, -7.092e-03));
	r0 += mul(s0_0_1, M4(4.445e-01, -1.546e-01, 3.386e-01, 1.207e+00, 1.343e-01, -1.379e-01, 1.382e-01, 7.492e-02, 2.183e-01, -3.461e-01, 9.308e-02, 3.649e-01, -1.562e-01, -1.274e-02, -1.393e-01, -2.764e-01));
	r1 += mul(s0_0_1, M4(6.272e-02, -2.537e-01, 2.272e-02, -7.001e-02, 1.058e-01, -5.078e-02, 7.368e-01, 2.966e-02, 6.339e-02, -1.382e-01, -2.241e-01, -3.938e-02, -6.835e-03, -7.544e-02, 4.436e-02, -1.140e-02));
	r0 += mul(s0_0_2, M4(-2.345e-01, 2.233e-01, 1.682e-01, 1.108e-02, 1.720e-02, 4.089e-02, -5.434e-02, 1.675e-01, 9.441e-03, 2.802e-01, 6.626e-02, 9.504e-02, 9.775e-02, -7.684e-02, 1.938e-02, -6.402e-02));
	r1 += mul(s0_0_2, M4(5.374e-02, 2.509e-02, 1.115e-01, -1.289e-02, -5.292e-03, -6.876e-02, -2.948e-02, -2.069e-02, 1.952e-01, 8.990e-02, 8.642e-01, 4.477e-02, 1.459e-03, 2.963e-02, -2.424e-02, 1.513e-02));
	r0 += mul(s0_1_0, M4(8.705e-02, 1.941e-01, 9.519e-02, 1.243e-01, 3.949e-01, 3.389e-01, 3.213e-01, 5.197e-01, -2.332e-01, -1.111e-01, 8.132e-02, -2.900e-01, -1.047e-01, 4.269e-02, -7.251e-02, -1.364e-02));
	r1 += mul(s0_1_0, M4(3.872e-02, 1.743e-01, -2.547e-02, -4.837e-02, 2.331e-01, 1.944e-01, 8.296e-03, 4.023e-02, -1.174e-02, 1.865e-02, -9.979e-03, -3.210e-03, -2.430e-02, -1.305e-01, -3.145e-02, -8.885e-03));
	r0 += mul(s0_1_1, M4(-4.580e-01, -2.297e-01, -7.129e-01, -7.997e-01, -4.229e-01, -3.721e-02, -2.549e-01, -7.558e-01, -6.348e-01, 3.154e-01, -6.663e-01, -8.340e-01, 9.089e-02, -2.477e-01, 9.372e-02, 5.176e-01));
	r1 += mul(s0_1_1, M4(-2.788e-01, -7.029e-01, -1.399e-02, -4.736e-03, 9.636e-02, 6.194e-01, 7.014e-02, 1.580e-02, -5.285e-02, -5.533e-03, 1.232e-02, -5.383e-02, 1.436e-03, -9.046e-01, 3.464e-02, -1.313e-01));
	r0 += mul(s0_1_2, M4(-1.062e-01, -3.359e-01, 2.056e-01, -2.388e-01, 1.131e-01, 1.519e-01, -1.213e-01, 9.289e-02, -1.078e-02, 2.744e-01, 1.421e-01, 2.789e-03, -3.500e-01, -1.990e-01, -3.214e-03, -3.447e-01));
	r1 += mul(s0_1_2, M4(3.028e-04, -6.575e-02, -3.957e-02, -7.410e-02, -1.016e-02, -2.469e-02, 1.101e-02, -3.743e-02, 2.363e-01, 5.012e-01, -7.544e-02, 1.958e-01, -2.844e-02, 1.622e-02, 5.891e-02, 7.544e-02));
	r0 += mul(s0_2_0, M4(-4.459e-02, 8.617e-02, -3.739e-02, -5.758e-02, 3.101e-02, 1.145e-01, 6.593e-02, 2.303e-01, 3.819e-02, 7.234e-03, 8.697e-03, 3.349e-02, -1.766e-04, -2.967e-02, 9.844e-02, -2.847e-02));
	r1 += mul(s0_2_0, M4(4.674e-03, 1.268e-01, -1.197e-02, -2.841e-02, 2.016e-02, -7.838e-02, -1.041e-02, -2.125e-02, -2.340e-03, -9.056e-03, -5.869e-04, 4.022e-03, 4.088e-02, 1.284e-01, -5.710e-03, -2.650e-02));
	r0 += mul(s0_2_1, M4(9.988e-02, 3.135e-01, -1.836e-01, -1.877e-01, -1.242e-01, -7.641e-02, 2.420e-01, 3.873e-01, 3.034e-02, -1.899e-01, 2.772e-01, 3.786e-02, 4.785e-02, 1.796e-01, -4.736e-01, -3.568e-01));
	r1 += mul(s0_2_1, M4(1.744e-03, 3.310e-01, -2.518e-02, 1.128e-01, 5.871e-02, -2.510e-01, 1.877e-02, 1.821e-01, 3.552e-02, -1.265e-01, -6.373e-03, -5.870e-02, -4.869e-02, 4.835e-01, 3.027e-02, 4.258e-02));
	r0 += mul(s0_2_2, M4(1.666e-01, -8.469e-02, 3.343e-02, -5.027e-02, -1.685e-01, 6.183e-02, -1.116e-01, -3.576e-02, -5.685e-02, 2.034e-02, 1.389e-01, 1.955e-01, 2.720e-01, -2.869e-02, 1.998e-01, 4.017e-02));
	r1 += mul(s0_2_2, M4(2.615e-02, 1.630e-01, -3.308e-02, 1.033e-01, 1.991e-03, -8.843e-02, 1.531e-02, -6.706e-03, 4.241e-02, -1.153e-01, 2.450e-02, 1.071e-01, -1.393e-03, 1.821e-01, -3.617e-02, -4.407e-02));
	r0 += mul(s1_0_0, M4(-1.276e-01, 1.875e-01, -2.400e-01, -4.326e-01, -3.978e-02, 3.889e-02, -8.431e-04, -5.986e-02, -9.894e-02, -8.522e-03, -1.199e-01, -3.344e-01, -1.317e-01, 3.444e-02, -1.682e-02, -1.509e-01));
	r1 += mul(s1_0_0, M4(-5.042e-02, 1.033e-01, -4.717e-02, 2.552e-02, -2.689e-03, 1.194e-01, -1.553e-02, 9.516e-03, 1.404e-02, 1.959e-01, -2.714e-02, 1.024e-02, -2.082e-02, 5.367e-02, 5.716e-02, 4.311e-03));
	r0 += mul(s1_0_1, M4(-3.083e-02, -1.577e-01, 2.348e-02, -2.173e-01, -3.350e-01, -3.433e-02, -1.640e-01, -2.920e-01, 1.341e-01, 1.984e-03, 2.944e-02, -1.367e-01, -1.641e-01, -3.365e-02, 2.234e-02, 2.485e-02));
	r1 += mul(s1_0_1, M4(-7.642e-02, 1.213e-01, -3.191e-01, -1.842e-02, -2.592e-02, 4.743e-02, 6.085e-02, 1.262e-02, 6.343e-02, 2.567e-01, 9.190e-02, 3.270e-02, 8.994e-03, -1.222e-02, 1.204e-03, 3.957e-03));
	r0 += mul(s1_0_2, M4(5.406e-02, 9.016e-04, -2.253e-02, 4.675e-02, -2.181e-02, 6.422e-02, -2.992e-02, -1.561e-01, 1.460e-01, 5.041e-02, -3.659e-02, 1.553e-02, -1.547e-01, 2.823e-03, -2.356e-04, -3.843e-02));
	r1 += mul(s1_0_2, M4(1.381e-02, 4.392e-02, 4.206e-02, 1.582e-02, -3.001e-02, 1.440e-01, -7.453e-02, -2.310e-02, -1.520e-04, -3.816e-02, -6.407e-02, -1.683e-02, 1.145e-02, 3.919e-02, -4.474e-02, 1.224e-02));
	r0 += mul(s1_1_0, M4(-7.524e-02, -2.979e-01, 8.318e-02, 7.403e-01, 4.475e-02, 4.136e-02, -5.767e-02, 7.280e-02, 3.155e-01, 1.294e-01, -1.255e-01, 4.408e-01, -6.599e-02, -2.725e-01, 1.401e-01, -3.189e-01));
	r1 += mul(s1_1_0, M4(-3.879e-02, -4.951e-01, -3.741e-02, -1.406e-02, -3.280e-04, -1.879e-01, -1.150e-02, 7.396e-04, -4.298e-02, -3.018e-01, -5.242e-02, -7.446e-02, 5.241e-02, -1.476e-02, 6.013e-02, 1.815e-02));
	r0 += mul(s1_1_1, M4(4.758e-01, 3.232e-01, 3.724e-01, -8.715e-02, -3.955e-01, -9.355e-01, 4.307e-01, -7.977e-01, -6.624e-01, -7.168e-01, 5.879e-01, 2.026e-01, 3.080e-01, 1.943e-01, -1.004e+00, -3.760e-01));
	r1 += mul(s1_1_1, M4(1.460e-01, 2.842e-01, 9.285e-02, -2.553e-02, 2.240e-01, -5.215e-01, 2.644e-02, 5.335e-02, -9.251e-02, 8.703e-02, 5.650e-02, 5.651e-02, 1.475e-01, -1.090e+00, -1.158e-01, -1.033e-01));
	r0 += mul(s1_1_2, M4(-2.119e-02, -2.223e-02, -9.351e-02, 8.831e-02, -1.198e-02, 3.252e-01, -4.449e-01, 5.059e-01, -3.817e-01, 9.150e-02, -1.169e-02, 2.952e-01, 8.889e-02, -1.612e-01, 1.273e-01, -2.465e-01));
	r1 += mul(s1_1_2, M4(6.548e-03, 7.247e-02, 1.025e-02, 3.943e-02, -8.735e-03, -4.058e-01, -4.364e-02, 1.607e-01, -9.137e-03, -1.420e-01, -1.563e-02, -6.705e-04, 8.256e-03, -2.182e-01, 3.821e-02, -3.601e-02));
	r0 += mul(s1_2_0, M4(2.218e-01, 2.132e-01, 3.483e-03, 2.367e-01, -4.162e-02, -5.432e-02, 8.253e-03, -1.310e-02, -1.897e-02, 3.731e-02, -1.772e-01, -3.046e-02, -5.209e-02, -1.336e-01, 1.626e-01, 5.436e-02));
	r1 += mul(s1_2_0, M4(6.422e-02, 3.741e-01, -1.378e-02, 9.565e-02, 5.151e-03, 6.103e-02, 3.054e-03, -3.426e-03, -2.503e-02, 1.059e-02, 8.404e-03, -5.059e-03, -2.966e-03, 1.100e-01, 2.255e-02, 1.208e-01));
	r0 += mul(s1_2_1, M4(-1.040e-01, 3.138e-02, 1.043e-01, 9.092e-02, 1.172e-01, 5.869e-02, -3.638e-02, -2.086e-02, -2.431e-03, -8.227e-02, -6.164e-02, -2.417e-01, -4.413e-02, -6.431e-02, -8.170e-02, -9.898e-02));
	r1 += mul(s1_2_1, M4(7.707e-02, 2.513e-01, -1.060e-02, 8.411e-01, 2.546e-02, 6.963e-02, 3.978e-03, -2.772e-02, -3.870e-02, 5.396e-02, 8.284e-04, -1.154e-01, 3.316e-04, -7.312e-02, 6.370e-03, -1.996e-01));
	r0 += mul(s1_2_2, M4(-5.199e-02, 1.037e-02, 4.263e-02, 3.473e-02, 6.419e-04, 3.944e-02, -5.674e-02, -6.009e-02, -1.930e-02, -2.193e-02, -3.043e-02, -5.479e-02, -8.892e-04, 1.949e-02, -4.137e-02, 2.903e-02));
	r1 += mul(s1_2_2, M4(1.077e-02, 1.058e-01, 3.821e-02, -3.267e-02, -3.517e-02, -4.561e-02, -2.393e-02, -1.696e-01, -3.259e-02, -5.977e-02, -1.376e-02, -1.265e-01, 4.180e-03, -7.097e-03, 1.276e-02, 7.251e-02));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle (8x4)
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(7.605e-03, 3.282e-03, -7.844e-03, -8.945e-03, -5.125e-03, 6.052e-03, -5.874e-03, 3.061e-03, -4.841e-03, -6.400e-03, 6.304e-03, 3.646e-04, -1.143e-02, -2.657e-04, 4.133e-03, 1.150e-03));
	r0 += mul(s0_0_1, M4(5.609e-03, 9.330e-02, -2.913e-03, -3.378e-02, 1.037e-03, 1.737e-02, 4.784e-03, -2.970e-02, -1.234e-01, 6.301e-02, 1.874e-02, -4.795e-03, -1.509e-02, -1.160e-01, 2.215e-03, 3.845e-02));
	r0 += mul(s0_0_2, M4(-3.062e-03, 8.856e-03, 6.215e-03, 3.663e-03, 2.466e-03, 8.704e-03, -2.868e-04, -1.234e-03, -3.196e-03, 7.819e-03, -6.438e-03, -1.620e-02, -9.945e-03, 4.238e-03, 6.844e-03, 3.409e-03));
	r0 += mul(s0_1_0, M4(-1.440e-01, 1.837e-02, 1.064e-01, -2.608e-03, -5.610e-03, 1.175e-02, 4.068e-02, -1.630e-02, -2.201e-02, -3.465e-04, -1.911e-03, -2.057e-02, -2.809e-02, 2.615e-03, -8.374e-02, 4.339e-02));
	r0 += mul(s0_1_1, M4(4.262e-02, -4.717e-01, 3.818e-02, 2.446e-01, 2.627e-01, -5.039e-01, 1.899e-01, 1.569e-02, 7.384e-02, 1.987e-01, -4.893e-01, 3.174e-01, 4.131e-01, 1.558e-01, 6.179e-02, -4.443e-01));
	r0 += mul(s0_1_2, M4(-3.233e-02, 3.184e-02, 8.689e-03, -6.503e-04, -1.549e-02, 1.819e-02, -5.479e-03, -2.618e-02, -2.891e-02, 5.357e-02, 5.931e-03, -3.114e-02, -7.640e-03, 1.923e-02, -2.789e-02, -7.483e-04));
	r0 += mul(s0_2_0, M4(-9.279e-03, 1.727e-02, -4.306e-02, 3.137e-02, 1.332e-03, -7.543e-03, 5.522e-02, 3.161e-03, -2.652e-03, -5.967e-03, 2.667e-02, 4.786e-05, -4.890e-03, 3.651e-03, -2.030e-02, 1.593e-02));
	r0 += mul(s0_2_1, M4(-3.307e-02, -3.039e-03, 7.103e-02, 6.658e-03, 1.032e-02, 2.071e-02, 6.666e-02, -1.343e-01, -2.814e-02, 1.604e-02, -1.144e-02, 8.648e-03, -1.333e-02, -1.478e-02, 3.577e-03, 1.739e-02));
	r0 += mul(s0_2_2, M4(-8.135e-03, -9.063e-03, -3.181e-03, 2.654e-03, -1.250e-02, -1.406e-03, 4.604e-03, 2.714e-02, -8.516e-03, -1.285e-02, 6.440e-03, -5.422e-03, -8.819e-03, -6.688e-03, -8.380e-04, -1.715e-02));
	r0 += mul(s1_0_0, M4(-7.430e-02, 1.888e-03, 3.120e-03, -8.834e-03, -1.382e-02, 5.363e-03, -6.965e-03, 4.675e-05, 1.370e-02, -4.747e-03, 3.972e-03, 2.633e-03, 2.271e-01, -3.385e-02, 2.871e-02, 7.386e-03));
	r0 += mul(s1_0_1, M4(4.237e-02, -1.160e-01, -3.057e-02, 4.297e-02, 2.469e-02, -5.766e-04, -1.281e-02, -1.113e-02, -5.349e-03, 1.260e-02, 6.995e-03, 1.347e-03, 8.132e-02, 4.326e-01, -3.685e-03, 1.903e-03));
	r0 += mul(s1_0_2, M4(5.210e-03, -4.009e-02, 2.593e-03, 5.570e-03, 1.591e-02, 2.285e-03, 3.718e-03, 6.857e-06, -1.327e-03, 3.506e-03, 3.431e-03, -1.749e-03, 3.035e-02, -2.959e-02, -3.737e-03, -1.554e-02));
	r0 += mul(s1_1_0, M4(1.284e-01, 6.274e-03, -1.630e-02, 3.117e-02, -3.455e-02, -2.216e-02, 7.202e-02, -1.029e-02, 6.421e-02, 4.236e-02, 2.710e-03, 1.852e-02, 8.331e-02, 3.317e-02, -1.144e-01, -5.415e-02));
	r0 += mul(s1_1_1, M4(-5.723e-01, -2.012e-01, -3.013e-01, -5.736e-01, -4.990e-01, -4.966e-02, 2.099e-01, 3.951e-01, 9.826e-03, 1.042e-01, 3.107e-02, 6.274e-02, 4.035e-02, -2.187e-03, -5.626e-02, -1.551e-02));
	r0 += mul(s1_1_2, M4(1.234e-02, 3.029e-02, 1.313e-02, 7.127e-02, 4.040e-02, -1.033e-01, 1.971e-02, 4.320e-03, -6.502e-03, 3.475e-03, 2.483e-03, -4.316e-03, 2.209e-02, 1.029e-02, 4.670e-03, -3.049e-02));
	r0 += mul(s1_2_0, M4(-1.357e-02, 7.123e-03, -1.877e-02, -1.937e-04, 8.377e-03, 1.425e-02, -4.013e-02, 9.949e-03, 2.792e-03, -5.139e-02, 3.779e-01, 3.651e-02, 5.651e-04, 2.594e-03, 1.190e-02, -1.665e-02));
	r0 += mul(s1_2_1, M4(4.236e-02, -2.043e-02, 1.498e-02, 6.398e-02, 3.332e-02, -3.182e-03, -8.433e-02, -4.333e-02, 6.519e-02, 1.051e-01, 7.663e-04, 2.702e-01, -8.898e-03, 9.763e-03, -9.557e-03, 8.880e-03));
	r0 += mul(s1_2_2, M4(-1.295e-02, -3.357e-02, -2.643e-03, -3.894e-02, 1.395e-02, 8.703e-03, -2.143e-02, -2.611e-02, 2.635e-03, -2.855e-03, -4.167e-03, 5.033e-03, -1.339e-03, 5.078e-03, -5.844e-04, -4.465e-03));
	r0 += V4(3.823e-04, 2.977e-04, 2.425e-04, 3.138e-04);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
