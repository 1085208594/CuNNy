// CuNNy faster NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000168

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(6.641e-03, -2.783e-01, 3.347e-01, 1.679e-01) * s0_0_0;
	r1 += V4(5.885e-03, -9.864e-03, 2.399e-02, -5.926e-02) * s0_0_0;
	r0 += V4(-6.821e-03, 1.155e-01, 4.305e-01, -9.049e-02) * s0_0_1;
	r1 += V4(-1.733e-02, 3.430e-02, 3.683e-02, 7.853e-02) * s0_0_1;
	r0 += V4(1.999e-03, 1.715e-01, -7.066e-02, 7.634e-02) * s0_0_2;
	r1 += V4(6.157e-03, -1.879e-02, -6.332e-02, -1.303e-02) * s0_0_2;
	r0 += V4(-8.311e-02, 3.034e-01, -6.973e-01, -9.226e-02) * s0_1_0;
	r1 += V4(1.292e-04, -2.847e-02, 1.342e-03, 8.764e-02) * s0_1_0;
	r0 += V4(1.061e+00, 6.402e-01, -6.033e-01, -1.011e+00) * s0_1_1;
	r1 += V4(-1.088e+00, -9.223e-01, -2.279e-01, -7.856e-02) * s0_1_1;
	r0 += V4(5.076e-02, -9.891e-01, 6.753e-02, 2.345e-01) * s0_1_2;
	r1 += V4(2.971e-03, 9.512e-01, 6.571e-02, 1.837e-01) * s0_1_2;
	r0 += V4(7.788e-02, -2.659e-02, 3.916e-01, 7.891e-02) * s0_2_0;
	r1 += V4(-3.183e-03, 3.851e-02, 1.004e+00, -1.780e-02) * s0_2_0;
	r0 += V4(-1.055e+00, -8.184e-01, 9.763e-02, 2.368e-01) * s0_2_1;
	r1 += V4(1.098e+00, -7.990e-02, -8.340e-01, -1.489e-01) * s0_2_1;
	r0 += V4(-5.472e-02, 8.812e-01, 4.921e-02, 1.323e-01) * s0_2_2;
	r1 += V4(-1.010e-02, 3.504e-02, -2.384e-03, -3.905e-02) * s0_2_2;
	r0 += V4(-8.636e-04, -4.443e-03, -1.375e-03, -3.418e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(8.025e-05, -1.247e-03, 5.720e-06, 4.187e-02);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(2.047e-02, -1.065e-01, -5.799e-02, -1.371e-01, 2.478e-02, 1.509e-01, 1.072e-01, 1.488e-01, 1.715e-02, -5.683e-03, -5.087e-02, 3.054e-02, -7.162e-02, 1.015e-02, 1.578e-01, 2.419e-02));
	r1 += mul(s0_0_0, M4(3.203e-02, -8.234e-01, 3.322e-01, -2.627e-01, 1.162e-02, 1.220e-02, 1.528e-01, -1.246e-01, 3.498e-02, -2.398e-02, 5.252e-03, -4.382e-02, -2.149e-02, 2.347e-01, -1.425e-01, -8.442e-02));
	r0 += mul(s0_0_1, M4(6.621e-01, 9.311e-02, 2.713e-02, -1.612e-02, -8.429e-02, -3.821e-02, 9.474e-03, -2.656e-01, -4.917e-02, -1.451e-01, -2.108e-01, -2.163e-01, 5.556e-02, -1.431e-01, -1.017e-01, 9.366e-02));
	r1 += mul(s0_0_1, M4(-1.762e-01, -1.727e+00, 9.151e-01, -9.729e-02, 1.035e-01, -7.888e-02, -5.034e-02, -2.217e-01, -1.358e-02, -6.297e-02, 7.565e-02, -1.491e-01, -1.558e-01, -5.438e-02, -3.912e-02, -1.666e-01));
	r0 += mul(s0_0_2, M4(1.479e-02, -2.215e-02, 2.173e-01, -2.222e-01, 7.888e-03, 1.126e-02, 1.013e-01, -3.455e-02, 3.770e-02, 3.544e-02, 5.482e-03, -7.397e-02, 8.592e-02, -1.071e-02, 1.910e-01, -3.745e-02));
	r1 += mul(s0_0_2, M4(1.651e-01, 5.579e-02, 1.151e-01, -8.943e-02, 5.436e-03, 1.548e-01, 7.075e-02, -7.290e-02, -5.695e-03, -2.255e-03, 3.427e-02, 1.033e-01, -6.519e-02, 1.046e-01, -1.262e-01, -8.429e-02));
	r0 += mul(s0_1_0, M4(7.310e-03, 2.914e-01, -1.032e-02, 1.171e-01, -5.967e-03, -5.926e-02, 5.673e-02, -3.871e-01, 1.229e-02, -1.359e-02, -3.784e-02, 1.212e-01, 6.120e-02, -6.817e-01, -1.012e-01, -1.051e-01));
	r1 += mul(s0_1_0, M4(-4.957e-03, -5.982e-01, 1.327e-01, -5.589e-02, 1.162e-02, 1.467e-01, 7.658e-02, -4.287e-02, -1.238e-01, -1.160e-01, -1.822e-01, -7.780e-02, 1.217e-01, -3.133e-01, 2.802e-01, -8.551e-02));
	r0 += mul(s0_1_1, M4(-7.811e-03, -2.098e-01, 3.683e-01, 2.345e-01, -5.044e-02, -1.612e-01, 2.626e-01, -1.096e-01, -1.106e-01, -3.425e-01, 1.848e-02, -3.210e-01, -3.456e-01, -4.298e-02, -3.451e-01, -2.934e-01));
	r1 += mul(s0_1_1, M4(1.049e-01, 7.603e-01, -4.510e-01, -2.724e-01, -4.954e-02, 1.502e-01, -1.807e-01, -4.522e-01, 1.257e-01, 1.469e+00, -3.458e-01, 3.059e-01, -1.723e-03, 8.493e-01, 2.158e-02, 3.447e-01));
	r0 += mul(s0_1_2, M4(-2.032e-02, -1.434e-01, -2.488e-01, 3.330e-02, 1.675e-02, -1.449e-01, 3.966e-02, -4.572e-02, -2.717e-02, 5.790e-02, -2.069e-01, 3.404e-03, 2.940e-02, 1.507e-01, -3.717e-01, -6.469e-02));
	r1 += mul(s0_1_2, M4(-1.997e-01, 5.139e-02, 1.058e-01, 1.577e-01, 5.180e-02, 1.129e-01, -7.451e-03, 9.742e-02, -1.845e-01, 2.262e-01, -3.661e-01, 2.985e-01, -5.019e-01, -5.098e-01, -1.104e-01, -5.232e-02));
	r0 += mul(s0_2_0, M4(-1.442e-02, -1.412e-02, -4.216e-02, -3.679e-02, -8.301e-02, 6.099e-02, 1.066e-01, 3.108e-02, 4.475e-02, -3.284e-01, 2.367e-01, -1.971e-02, 9.965e-02, -7.035e-03, 1.487e-02, 1.151e-01));
	r1 += mul(s0_2_0, M4(-1.479e-01, -1.388e-01, 2.627e-02, -4.993e-02, -1.038e-01, 4.985e-01, -1.828e-01, -1.044e-01, 3.283e-02, 2.978e-01, -1.034e-01, 1.019e-01, 1.442e-01, -1.723e-01, -3.098e-02, -6.967e-02));
	r0 += mul(s0_2_1, M4(-2.303e-02, -4.692e-04, 5.011e-02, 5.384e-02, 3.104e-02, -4.090e-02, -3.648e-02, 8.580e-02, -1.919e-01, -1.432e-02, 3.681e-01, 3.875e-01, 2.584e-02, -2.122e-01, -2.793e-01, -3.057e-01));
	r1 += mul(s0_2_1, M4(1.755e-01, 1.263e-01, -9.605e-02, -3.703e-02, -7.995e-02, 2.782e-01, -3.310e-01, 9.276e-02, -2.380e-01, -5.617e-01, -4.516e-01, -1.490e-01, 3.651e-02, -3.584e-01, 6.079e-01, -1.791e-01));
	r0 += mul(s0_2_2, M4(6.245e-02, 4.455e-02, 1.621e-02, -1.395e-02, 5.925e-03, 2.213e-02, -4.111e-02, -2.060e-03, 7.582e-02, 4.787e-03, 2.281e-01, 6.426e-02, 5.785e-02, 1.106e-01, 8.666e-02, -2.133e-02));
	r1 += mul(s0_2_2, M4(-2.653e-02, 2.485e-01, -1.993e-02, 1.802e-01, -4.075e-02, 3.805e-02, -3.735e-02, 9.051e-02, -4.151e-02, 1.948e-01, -3.506e-01, -6.027e-02, -2.225e-01, -1.689e-01, -5.076e-02, 9.301e-02));
	r0 += mul(s1_0_0, M4(1.865e-02, 6.940e-03, -1.345e-01, 6.434e-02, -2.609e-03, 6.438e-02, -1.285e-01, -4.870e-02, -1.615e-02, 2.220e-03, -1.142e-01, 1.140e-01, 7.675e-02, -1.023e-01, 1.961e-01, -3.017e-02));
	r1 += mul(s1_0_0, M4(-4.246e-02, -7.337e-02, 5.331e-02, -1.646e-02, -2.415e-02, 1.138e-01, 1.401e-01, -6.471e-02, -4.437e-02, -8.648e-03, -1.978e-02, 1.207e-02, 7.593e-02, 2.008e-01, 4.381e-02, 2.027e-01));
	r0 += mul(s1_0_1, M4(-4.942e-02, -1.214e-02, 2.078e-01, -1.165e-01, 1.742e-01, 5.401e-02, -1.220e-01, -3.040e-02, 3.445e-03, 3.800e-01, 8.133e-02, -1.806e-01, -1.067e-01, -1.731e-01, -1.804e-01, 8.716e-01));
	r1 += mul(s1_0_1, M4(3.643e-01, 5.525e-02, 2.401e-01, -1.232e-01, -2.762e-02, -3.933e-01, 3.467e-01, 1.261e-02, -7.187e-02, -9.860e-01, -3.064e-01, 8.888e-02, -9.537e-02, 9.922e-01, -2.389e-01, 9.605e-02));
	r0 += mul(s1_0_2, M4(9.436e-02, -6.883e-02, -5.575e-02, 1.558e-01, -1.802e-02, -6.517e-02, 2.129e-02, -2.709e-02, -3.164e-01, -3.786e-01, 1.295e-01, 1.724e-01, 7.341e-03, 2.286e-01, -9.595e-02, 2.280e-01));
	r1 += mul(s1_0_2, M4(1.038e-01, 5.695e-02, 2.426e-01, 2.302e-02, 9.686e-02, 2.446e-01, 1.314e-01, 8.241e-02, 1.574e-01, 2.559e-01, 1.789e-01, -3.629e-02, -1.201e-01, -6.700e-01, -1.563e-01, -2.327e-01));
	r0 += mul(s1_1_0, M4(-7.456e-02, 6.550e-02, -2.466e-01, 2.112e-01, 1.038e-01, -1.910e-01, -8.510e-02, 6.583e-01, 8.958e-03, -7.867e-02, 3.523e-02, -2.061e-02, 5.484e-02, 1.440e-01, -1.410e-01, 5.134e-02));
	r1 += mul(s1_1_0, M4(-1.643e-02, -1.389e-01, 1.967e-01, -1.246e-01, 2.205e-02, -1.513e+00, 9.288e-03, -2.493e-01, 4.187e-02, -1.565e-02, -8.628e-02, -5.003e-02, 1.067e-01, 1.104e+00, 2.341e-02, 1.008e-02));
	r0 += mul(s1_1_1, M4(6.699e-01, 1.306e-01, -1.266e-02, 6.943e-02, 7.789e-01, 3.142e-01, 6.720e-02, 5.800e-04, 3.034e-02, 6.004e-01, 2.172e-01, 6.959e-02, 3.524e-01, 4.632e-01, -1.298e-01, -8.061e-01));
	r1 += mul(s1_1_1, M4(4.056e-01, -1.903e+00, -1.481e-01, 4.534e-01, 5.840e-01, -9.667e-01, 3.360e-01, 1.237e-02, -1.766e-01, -5.294e-01, -1.904e-01, 3.453e-03, 5.501e-01, -6.778e-01, 3.510e-01, 5.544e-01));
	r0 += mul(s1_1_2, M4(1.303e-01, 4.676e-02, 2.419e-01, -1.441e-01, -1.530e-01, 4.090e-03, 4.313e-03, 1.117e-01, 7.936e-02, -8.359e-02, 1.290e-01, -1.223e-02, -1.402e-01, -4.490e-01, 2.749e-01, -3.444e-01));
	r1 += mul(s1_1_2, M4(6.894e-01, 2.804e-01, 1.666e-01, 3.324e-01, 2.042e-01, 1.820e-01, 2.839e-02, 4.534e-02, 5.723e-01, 2.412e-01, -2.085e-01, 9.091e-02, -3.907e-01, -1.778e-01, -6.337e-02, -1.294e-01));
	r0 += mul(s1_2_0, M4(2.496e-02, 2.667e-02, -1.716e-02, -1.089e-01, -1.095e-01, -5.014e-02, -1.626e-01, 4.014e-01, -1.241e-02, 1.124e-01, -4.841e-02, -2.257e-02, 1.724e-01, -1.088e-01, 1.766e-01, -3.382e-01));
	r1 += mul(s1_2_0, M4(1.106e-01, 5.219e-01, 8.243e-02, 1.042e-01, -2.036e-01, 3.818e-01, -3.261e-01, -1.499e-01, -1.961e-02, -2.450e-03, 3.679e-02, -1.425e-02, 6.896e-01, -4.427e-02, 1.345e-01, 3.682e-01));
	r0 += mul(s1_2_1, M4(-2.659e-02, 1.469e-02, -1.038e-01, -4.836e-02, 1.198e-01, -9.549e-03, -1.333e-01, 2.310e-01, -1.207e-02, -9.175e-02, -4.041e-02, -3.532e-02, -3.851e-01, -1.968e-01, 2.116e-02, 1.225e-02));
	r1 += mul(s1_2_1, M4(-2.439e-01, -1.479e-01, -4.871e-03, 9.130e-02, -3.842e-01, 7.804e-02, -2.060e-01, 3.546e-01, -8.853e-02, -1.739e-01, 2.992e-02, -4.301e-02, -6.586e-01, -8.617e-01, 1.381e-01, -5.062e-01));
	r0 += mul(s1_2_2, M4(-7.553e-02, 1.037e-01, -5.568e-02, -2.187e-02, -3.211e-02, -5.473e-02, -2.841e-02, 3.014e-03, -6.671e-02, -7.908e-02, 9.031e-02, 7.542e-02, -3.301e-02, 1.743e-01, -1.034e-01, 3.192e-01));
	r1 += mul(s1_2_2, M4(4.052e-02, -3.721e-02, 1.018e-01, -8.803e-02, 9.751e-02, 4.554e-02, 1.534e-01, 2.265e-02, -5.943e-02, 5.472e-02, -4.919e-02, -1.057e-01, -1.620e-01, 6.048e-02, -2.202e-01, -3.061e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.653e-01, -1.558e-02, 9.616e-02, -2.959e-02, -6.618e-02, 7.405e-02, -2.577e-02, -1.015e-02, 5.878e-02, -4.308e-02, -5.598e-02, 1.875e-03, -5.224e-02, -4.176e-02, 3.286e-02, -1.248e-02));
	r1 += mul(s0_0_0, M4(-9.806e-02, 1.189e-02, 9.346e-02, -1.619e-02, -2.256e-02, -4.694e-03, -2.396e-03, 3.324e-03, 3.707e-02, 8.520e-03, 1.665e-03, -1.853e-03, 2.622e-02, -1.187e-02, 1.109e-02, -1.541e-02));
	r0 += mul(s0_0_1, M4(6.642e-01, 1.066e-01, -1.730e-02, 7.764e-02, -2.293e-01, 1.059e-01, 2.781e-02, 7.898e-02, -2.911e-01, -1.472e-01, 2.258e-02, -1.042e-01, -2.662e-01, -5.718e-02, -4.403e-02, 4.409e-02));
	r1 += mul(s0_0_1, M4(7.892e-02, 1.052e-01, 4.573e-01, -1.385e-02, -3.576e-01, -1.201e-01, -1.313e-01, 7.257e-02, -2.978e-01, -1.930e-02, -1.174e-01, 7.001e-02, 3.795e-01, 3.603e-02, -1.924e-01, 6.652e-03));
	r0 += mul(s0_0_2, M4(1.899e-01, -3.880e-03, 7.790e-03, 1.082e-01, -3.344e-01, 2.191e-01, 2.470e-02, 8.434e-02, -1.154e-01, 9.347e-02, 1.315e-02, -9.499e-02, -2.027e-01, -6.937e-03, -4.516e-02, -9.948e-02));
	r1 += mul(s0_0_2, M4(1.552e-02, 5.872e-02, -1.070e-02, 1.044e-02, -1.481e-01, -2.833e-02, 1.480e-01, 1.478e-02, -2.043e-01, -8.516e-02, -5.459e-02, 3.406e-02, -1.265e-01, 8.805e-03, 1.359e-01, 4.162e-02));
	r0 += mul(s0_1_0, M4(-3.797e-02, 3.026e-01, 2.261e-01, 4.187e-02, -6.050e-02, -8.422e-02, -2.372e-01, 7.349e-02, -4.794e-02, 1.880e-02, 3.160e-01, -2.046e-01, 4.746e-03, -1.992e-01, -8.723e-02, 1.695e-02));
	r1 += mul(s0_1_0, M4(4.281e-01, -5.729e-02, 7.790e-02, -1.003e-01, 6.581e-03, 6.586e-03, -5.468e-03, 9.859e-03, -4.149e-02, 2.080e-02, -9.933e-02, -5.603e-02, -3.080e-02, 2.894e-03, -3.967e-02, 3.138e-02));
	r0 += mul(s0_1_1, M4(-2.522e-01, 3.021e-01, 1.032e-02, 3.149e-01, 8.621e-02, 1.483e-01, 6.167e-01, -3.732e-01, -5.811e-02, -3.053e-01, 1.470e-01, 6.103e-01, -1.529e-01, -7.984e-02, 9.216e-02, -5.996e-01));
	r1 += mul(s0_1_1, M4(4.362e-01, 1.763e-01, -8.299e-02, -3.526e-02, 1.643e-01, -1.401e-01, 7.399e-03, -4.448e-02, 9.212e-01, 3.582e-01, 1.352e-01, -1.354e-01, -1.348e+00, -1.336e-01, -1.137e-01, 1.204e-01));
	r0 += mul(s0_1_2, M4(-2.524e-01, -2.470e-01, -7.412e-03, 3.340e-02, 1.785e-01, 1.892e-01, -1.121e-01, 5.566e-01, 3.455e-02, 1.991e-01, 4.063e-02, 1.143e-01, 2.912e-01, 8.797e-02, 9.800e-02, 5.281e-01));
	r1 += mul(s0_1_2, M4(2.627e-01, -3.572e-02, 4.797e-02, 2.211e-02, -5.634e-02, 2.254e-01, -3.711e-02, 7.655e-02, 7.120e-02, 1.096e-01, -3.024e-02, -1.323e-01, -6.869e-03, 4.286e-01, 4.020e-02, -8.718e-02));
	r0 += mul(s0_2_0, M4(-5.684e-02, 5.369e-02, 3.760e-01, 1.315e-01, 2.288e-02, -1.393e-01, -1.836e-02, 4.530e-03, -3.674e-02, -1.238e-02, -9.447e-02, -1.571e-01, -2.658e-03, -1.765e-01, -1.481e-02, -3.420e-02));
	r1 += mul(s0_2_0, M4(1.965e-01, 9.969e-03, -3.077e-02, 2.184e-01, -9.686e-03, -3.126e-02, -4.961e-03, -9.055e-02, -1.122e-01, -1.511e-02, -4.089e-02, 5.986e-02, -6.522e-02, -1.578e-02, 6.005e-03, -2.315e-02));
	r0 += mul(s0_2_1, M4(-7.233e-02, 9.906e-01, 3.559e-02, 3.703e-01, -3.369e-02, 4.121e-02, 2.749e-02, -1.306e-01, -3.893e-02, -4.044e-01, 4.436e-02, 1.587e-01, 7.360e-02, -4.785e-02, -1.704e-01, -2.517e-02));
	r1 += mul(s0_2_1, M4(1.372e-01, 6.361e-01, 1.496e-02, 6.521e-01, -8.524e-02, 1.887e-03, -3.408e-02, -1.290e-01, -1.588e-01, -1.657e-01, -3.369e-02, 4.210e-02, -8.106e-02, 4.676e-02, 4.437e-02, -2.783e-01));
	r0 += mul(s0_2_2, M4(2.094e-02, -1.480e+00, -2.081e-02, 9.573e-03, 6.145e-02, -2.907e-01, 7.563e-02, 3.362e-01, -7.352e-03, 3.502e-02, 7.012e-03, -4.989e-02, -3.455e-03, -7.540e-03, -2.316e-02, -2.072e-01));
	r1 += mul(s0_2_2, M4(3.031e-04, 5.585e-02, -1.388e-02, -6.475e-03, -2.006e-01, 4.937e-02, 1.935e-02, -5.626e-02, 4.293e-02, 7.594e-02, -1.135e-02, 4.212e-02, -5.491e-02, -2.822e-01, -3.825e-02, 2.212e-01));
	r0 += mul(s1_0_0, M4(1.247e-01, 3.279e-02, 8.223e-02, -5.062e-02, 2.964e-03, 1.029e-02, 2.313e-02, 3.452e-02, -1.657e-01, 3.541e-02, -1.047e-01, 6.426e-03, -1.674e-01, 1.438e-01, 4.652e-02, 4.808e-02));
	r1 += mul(s1_0_0, M4(3.586e-02, 3.577e-02, 1.654e-01, -3.624e-02, 6.715e-02, -2.960e-02, 2.344e-02, -4.239e-02, -1.702e-02, 1.647e-03, -8.519e-02, 2.154e-03, -1.613e-02, 1.014e-02, -1.046e-01, 5.309e-02));
	r0 += mul(s1_0_1, M4(7.256e-01, -6.320e-02, -3.071e-02, 8.429e-02, -3.290e-01, 6.920e-02, 6.755e-03, -5.480e-02, -5.294e-01, -1.121e-01, -9.202e-03, -1.107e-01, -1.016e+00, -8.763e-02, -9.103e-03, -1.059e-02));
	r1 += mul(s1_0_1, M4(2.961e-01, -1.170e-02, 1.427e-01, -5.916e-02, 2.461e-01, 4.258e-02, -2.829e-01, -1.273e-01, -2.133e-01, -1.033e-01, -3.117e-01, 1.676e-02, -8.283e-01, 6.616e-02, 1.188e-01, -1.987e-03));
	r0 += mul(s1_0_2, M4(-1.222e-03, 1.471e-02, -1.994e-02, 1.083e-02, 9.815e-03, -2.977e-02, -2.414e-04, 4.554e-02, -7.007e-02, 1.815e-02, -6.532e-03, -5.912e-02, -4.691e-04, 4.383e-02, -2.070e-02, -9.893e-02));
	r1 += mul(s1_0_2, M4(7.700e-02, 3.081e-04, 7.162e-02, 2.250e-02, 2.075e-01, 5.255e-02, -2.077e-01, -5.805e-02, -8.586e-02, -4.383e-02, -1.956e-02, -1.862e-02, -3.976e-02, -7.925e-02, -2.791e-02, -9.736e-03));
	r0 += mul(s1_1_0, M4(-1.596e-01, -1.041e-01, -5.175e-02, 5.184e-01, 1.047e-02, 6.584e-02, -2.627e-01, 1.582e-01, 5.290e-02, -1.274e-01, -4.682e-01, -9.440e-02, 1.333e-01, 1.325e-02, -1.870e-01, -3.030e-01));
	r1 += mul(s1_1_0, M4(-3.432e-02, 9.800e-02, -5.660e-02, -3.215e-02, 1.107e-01, 7.122e-02, -3.034e-02, 7.722e-02, -1.628e-01, -2.277e-02, 1.182e-02, 1.628e-02, -1.822e-01, -6.175e-02, 1.593e-02, -9.201e-02));
	r0 += mul(s1_1_1, M4(-3.987e-01, 1.545e-01, -9.441e-02, -8.699e-01, -6.979e-03, -3.305e-01, -2.163e-01, -3.250e-01, 7.836e-02, -1.935e-01, 1.132e-02, -2.875e-01, -1.427e-01, -1.911e-01, 2.000e-02, 3.150e-01));
	r1 += mul(s1_1_1, M4(-2.055e-01, -2.030e-01, -2.196e-03, 1.720e-01, -7.028e-01, -5.572e-01, 2.745e-02, 1.552e-01, -3.701e-01, -3.381e-01, -4.966e-02, 2.841e-02, -2.322e-01, 1.089e-01, -2.025e-01, -9.856e-02));
	r0 += mul(s1_1_2, M4(-6.235e-02, -1.282e-01, -1.647e-03, 1.234e-01, -1.362e-02, -5.866e-02, -2.081e-02, -2.792e-01, 5.301e-02, 3.488e-02, 5.139e-02, -4.828e-02, 9.835e-02, 1.729e-01, 3.940e-02, -1.334e-01));
	r1 += mul(s1_1_2, M4(-1.039e-01, 5.309e-02, 8.674e-03, -1.061e-02, -2.444e-01, -2.166e-01, 1.802e-02, 1.337e-01, -1.987e-01, -2.135e-02, -6.963e-02, -5.327e-02, -1.415e-01, -2.220e-02, -4.482e-02, -1.062e-01));
	r0 += mul(s1_2_0, M4(6.441e-02, -8.212e-02, -3.259e-02, -2.892e-02, 1.552e-02, -2.281e-01, -1.945e-03, 8.640e-02, 4.264e-02, -2.588e-01, 4.493e-02, -6.665e-02, -3.413e-02, -6.800e-02, -2.093e-01, -1.308e-01));
	r1 += mul(s1_2_0, M4(2.357e-02, -5.162e-02, 5.528e-02, -6.658e-02, -9.082e-02, -1.283e-01, 4.307e-03, -1.105e-01, -1.170e-01, -2.556e-02, 2.046e-02, -3.531e-02, -1.725e-01, 5.588e-02, -3.822e-02, 1.442e-01));
	r0 += mul(s1_2_1, M4(1.023e-01, 1.060e-01, 6.030e-03, -8.887e-02, 1.237e-02, -5.869e-01, -3.399e-02, -4.793e-01, 4.030e-02, -5.563e-01, -3.575e-02, -1.274e-02, -6.891e-02, -1.521e+00, -7.106e-02, -1.930e-01));
	r1 += mul(s1_2_1, M4(2.224e-01, -7.987e-02, 2.876e-02, -4.091e-02, 2.397e-02, -1.568e-02, 8.355e-04, -2.397e-01, -1.510e-01, 7.787e-02, 7.544e-02, -5.102e-01, -5.528e-01, -3.431e-01, -5.489e-02, -2.674e-02));
	r0 += mul(s1_2_2, M4(5.405e-02, 2.223e-01, -4.397e-03, 6.325e-02, -2.769e-02, -1.917e-01, -1.250e-02, -4.550e-02, 2.633e-02, -1.203e-01, -8.723e-03, -5.482e-02, -9.066e-02, 4.397e-02, 1.154e-02, -8.231e-02));
	r1 += mul(s1_2_2, M4(1.268e-02, -5.139e-02, 5.351e-03, 1.633e-04, -5.671e-02, -1.747e-02, 1.617e-02, -2.124e-01, 1.249e-01, -1.087e-01, -3.270e-02, 6.945e-02, 1.323e-01, 8.459e-04, -9.082e-03, -1.137e-02));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(6.976e-04, 3.952e-04, -3.302e-04, -2.641e-04, 6.117e-02, -2.502e-02, 1.550e-02, -1.539e-02, -4.220e-04, -3.115e-04, 5.850e-06, 1.415e-04, -3.421e-02, 1.594e-02, -2.714e-02, 2.439e-03));
	r0 += mul(s0_0_1, M4(-5.304e-03, -7.991e-03, -3.915e-04, -3.457e-04, -3.057e-01, 3.721e-01, -2.150e-01, 2.381e-01, -2.348e-01, -2.036e-02, 5.746e-02, -1.205e-02, 4.521e-01, -4.893e-01, 9.627e-02, -1.739e-01));
	r0 += mul(s0_0_2, M4(-1.378e-05, 3.786e-04, 1.215e-05, 1.025e-04, 4.359e-02, -7.006e-02, 4.419e-02, -3.899e-02, -1.359e-02, 1.265e-01, -8.603e-04, -7.840e-03, -1.344e-02, 1.264e-01, -5.685e-03, 5.065e-02));
	r0 += mul(s0_1_0, M4(3.073e-02, 1.837e-02, -4.154e-02, 5.632e-03, -1.311e-03, -1.151e-03, 3.675e-02, -1.569e-02, -1.603e-03, 3.045e-04, 1.629e-03, -1.902e-03, 1.454e-02, -3.258e-03, 2.836e-02, -1.116e-03));
	r0 += mul(s0_1_1, M4(2.978e-02, -8.941e-03, -1.890e-02, -5.871e-02, -1.521e-02, -2.167e-02, -8.429e-02, 1.125e-01, -1.792e-01, 1.105e-02, -5.241e-01, 6.677e-03, -2.301e-02, 2.936e-02, 2.007e-01, -2.553e-01));
	r0 += mul(s0_1_2, M4(-1.038e-02, 2.596e-02, -7.066e-04, 2.511e-03, -2.379e-04, -6.315e-03, 9.109e-03, -4.598e-02, 3.772e-02, 2.095e-01, 2.448e-02, 3.857e-01, -5.845e-03, 3.914e-03, 1.493e-03, 5.543e-02));
	r0 += mul(s0_2_0, M4(-9.741e-02, 4.383e-02, 2.666e-01, -2.517e-02, 3.907e-03, 2.794e-04, -5.735e-03, 1.039e-03, 5.773e-04, 8.728e-06, -1.897e-03, 1.234e-03, 3.424e-03, -7.595e-04, -4.721e-03, 9.470e-04));
	r0 += mul(s0_2_1, M4(-2.642e-01, -4.170e-01, 2.144e-01, 5.801e-01, -6.414e-03, 1.996e-03, -1.522e-02, 2.052e-03, -2.690e-02, -7.482e-03, 5.093e-02, -8.386e-03, 3.431e-03, -1.078e-02, 6.656e-03, -6.425e-03));
	r0 += mul(s0_2_2, M4(-9.684e-03, -4.377e-02, 9.796e-04, -4.727e-03, -3.723e-04, -2.953e-03, 1.902e-03, -1.107e-02, -6.226e-03, 2.403e-02, -1.142e-02, -2.192e-04, 1.334e-04, 8.127e-04, -2.454e-03, -9.271e-04));
	r0 += mul(s1_0_0, M4(-5.084e-03, -1.779e-02, 6.792e-03, -7.153e-03, 2.466e-01, 2.483e-02, -3.251e-02, 1.808e-02, -2.220e-03, -5.802e-04, 2.539e-04, 5.333e-04, 4.113e-02, -1.085e-02, 1.667e-01, -2.818e-02));
	r0 += mul(s1_0_1, M4(-8.212e-02, 4.238e-02, 1.396e-02, 5.991e-02, -5.838e-01, 1.750e-02, -6.970e-02, 7.834e-02, 7.512e-03, 6.730e-03, 1.121e-03, 5.019e-05, 2.689e-01, 2.290e-01, -7.170e-01, -7.125e-02));
	r0 += mul(s1_0_2, M4(1.070e-02, -4.615e-02, -4.815e-03, -6.369e-03, 1.034e-02, -1.362e-01, 1.342e-03, -3.381e-02, 3.460e-04, -1.380e-03, -2.663e-05, 5.481e-05, -1.211e-02, 5.310e-02, 1.895e-02, -2.311e-01));
	r0 += mul(s1_1_0, M4(6.273e-02, 8.681e-03, -1.982e-01, 3.327e-02, 1.069e-01, -6.602e-03, 4.092e-01, -1.112e-03, -4.018e-03, -2.289e-02, 5.040e-02, -1.141e-02, 9.365e-04, -1.141e-03, -1.137e-02, 5.268e-03));
	r0 += mul(s1_1_1, M4(2.037e-01, 2.050e-01, -7.373e-02, -4.658e-01, 8.449e-03, -1.278e-01, 9.547e-02, 6.749e-02, 3.232e-01, 2.830e-01, 1.186e-03, 6.055e-02, -1.517e-03, -2.647e-03, 1.809e-02, -9.857e-03));
	r0 += mul(s1_1_2, M4(-4.604e-03, 2.067e-02, -1.491e-02, 4.919e-02, 1.389e-02, -2.397e-02, 4.166e-03, 5.251e-02, -1.192e-02, 4.994e-02, 1.845e-03, -4.894e-03, 5.815e-04, 3.804e-03, -6.699e-03, 4.560e-03));
	r0 += mul(s1_2_0, M4(-1.054e-02, -2.169e-03, 6.664e-02, 3.304e-02, 1.591e-02, 4.533e-03, -2.277e-02, 4.533e-03, 1.657e-02, 2.217e-02, -1.792e-01, 4.632e-02, 8.480e-05, 1.751e-04, -1.842e-03, -1.645e-04));
	r0 += mul(s1_2_1, M4(-4.021e-03, -7.149e-03, 4.770e-02, 9.389e-02, 3.366e-03, -8.755e-03, -8.155e-03, -4.905e-04, -2.862e-01, -2.549e-01, 2.203e-01, -2.764e-01, -6.943e-04, -2.407e-04, 2.469e-03, -1.217e-03));
	r0 += mul(s1_2_2, M4(4.875e-04, -6.483e-03, -3.574e-04, 1.393e-02, 4.311e-05, -6.618e-04, 4.041e-03, 3.566e-04, 2.729e-03, -5.524e-03, -2.905e-02, 8.347e-02, 3.359e-04, 6.181e-05, -6.288e-04, 1.380e-03));
	r0 += V4(2.965e-08, -7.300e-12, 3.670e-10, -5.039e-10);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
