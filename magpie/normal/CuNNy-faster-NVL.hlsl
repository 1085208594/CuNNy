// CuNNy faster NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000168

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in (1x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(1.570e-01, 1.287e-02, 3.672e-02, 3.544e-01) * s0_0_0;
	r1 += V4(9.901e-02, -2.411e-04, 2.448e-02, 1.472e-02) * s0_0_0;
	r0 += V4(3.182e-01, 5.258e-01, -4.691e-03, 4.700e-01) * s0_0_1;
	r1 += V4(1.733e-01, -1.358e-03, 7.016e-02, 8.813e-01) * s0_0_1;
	r0 += V4(3.542e-02, -1.841e-01, 1.392e-02, 3.503e-01) * s0_0_2;
	r1 += V4(-1.764e-02, 1.021e-03, 5.099e-01, 1.028e-02) * s0_0_2;
	r0 += V4(-1.106e-01, -7.996e-03, 2.174e-02, -3.467e-01) * s0_1_0;
	r1 += V4(3.815e-01, -5.114e-04, 2.878e-02, -1.026e-02) * s0_1_0;
	r0 += V4(-8.453e-01, -1.954e-01, -3.154e-01, -3.936e-01) * s0_1_1;
	r1 += V4(-4.521e-01, -8.730e-01, -2.290e-01, -8.809e-01) * s0_1_1;
	r0 += V4(2.771e-01, 3.815e-02, 5.540e-03, -3.715e-01) * s0_1_2;
	r1 += V4(4.302e-02, 8.692e-01, 1.342e-01, -1.067e-02) * s0_1_2;
	r0 += V4(4.182e-02, 1.530e-03, -6.157e-02, -4.909e-03) * s0_2_0;
	r1 += V4(6.772e-02, -2.278e-03, 1.081e-02, -6.061e-04) * s0_2_0;
	r0 += V4(-2.057e-01, 9.846e-03, 4.813e-01, -9.593e-02) * s0_2_1;
	r1 += V4(4.463e-01, 4.627e-03, 4.656e-02, -8.512e-03) * s0_2_1;
	r0 += V4(1.717e-01, 1.832e-03, 5.528e-02, 3.349e-02) * s0_2_2;
	r1 += V4(3.715e-02, -1.932e-04, 6.153e-02, 8.618e-04) * s0_2_2;
	r0 += V4(-5.987e-04, 1.455e-02, 7.146e-03, 1.947e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(9.042e-03, -9.691e-04, 1.309e-03, 2.988e-05);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-8.034e-02, 6.968e-02, -5.109e-02, -9.570e-03, -3.384e-02, -1.228e-01, -1.500e-01, 9.890e-02, 1.527e-01, -1.108e-01, -2.163e-01, 1.631e-01, 1.876e-02, -7.380e-02, -5.859e-02, 3.821e-02));
	r1 += mul(s0_0_0, M4(6.497e-03, -1.574e-02, -1.916e-01, 3.283e-01, -1.157e-01, -2.435e-02, 5.869e-02, 3.232e-01, -1.242e-01, 5.243e-02, 3.323e-01, -6.998e-02, 4.943e-02, 2.971e-02, 1.006e-01, -1.352e-01));
	r0 += mul(s0_0_1, M4(1.220e-02, -7.102e-02, -1.366e-01, 5.510e-02, -6.646e-02, 8.304e-02, -3.674e-02, 4.542e-01, -3.724e-01, 3.901e-01, -3.838e-01, 5.841e-01, -7.138e-02, -8.178e-02, -1.140e-01, 1.352e-01));
	r1 += mul(s0_0_1, M4(-1.489e-01, -4.187e-02, 2.515e-01, 6.308e-01, -1.753e-01, -6.151e-02, -1.642e-01, 9.547e-02, -2.103e-01, 2.174e-01, 3.244e-02, -8.105e-01, -2.074e-01, 5.361e-02, -3.564e-01, 1.585e-02));
	r0 += mul(s0_0_2, M4(1.272e-02, -6.970e-02, 2.742e-01, -2.080e-02, -1.887e-02, 1.568e-01, 8.198e-02, 2.216e-01, -5.264e-03, 5.464e-02, 2.959e-01, 2.190e-02, -1.148e-03, 6.063e-02, 5.053e-02, 4.427e-02));
	r1 += mul(s0_0_2, M4(-1.738e-01, -1.063e-01, -9.335e-02, 5.317e-01, -1.456e-02, 3.234e-02, 2.315e-01, 8.058e-02, -1.406e-01, -1.052e-01, -4.302e-01, 1.921e-01, 5.026e-02, -2.746e-02, -4.897e-02, -1.844e-02));
	r0 += mul(s0_1_0, M4(-3.656e-02, -1.226e-01, -4.006e-02, 1.763e-01, -1.259e-01, -4.605e-01, -2.274e-01, 1.805e-01, -3.684e-02, 3.355e-02, -3.412e-01, -4.491e-03, -6.242e-02, -3.391e-01, -3.916e-01, -8.057e-02));
	r1 += mul(s0_1_0, M4(2.138e-01, 7.514e-03, -1.833e-01, 3.681e-01, -4.341e-02, -1.520e-01, 1.350e-01, 5.488e-01, 2.692e-01, 6.837e-02, -3.335e-01, -2.176e-02, -1.876e-01, 1.118e-02, 2.634e-01, -6.689e-02));
	r0 += mul(s0_1_1, M4(-2.588e-01, -3.532e-01, -1.519e-01, -5.413e-01, -4.579e-02, -4.244e-01, 1.356e-01, -2.748e-02, 3.126e-01, -5.158e-01, -7.392e-01, -6.202e-01, 6.637e-02, 5.412e-02, -1.944e-01, 7.413e-01));
	r1 += mul(s0_1_1, M4(4.313e-02, -2.173e-01, -3.008e-02, -4.088e-01, -2.120e-01, -1.368e-01, -3.913e-01, 5.327e-03, -3.318e-01, -1.008e-01, -8.428e-02, 8.487e-01, 7.425e-02, 7.143e-02, 5.130e-02, 1.852e-01));
	r0 += mul(s0_1_2, M4(-2.288e-01, -8.321e-02, 4.965e-01, -4.821e-02, -4.983e-02, 1.292e-01, 1.160e-01, -2.108e-02, -3.502e-02, 2.197e-02, 7.053e-01, -6.835e-02, 1.499e-02, 6.708e-02, 2.958e-01, -2.351e-02));
	r1 += mul(s0_1_2, M4(-1.076e-01, -1.436e-01, -5.293e-01, 7.787e-04, -1.795e-01, 6.097e-02, 2.963e-01, -4.828e-01, -2.995e-02, -2.329e-01, -2.494e-01, -2.060e-01, -6.943e-02, 5.203e-02, 1.999e-02, -7.737e-02));
	r0 += mul(s0_2_0, M4(-5.595e-02, -1.835e-02, 5.507e-03, -1.324e-02, 8.115e-02, -3.696e-01, 1.653e-01, -8.871e-01, -4.223e-02, 4.978e-02, -2.469e-02, 7.246e-02, -2.136e-02, -2.590e-01, -4.051e-01, -1.521e-01));
	r1 += mul(s0_2_0, M4(2.321e-02, 1.996e-02, -2.899e-01, -8.480e-02, -2.500e-01, 6.372e-02, -2.308e-01, -6.779e-01, 1.338e-02, 5.692e-03, -2.859e-01, 1.440e-01, -5.718e-02, 6.251e-02, -4.374e-02, 1.230e-03));
	r0 += mul(s0_2_1, M4(5.316e-02, 1.909e-01, 1.451e-01, 1.858e-02, -3.876e-01, 3.601e-01, -4.470e-01, -8.752e-02, -3.144e-03, 9.284e-02, -1.362e-02, 8.201e-02, -1.731e-01, 1.524e-01, -1.479e-01, -2.105e-01));
	r1 += mul(s0_2_1, M4(2.772e-01, 7.547e-02, -8.158e-02, -3.911e-01, 9.473e-01, 8.336e-02, 9.797e-01, -2.201e-03, 5.789e-02, 2.251e-01, 4.757e-01, 3.050e-02, 2.446e-01, -1.018e-01, 8.479e-01, -5.098e-01));
	r0 += mul(s0_2_2, M4(3.373e-02, 3.734e-02, -5.442e-02, 5.399e-02, -5.982e-02, 2.247e-01, 3.740e-01, -8.074e-02, 1.559e-01, -1.327e-01, 1.431e-01, 3.911e-02, -7.440e-02, 1.209e-01, 2.171e-01, -1.124e-01));
	r1 += mul(s0_2_2, M4(1.173e-01, 8.903e-02, 5.102e-02, -4.253e-02, -1.215e-02, -1.286e-01, -4.453e-01, -8.809e-03, -2.621e-02, 5.372e-02, 1.359e-01, 1.174e-01, -5.824e-02, -4.676e-02, -9.937e-02, -8.433e-02));
	r0 += mul(s1_0_0, M4(1.228e-01, 1.293e-01, 3.018e-01, -4.262e-02, 1.852e-01, 2.996e-01, 2.957e-01, -8.767e-02, -8.605e-02, -5.383e-02, -6.109e-02, -1.360e-01, 4.351e-02, 4.462e-02, 1.013e-01, -1.853e-01));
	r1 += mul(s1_0_0, M4(9.890e-02, -2.627e-02, -9.539e-02, -1.236e-02, 3.577e-01, 1.410e-01, 9.988e-02, -2.734e-01, -9.734e-02, -2.276e-02, 8.176e-02, 2.418e-01, 1.264e-01, -4.991e-02, 1.162e-01, -2.283e-01));
	r0 += mul(s1_0_1, M4(1.425e-01, 8.744e-02, 2.151e-01, -3.546e-01, 8.577e-02, 3.988e-04, -1.647e-01, -1.267e-01, -3.543e-02, -1.251e-01, 5.753e-02, 2.639e-02, 6.223e-02, 2.352e-02, 9.098e-02, -1.022e-01));
	r1 += mul(s1_0_1, M4(3.410e-01, 1.442e-01, -2.064e-01, -9.063e-01, 3.017e-01, 1.489e-01, 2.072e-01, -3.076e-01, -1.665e-01, -1.116e-01, -2.198e-01, 1.128e-01, 1.365e-01, 2.733e-02, 2.584e-01, -2.363e-01));
	r0 += mul(s1_0_2, M4(1.284e-01, 3.801e-02, -2.945e-01, -1.704e-01, -7.739e-03, -5.605e-02, -1.946e-01, -4.005e-02, 2.097e-02, 3.513e-03, -2.758e-02, 3.783e-02, 1.836e-02, -2.048e-02, -6.385e-02, -1.718e-01));
	r1 += mul(s1_0_2, M4(4.666e-01, 1.541e-01, 3.521e-01, -1.143e-01, 6.494e-02, 2.081e-02, -2.957e-02, -4.611e-02, -5.552e-03, 3.136e-02, 7.522e-02, -1.222e-02, 1.522e-01, 3.894e-02, -6.406e-03, -2.939e-01));
	r0 += mul(s1_1_0, M4(-4.658e-02, -9.074e-03, -6.011e-02, 1.068e-01, 3.122e-01, 8.604e-01, 5.255e-01, -7.988e-01, -5.605e-01, -5.412e-02, -7.903e-01, 3.623e-01, 1.919e-01, 8.180e-01, 5.215e-01, -3.585e-01));
	r1 += mul(s1_1_0, M4(-1.386e-01, 7.861e-02, 5.271e-01, 6.140e-02, -1.115e+00, 2.128e-01, -1.012e+00, -1.704e-01, 2.171e-01, 6.261e-02, 8.976e-03, 3.268e-01, 2.260e-01, 9.263e-02, -2.423e-01, -3.111e-01));
	r0 += mul(s1_1_1, M4(7.746e-01, 2.443e-01, 1.071e+00, -3.549e-01, 4.000e-01, -6.347e-01, -3.935e-01, -1.316e+00, 1.892e-02, -1.509e-01, 5.374e-01, -7.406e-02, 3.545e-01, 1.419e-01, 1.344e-01, -2.180e+00));
	r1 += mul(s1_1_1, M4(-1.176e+00, -2.940e-01, -5.103e-01, 5.098e-01, -8.652e-01, 2.492e-01, -3.036e-01, 1.620e-01, -1.570e-01, -2.842e-01, -3.203e-01, 6.690e-01, -1.068e+00, 1.031e-01, 2.504e-01, -5.346e-01));
	r0 += mul(s1_1_2, M4(9.769e-02, -5.009e-02, -7.363e-01, 1.158e-01, 4.700e-02, 7.056e-02, -2.004e-01, 3.377e-02, -4.122e-02, 7.403e-02, 4.988e-02, 3.096e-02, 2.199e-01, -1.712e-01, -4.655e-01, -4.032e-01));
	r1 += mul(s1_1_2, M4(3.458e-02, 2.820e-01, 4.548e-01, 2.397e-01, 9.256e-02, 8.179e-02, 2.957e-01, -4.468e-02, -5.403e-02, -2.202e-03, 1.180e-01, -9.549e-02, 2.283e-01, 8.772e-02, 4.288e-02, -1.232e-01));
	r0 += mul(s1_2_0, M4(4.748e-02, -8.578e-02, -7.109e-02, -1.512e-01, 1.441e-01, 4.667e-02, 1.704e-01, 8.537e-02, -4.024e-01, -4.912e-02, -5.516e-01, 5.314e-01, 1.381e-01, 4.253e-01, 4.974e-01, 5.365e-01));
	r1 += mul(s1_2_0, M4(-1.214e-01, -2.949e-02, 6.903e-04, -2.884e-02, -1.587e-01, 1.478e-01, -3.922e-01, 2.537e-01, 1.036e+00, 1.533e-01, 1.770e-01, -4.297e-01, -1.927e-01, -5.740e-02, 4.137e-02, 6.491e-01));
	r0 += mul(s1_2_1, M4(1.935e-01, 4.542e-02, 2.513e-01, 3.245e-02, -5.730e-02, -8.288e-02, -3.017e-01, -2.236e-03, -2.783e-01, -7.301e-02, 2.921e-01, 3.545e-01, 7.677e-01, -1.333e-01, 2.026e-01, 7.188e-01));
	r1 += mul(s1_2_1, M4(-1.335e-01, -5.044e-02, -9.498e-02, 1.072e-01, -1.178e-01, 4.066e-02, -7.149e-01, 2.713e-01, 2.731e-01, 1.443e-02, -2.883e-01, -7.047e-01, -1.199e+00, 6.543e-01, -1.730e+00, 6.969e-01));
	r0 += mul(s1_2_2, M4(-1.228e-01, 5.434e-02, -2.173e-01, -1.689e-01, 6.532e-02, -3.998e-02, -1.314e-01, -2.073e-03, -4.697e-02, 6.466e-02, 1.430e-01, -1.565e-02, 3.761e-01, -2.686e-01, -3.252e-01, 2.861e-01));
	r1 += mul(s1_2_2, M4(-6.805e-02, -6.274e-02, 8.302e-02, 4.182e-03, -2.506e-04, -2.520e-03, 7.793e-02, -8.621e-02, -1.715e-02, -4.270e-02, -2.388e-01, 8.015e-03, 1.263e-02, 1.944e-01, 6.919e-01, 5.097e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-6.264e-02, 3.785e-02, -4.543e-01, -1.173e-01, -8.800e-03, 1.384e-02, -2.979e-01, -8.375e-02, 3.724e-02, -3.659e-02, 5.059e-01, 6.381e-02, 2.052e-02, 1.021e-02, -4.205e-01, 4.069e-02));
	r1 += mul(s0_0_0, M4(-3.533e-02, 2.926e-02, 2.582e-02, -4.608e-02, -1.700e-01, 9.937e-02, 2.411e-04, 6.688e-02, 2.582e-02, -3.895e-02, -3.367e-02, -2.811e-03, -4.359e-02, 3.078e-02, 1.643e-02, 9.931e-02));
	r0 += mul(s0_0_1, M4(-4.511e-03, -1.064e-01, -4.638e-02, 1.326e-01, 2.691e-02, 4.974e-02, 4.537e-01, 7.955e-02, -3.056e-02, 8.520e-02, -9.118e-01, -2.026e-01, 6.981e-01, 1.538e-01, 1.136e-01, 5.723e-01));
	r1 += mul(s0_0_1, M4(-9.187e-02, 1.519e-01, -4.595e-02, 4.955e-02, 7.269e-03, -6.716e-02, 5.818e-02, -3.472e-03, 2.073e-02, -6.464e-04, 2.041e-02, -3.671e-02, -2.502e-01, 1.073e+00, -3.855e-02, -1.520e-01));
	r0 += mul(s0_0_2, M4(-1.556e-02, -5.415e-03, 1.100e-01, 2.963e-02, -1.938e-02, 4.026e-02, -2.082e-02, -2.712e-02, 1.689e-02, -9.205e-02, 1.126e-01, -4.196e-02, -1.961e-03, 2.559e-02, -5.332e-03, 2.593e-02));
	r1 += mul(s0_0_2, M4(1.747e-02, -7.292e-03, -8.648e-02, 2.829e-02, 1.508e-02, 3.237e-03, -3.758e-02, -1.813e-02, 2.335e-01, -5.828e-05, -8.648e-03, -2.298e-02, 1.568e-01, -2.453e-02, -6.031e-02, -2.562e-02));
	r0 += mul(s0_1_0, M4(1.421e-01, -1.421e-01, -5.683e-01, 2.018e-01, 1.897e-02, -1.057e-01, -2.507e-01, -5.440e-03, -5.964e-02, 1.085e-01, 5.098e-01, -9.894e-02, 3.920e-02, -2.391e-03, -6.572e-02, -1.129e-01));
	r1 += mul(s0_1_0, M4(-3.310e-01, -2.251e-01, -1.515e-01, -2.056e-01, -1.621e-01, -1.471e-01, -5.936e-02, -1.501e-01, 2.876e-01, 1.641e-01, 1.264e-01, -5.515e-02, 7.709e-02, -5.261e-02, -1.138e-02, -8.461e-02));
	r0 += mul(s0_1_1, M4(2.300e-01, 5.059e-01, 4.009e-01, 1.892e-01, -9.753e-02, -1.868e-01, 3.646e-01, -2.588e-01, 3.311e-02, -3.664e-01, -4.631e-02, 1.069e-01, -1.656e-02, -3.219e-01, -3.796e-02, -3.743e-01));
	r1 += mul(s0_1_1, M4(3.076e-01, 1.210e-01, 3.181e-01, 3.216e-01, 4.268e-01, 4.974e-01, -9.734e-02, 1.858e-01, -6.758e-01, -2.851e-01, -1.744e-01, 3.406e-01, -1.960e-01, -3.640e-01, 1.423e-02, -1.919e-01));
	r0 += mul(s0_1_2, M4(-1.134e-02, 2.183e-01, 1.442e-02, 4.038e-02, 1.860e-01, -7.527e-03, -9.345e-02, 1.018e-01, -9.690e-02, 1.650e-01, 4.270e-02, -2.419e-01, 7.773e-03, -1.175e-01, 7.592e-02, -1.445e-02));
	r1 += mul(s0_1_2, M4(-2.065e-01, 4.552e-02, 2.266e-01, 4.470e-02, 4.229e-01, -3.724e-02, 1.352e-01, 5.697e-02, 6.035e-01, -7.817e-04, -1.230e-02, -2.134e-01, -3.233e-01, 4.965e-02, 7.014e-02, 2.808e-02));
	r0 += mul(s0_2_0, M4(-2.919e-02, -1.015e-01, 8.231e-02, -4.437e-02, -1.248e-02, -5.653e-02, 8.733e-03, 9.435e-02, -1.853e-03, 1.096e-01, -3.290e-02, -2.774e-02, -1.008e-02, 2.324e-02, -3.456e-02, -1.246e-02));
	r1 += mul(s0_2_0, M4(2.067e-02, 5.872e-02, -9.878e-02, -4.765e-02, -9.313e-02, -2.355e-02, -1.122e-01, -7.705e-02, 1.873e-02, -3.006e-03, 1.135e-01, -9.536e-02, 5.673e-02, 2.235e-02, -9.652e-03, 3.170e-02));
	r0 += mul(s0_2_1, M4(-9.322e-04, 1.275e-01, 2.154e-01, -6.408e-02, 7.447e-02, -4.697e-02, -5.519e-02, 2.783e-01, 1.116e-02, -1.382e-01, 1.621e-02, -1.929e-01, -3.704e-02, 2.281e-01, 6.786e-02, -3.395e-01));
	r1 += mul(s0_2_1, M4(1.792e-01, 4.611e-02, 2.815e-01, 1.091e-01, -9.314e-02, -6.962e-02, -2.410e-01, -2.112e-02, 5.158e-02, 4.179e-02, -2.821e-01, 1.203e-01, -1.252e-02, 6.632e-02, 1.863e-01, 9.902e-03));
	r0 += mul(s0_2_2, M4(-2.543e-03, 5.635e-02, 4.057e-02, -1.304e-01, 9.907e-02, 1.606e-01, 5.237e-02, -4.914e-02, -5.965e-02, 5.663e-02, -1.009e-02, 2.748e-02, -7.611e-03, 1.453e-01, 9.433e-06, 4.286e-02));
	r1 += mul(s0_2_2, M4(2.167e-03, 1.540e-03, 1.558e-01, -2.529e-03, 8.649e-02, 2.259e-02, 1.132e-01, -5.513e-03, 3.733e-02, 4.437e-03, 1.898e-01, 5.088e-03, -5.372e-02, -1.707e-03, -1.640e-02, -5.026e-03));
	r0 += mul(s1_0_0, M4(-2.952e-02, 7.460e-03, -1.769e+00, -1.307e-02, 4.405e-02, -1.986e-02, 8.485e-01, 1.204e-01, 5.157e-03, -3.529e-02, -1.110e+01, -2.372e-01, -4.142e-02, 2.513e-02, 2.952e-01, 4.513e-02));
	r1 += mul(s1_0_0, M4(1.660e-01, -3.566e-02, -2.289e-03, 8.539e-03, 1.938e-01, -1.934e-01, 9.211e-03, -7.460e-02, 1.868e-02, 1.023e-02, -3.142e-02, -5.498e-02, -3.186e-02, 3.015e-02, 1.561e-02, 2.962e-02));
	r0 += mul(s1_0_1, M4(-1.008e-01, -6.068e-02, -3.665e-02, -1.692e-01, 1.427e-01, -3.277e-02, -5.857e-01, 3.232e-01, -9.618e-03, 6.157e-02, -2.195e-01, -1.399e-01, -5.212e-02, -1.053e-01, -1.943e-01, 3.511e-01));
	r1 += mul(s1_0_1, M4(-1.256e-01, -4.257e-02, -3.381e-02, -2.370e-02, -1.654e-01, 6.241e-02, -4.365e-02, -1.989e-02, -2.278e-01, -5.670e-02, 8.447e-02, -3.362e-02, -2.425e-03, 4.704e-02, -8.054e-02, 9.250e-02));
	r0 += mul(s1_0_2, M4(6.991e-03, 5.236e-02, 3.250e-02, -1.380e-02, -7.734e-03, -1.313e-01, -1.088e-03, -1.041e-01, -5.169e-03, -3.574e-02, -1.574e-02, -1.794e-03, -2.104e-02, 9.810e-05, 2.765e-02, 5.712e-02));
	r1 += mul(s1_0_2, M4(-5.613e-02, 7.757e-04, 6.475e-02, -1.116e-02, 3.471e-02, -5.082e-02, -4.476e-02, -5.332e-02, -1.049e-02, 2.793e-03, -3.804e-02, -8.626e-03, -2.358e-01, -7.883e-03, 1.464e-02, -4.251e-02));
	r0 += mul(s1_1_0, M4(-1.537e-01, 7.524e-02, -9.902e-01, 2.541e-02, -4.490e-02, 1.499e-01, 1.518e-01, -2.536e-01, -4.185e-02, -3.060e-02, -2.248e-01, 1.685e-01, 1.345e-02, 4.348e-02, -9.716e-02, 5.747e-02));
	r1 += mul(s1_1_0, M4(4.248e-01, 6.485e-02, 6.799e-02, -2.840e-01, 4.204e-01, 2.960e-01, 6.157e-02, 2.588e-01, 2.718e-02, -4.671e-02, -5.093e-02, -7.376e-03, -9.301e-02, 2.447e-02, 5.070e-02, -2.019e-02));
	r0 += mul(s1_1_1, M4(-5.888e-02, -4.149e-01, 3.759e-01, -5.293e-01, -1.109e-01, 2.322e-01, -2.635e-01, -1.091e+00, -2.501e-02, -4.737e-01, -4.292e-02, 8.984e-02, 9.184e-02, 2.112e-01, -2.016e-01, -8.660e-01));
	r1 += mul(s1_1_1, M4(-8.064e-01, -3.079e-01, -3.780e-01, -4.712e-01, -8.616e-01, 1.460e-01, 2.881e-01, -2.171e-01, -1.864e-01, -4.654e-02, -4.404e-01, 3.844e-02, 5.904e-02, 1.972e-02, 2.505e-01, -9.109e-02));
	r0 += mul(s1_1_2, M4(-6.745e-02, 8.143e-02, 8.031e-02, 3.526e-02, 2.323e-02, -6.427e-02, -1.361e-01, -3.200e-02, 1.313e-02, -5.956e-03, -2.985e-03, -5.370e-02, 2.021e-03, 8.863e-02, 1.342e-02, 5.906e-02));
	r1 += mul(s1_1_2, M4(-4.104e-01, 4.320e-02, 1.530e-01, -1.026e-02, 3.472e-01, -6.470e-02, -1.983e-01, -1.073e-01, 5.158e-03, 1.215e-02, 2.688e-02, 1.541e-02, -7.278e-02, 1.217e-02, 1.388e-01, 1.587e-02));
	r0 += mul(s1_2_0, M4(-4.262e-02, 9.654e-02, 3.188e-02, 1.955e-01, 2.916e-02, 3.400e-02, -1.534e-02, -6.764e-02, 1.296e-02, -1.653e-02, 7.099e-02, -7.566e-02, 2.247e-02, 3.361e-03, -5.065e-02, -3.962e-03));
	r1 += mul(s1_2_0, M4(1.138e-01, 2.399e-02, 7.299e-02, 6.737e-02, 5.785e-02, 9.074e-04, 1.304e-01, -5.842e-04, -2.909e-02, 3.301e-02, 5.033e-03, 2.869e-03, -8.766e-02, -6.860e-02, 3.532e-02, 5.800e-03));
	r0 += mul(s1_2_1, M4(-4.438e-01, -3.018e-01, 3.031e-02, 8.062e-01, 2.846e-03, -3.195e-01, -1.646e-01, 4.583e-01, -4.464e-03, 1.410e-01, -5.818e-02, -3.708e-02, 1.404e-02, -1.037e-01, -1.431e-01, 1.344e-01));
	r1 += mul(s1_2_1, M4(-1.948e-01, 3.556e-02, -8.496e-01, -1.111e-01, -1.372e-01, -1.141e-01, -3.074e-01, -3.592e-02, -1.457e-02, 1.952e-02, 6.468e-02, -3.355e-02, -1.635e-02, -1.221e-02, -1.688e-01, -1.248e-01));
	r0 += mul(s1_2_2, M4(-1.331e-02, -1.897e-01, 7.197e-02, 1.715e-01, 3.656e-03, -3.037e-01, -2.408e-02, -5.367e-02, -6.149e-03, -3.864e-02, -1.587e-02, 2.728e-02, -6.101e-03, -7.004e-02, -7.096e-03, 1.337e-02));
	r1 += mul(s1_2_2, M4(2.959e-01, -4.156e-02, -8.715e-01, -4.807e-02, 6.496e-03, -1.667e-02, -2.627e-01, -1.502e-02, -6.476e-02, -2.807e-04, -7.098e-02, -6.824e-03, -3.673e-02, -2.316e-03, -1.033e-01, 9.602e-03));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle (8x4)
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-1.807e-02, -5.673e-03, 3.074e-02, -5.821e-03, 1.724e-01, 4.200e-02, -9.208e-02, -1.061e-02, -1.382e-03, -3.173e-03, -4.256e-03, -2.481e-03, 1.156e-02, 4.323e-03, -2.014e-02, 2.608e-03));
	r0 += mul(s0_0_1, M4(-1.929e-01, -1.042e-01, 3.936e-02, 6.220e-02, 1.026e-01, 3.253e-01, -6.777e-02, -8.081e-02, 2.237e-02, 3.622e-03, 9.854e-03, -4.410e-03, 8.880e-02, 5.918e-02, -4.138e-02, -2.968e-02));
	r0 += mul(s0_0_2, M4(1.353e-02, -6.860e-02, 1.076e-02, 7.296e-03, 1.181e-02, -3.982e-02, -2.568e-03, -3.214e-02, 8.324e-03, 6.854e-03, -7.958e-03, 1.605e-02, 3.701e-03, 3.121e-02, -5.463e-03, -1.550e-02));
	r0 += mul(s0_1_0, M4(2.636e-03, -3.684e-02, 5.372e-02, -1.267e-02, 7.446e-02, -1.962e-02, -3.640e-01, 9.013e-02, 6.207e-03, 3.940e-03, -2.792e-03, -3.217e-03, 2.265e-02, -1.200e-02, -1.112e-02, -1.384e-03));
	r0 += mul(s0_1_1, M4(-2.046e-01, 6.668e-02, -7.012e-01, -2.285e-01, 2.604e-02, 1.702e-01, 5.814e-02, -5.890e-01, 2.560e-02, -4.846e-02, 5.648e-03, 1.025e-02, -4.372e-01, -2.075e-01, 3.389e-01, 2.375e-01));
	r0 += mul(s0_1_2, M4(1.033e-02, -2.167e-01, 2.613e-02, -2.290e-01, 2.989e-02, -7.279e-03, -3.206e-02, 7.895e-02, -2.842e-01, 3.966e-01, 4.794e-03, -8.738e-03, 1.439e-02, -4.049e-02, -3.536e-02, 7.865e-03));
	r0 += mul(s0_2_0, M4(4.849e-03, 5.629e-03, 2.361e-02, -1.082e-02, 5.997e-03, 3.385e-03, 1.706e-02, -1.378e-02, -5.985e-03, -6.085e-03, -3.780e-03, 8.040e-03, 8.352e-03, 8.733e-03, -3.063e-02, 2.360e-03));
	r0 += mul(s0_2_1, M4(-2.314e-02, 6.951e-03, 1.594e-02, 5.991e-02, -1.218e-03, -9.332e-03, -1.994e-02, 3.215e-02, -3.626e-02, -3.589e-02, 4.955e-03, -5.256e-02, 3.527e-02, 1.253e-02, -4.795e-02, -1.455e-02));
	r0 += mul(s0_2_2, M4(9.400e-03, 3.246e-02, 5.023e-04, -2.813e-02, -9.914e-04, -1.674e-02, -4.873e-03, -2.478e-02, -1.389e-01, 7.281e-02, -3.665e-01, 5.371e-01, 6.494e-03, 5.588e-03, -1.115e-02, -2.118e-02));
	r0 += mul(s1_0_0, M4(-4.235e-02, -1.108e-02, -2.411e-02, -4.707e-04, -2.045e-02, -7.042e-03, 2.653e-03, 2.115e-03, -2.750e-01, 5.212e-02, 1.160e-01, -3.895e-03, 1.862e-02, 9.801e-03, -5.401e-03, 2.995e-03));
	r0 += mul(s1_0_1, M4(3.968e-02, 1.349e-02, -9.787e-03, 1.462e-02, 5.067e-02, -2.043e-02, 1.496e-02, -1.278e-02, 7.394e-02, -6.349e-01, 9.452e-02, 1.421e-01, -4.559e-02, 2.814e-02, 7.239e-03, 1.680e-02));
	r0 += mul(s1_0_2, M4(-2.661e-03, 1.310e-02, -5.199e-03, -5.889e-03, -2.177e-02, 2.084e-02, -4.427e-03, 1.031e-02, -1.580e-02, 5.383e-02, 8.256e-03, 2.037e-02, 4.182e-04, 7.043e-02, 6.624e-03, -4.531e-02));
	r0 += mul(s1_1_0, M4(7.221e-02, -1.181e-03, 4.459e-02, 1.524e-02, 5.840e-03, 1.268e-02, -1.159e-02, -2.345e-03, -3.472e-02, -2.331e-02, 2.343e-01, 2.655e-03, 2.021e-03, 3.956e-03, 1.302e-02, 7.658e-03));
	r0 += mul(s1_1_1, M4(1.724e-01, -5.098e-01, 2.547e-01, -3.393e-01, 4.853e-01, 1.685e-01, 2.388e-01, -1.705e-03, -3.484e-02, -3.713e-03, 6.469e-02, 2.411e-01, -1.952e-01, -1.294e-01, -2.114e-01, -5.212e-02));
	r0 += mul(s1_1_2, M4(-6.712e-03, 9.594e-02, -1.120e-02, 7.690e-02, -2.987e-02, 2.607e-01, -5.583e-03, 1.665e-01, -1.692e-02, -1.522e-02, 9.000e-03, -4.113e-02, 7.069e-03, 3.586e-01, 7.806e-03, 3.838e-01));
	r0 += mul(s1_2_0, M4(-2.665e-02, 5.537e-03, 4.359e-03, -8.736e-03, 9.497e-03, 6.960e-03, 1.269e-02, -9.603e-04, 1.846e-03, -3.243e-03, -2.430e-02, 3.816e-03, -1.234e-02, 3.208e-03, -2.675e-02, 4.152e-04));
	r0 += mul(s1_2_1, M4(9.367e-03, 3.548e-02, 4.899e-02, -1.135e-01, 8.429e-04, -3.759e-02, 1.499e-01, 8.570e-02, 1.394e-03, -1.251e-03, 6.474e-03, -1.907e-02, 4.974e-02, 3.026e-02, 7.202e-02, -2.864e-02));
	r0 += mul(s1_2_2, M4(-5.367e-03, 4.593e-03, -1.167e-03, 3.821e-02, -3.527e-03, -1.035e-04, 1.096e-02, 9.497e-02, 1.077e-03, 7.233e-03, 2.750e-03, 7.382e-03, -1.226e-03, -6.020e-02, -5.867e-03, 3.633e-02));
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
