// CuNNy veryfast NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000120

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in (1x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(-6.888e-02, -6.888e-02, -6.888e-02, -6.888e-02) * s0_0_0;
	r1 += V4(1.851e-01, -4.871e-03, -3.070e-02, 1.101e-02) * s0_0_0;
	r0 += V4(-1.549e-01, -1.549e-01, -1.549e-01, -1.549e-01) * s0_0_1;
	r1 += V4(7.661e-02, -6.060e-02, -9.364e-01, -1.294e-01) * s0_0_1;
	r0 += V4(-1.108e-01, -1.108e-01, -1.108e-01, -1.108e-01) * s0_0_2;
	r1 += V4(1.214e-01, 9.223e-01, 8.652e-01, 6.247e-01) * s0_0_2;
	r0 += V4(-1.392e-01, -1.392e-01, -1.392e-01, -1.392e-01) * s0_1_0;
	r1 += V4(3.154e-01, -6.001e-03, 2.772e-02, -1.979e-03) * s0_1_0;
	r0 += V4(-5.328e-02, -5.280e-02, -5.328e-02, -5.305e-02) * s0_1_1;
	r1 += V4(-5.801e-01, 7.592e-02, 1.241e-01, -1.242e-02) * s0_1_1;
	r0 += V4(-6.413e-02, -6.404e-02, -6.413e-02, -6.413e-02) * s0_1_2;
	r1 += V4(-1.627e-01, -9.043e-01, -5.475e-02, -1.605e-01) * s0_1_2;
	r0 += V4(-1.563e-01, -1.563e-01, -1.563e-01, -1.563e-01) * s0_2_0;
	r1 += V4(5.394e-02, 1.075e-02, -8.110e-03, 7.134e-03) * s0_2_0;
	r0 += V4(-7.254e-02, -7.254e-02, -7.254e-02, -7.254e-02) * s0_2_1;
	r1 += V4(1.842e-01, -1.932e-02, -5.528e-03, -3.423e-02) * s0_2_1;
	r0 += V4(-4.679e-02, -4.720e-02, -4.679e-02, -4.725e-02) * s0_2_2;
	r1 += V4(2.033e-02, -1.645e-02, 1.672e-02, 2.765e-02) * s0_2_2;
	r0 += V4(-6.993e-04, -2.343e-04, -6.993e-04, -3.475e-04);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(3.500e-03, 2.636e-04, 3.864e-04, 4.680e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(9.942e-02, 9.942e-02, 9.942e-02, 9.942e-02, 5.382e-02, 5.109e-02, 4.971e-02, 5.303e-02, 2.066e-01, 2.066e-01, 2.066e-01, 2.066e-01, -4.982e-03, -6.896e-03, -8.240e-03, -5.609e-03));
	r1 += mul(s0_0_0, M4(3.222e-02, 3.222e-02, 3.222e-02, 3.222e-02, -2.166e-01, -2.166e-01, -2.159e-01, -2.161e-01, -1.292e-02, -1.292e-02, -1.292e-02, -1.292e-02, -2.242e-01, -2.242e-01, -2.236e-01, -2.239e-01));
	r0 += mul(s0_0_1, M4(1.187e-01, 1.187e-01, 1.187e-01, 1.187e-01, 7.311e-02, 7.000e-02, 6.898e-02, 7.144e-02, -1.313e-01, -1.313e-01, -1.313e-01, -1.313e-01, 8.349e-02, 8.108e-02, 8.026e-02, 8.194e-02));
	r1 += mul(s0_0_1, M4(-1.635e-02, -1.635e-02, -1.635e-02, -1.635e-02, -2.273e-01, -2.271e-01, -2.268e-01, -2.269e-01, -3.197e-05, -3.197e-05, -3.197e-05, -3.197e-05, 1.562e-01, 1.563e-01, 1.564e-01, 1.565e-01));
	r0 += mul(s0_0_2, M4(9.596e-02, 9.596e-02, 9.596e-02, 9.596e-02, -1.092e-02, -1.260e-02, -1.328e-02, -1.199e-02, -1.288e-01, -1.288e-01, -1.288e-01, -1.288e-01, -2.879e-01, -2.891e-01, -2.895e-01, -2.890e-01));
	r1 += mul(s0_0_2, M4(5.212e-02, 5.212e-02, 5.212e-02, 5.212e-02, 6.973e-03, 7.001e-03, 7.464e-03, 7.172e-03, 9.334e-02, 9.334e-02, 9.334e-02, 9.334e-02, -8.878e-02, -8.867e-02, -8.852e-02, -8.854e-02));
	r0 += mul(s0_1_0, M4(-3.400e-02, -3.400e-02, -3.400e-02, -3.400e-02, -9.487e-02, -9.820e-02, -9.909e-02, -9.531e-02, -4.091e-03, -4.091e-03, -4.091e-03, -4.091e-03, 4.897e-03, 2.427e-03, 1.496e-03, 4.505e-03));
	r1 += mul(s0_1_0, M4(5.865e-02, 5.865e-02, 5.865e-02, 5.865e-02, -9.595e-03, -9.721e-03, -9.107e-03, -9.533e-03, -7.642e-02, -7.642e-02, -7.642e-02, -7.642e-02, -2.204e-01, -2.205e-01, -2.200e-01, -2.203e-01));
	r0 += mul(s0_1_1, M4(-8.614e-02, -8.614e-02, -8.614e-02, -8.614e-02, -3.672e-02, -4.032e-02, -4.105e-02, -3.769e-02, -1.740e-01, -1.740e-01, -1.740e-01, -1.740e-01, 1.696e-01, 1.666e-01, 1.660e-01, 1.687e-01));
	r1 += mul(s0_1_1, M4(2.293e-01, 2.293e-01, 2.293e-01, 2.293e-01, 1.890e-01, 1.890e-01, 1.890e-01, 1.891e-01, -4.597e-03, -4.597e-03, -4.597e-03, -4.597e-03, 1.807e-01, 1.807e-01, 1.805e-01, 1.809e-01));
	r0 += mul(s0_1_2, M4(-2.350e-02, -2.350e-02, -2.350e-02, -2.350e-02, -2.455e-01, -2.487e-01, -2.493e-01, -2.465e-01, -3.775e-02, -3.775e-02, -3.775e-02, -3.775e-02, 1.058e-01, 1.032e-01, 1.026e-01, 1.049e-01));
	r1 += mul(s0_1_2, M4(1.597e-01, 1.597e-01, 1.597e-01, 1.597e-01, 8.256e-02, 8.257e-02, 8.261e-02, 8.276e-02, -2.294e-01, -2.294e-01, -2.294e-01, -2.294e-01, -3.658e-02, -3.651e-02, -3.665e-02, -3.637e-02));
	r0 += mul(s0_2_0, M4(-6.540e-02, -6.540e-02, -6.540e-02, -6.540e-02, 6.741e-02, 6.394e-02, 6.310e-02, 6.688e-02, -2.575e-02, -2.575e-02, -2.575e-02, -2.575e-02, -7.069e-02, -7.322e-02, -7.416e-02, -7.109e-02));
	r1 += mul(s0_2_0, M4(9.200e-02, 9.200e-02, 9.200e-02, 9.200e-02, 1.466e-01, 1.465e-01, 1.472e-01, 1.467e-01, 1.094e-01, 1.094e-01, 1.094e-01, 1.094e-01, -5.608e-02, -5.613e-02, -5.557e-02, -5.598e-02));
	r0 += mul(s0_2_1, M4(6.093e-02, 6.093e-02, 6.093e-02, 6.093e-02, 1.594e-01, 1.557e-01, 1.551e-01, 1.585e-01, -2.519e-02, -2.519e-02, -2.519e-02, -2.519e-02, -6.842e-02, -7.120e-02, -7.189e-02, -6.918e-02));
	r1 += mul(s0_2_1, M4(-1.109e-01, -1.109e-01, -1.109e-01, -1.109e-01, -1.036e-01, -1.035e-01, -1.031e-01, -1.034e-01, 1.746e-01, 1.746e-01, 1.746e-01, 1.746e-01, 1.227e-01, 1.228e-01, 1.231e-01, 1.229e-01));
	r0 += mul(s0_2_2, M4(-1.138e-01, -1.138e-01, -1.138e-01, -1.138e-01, 6.757e-02, 6.418e-02, 6.360e-02, 6.645e-02, -2.323e-02, -2.323e-02, -2.323e-02, -2.323e-02, -1.918e-02, -2.165e-02, -2.230e-02, -2.008e-02));
	r1 += mul(s0_2_2, M4(-2.404e-01, -2.404e-01, -2.404e-01, -2.404e-01, 4.725e-02, 4.727e-02, 4.769e-02, 4.736e-02, -1.532e-01, -1.532e-01, -1.532e-01, -1.532e-01, 2.064e-02, 2.071e-02, 2.103e-02, 2.077e-02));
	r0 += mul(s1_0_0, M4(1.503e-02, -1.960e-02, 1.255e-02, -1.863e-01, -3.193e-01, -9.443e-02, 1.131e-01, 1.684e-01, 1.723e-01, 3.899e-02, -5.871e-02, -5.609e-02, -1.645e-01, -3.447e-01, -2.373e-02, 8.718e-03));
	r1 += mul(s1_0_0, M4(-3.186e-02, -1.823e-02, -3.665e-02, 1.011e-02, -6.872e-02, 7.742e-02, 4.445e-02, -7.129e-01, -2.046e-01, 4.693e-02, -2.017e-01, 3.924e-02, 1.215e-01, -1.503e-03, 3.898e-01, 1.867e-01));
	r0 += mul(s1_0_1, M4(-8.506e-03, 1.071e-01, -7.005e-02, -3.235e-01, -7.498e-02, -4.339e-03, -3.249e-02, -7.349e-02, -4.212e-02, 1.029e-01, -1.584e-02, 9.638e-02, 1.237e-01, -1.978e-01, -1.163e-01, 2.892e-01));
	r1 += mul(s1_0_1, M4(-4.856e-03, -1.440e-01, -4.110e-01, 6.669e-02, -2.871e-02, -1.242e-02, 5.001e-02, -1.102e-01, 3.109e-02, -1.667e-01, -8.709e-02, -3.059e-02, -7.959e-02, 1.860e-01, 1.454e-01, 5.388e-02));
	r0 += mul(s1_0_2, M4(-1.608e-02, 8.333e-01, -1.685e-01, 2.728e-01, 1.295e-03, -9.936e-02, 8.806e-02, 5.244e-02, 1.273e-02, -6.233e-02, -1.304e-01, 1.520e-01, 2.145e-03, -7.090e-02, 9.691e-02, -2.036e-01));
	r1 += mul(s1_0_2, M4(-3.460e-01, -2.572e-01, -6.152e-01, -4.448e-01, -6.200e-02, 9.984e-02, -1.518e-02, -5.071e-02, -7.300e-02, -7.132e-02, -2.681e-02, 5.605e-02, 1.798e-01, -5.185e-02, 1.485e-01, 1.150e-01));
	r0 += mul(s1_1_0, M4(5.383e-02, 3.283e-02, -6.840e-05, 2.703e-01, 3.838e-01, -4.281e-02, 1.880e-01, -1.801e+00, 5.291e-01, -5.838e-02, 1.362e-01, -3.232e-01, 1.761e-01, 7.232e-01, -9.092e-02, 1.104e+00));
	r1 += mul(s1_1_0, M4(-6.027e-02, 2.765e-02, 4.413e-02, -3.890e-02, 3.687e-01, 5.033e-01, -8.089e-03, -3.840e-01, -1.576e-01, 1.116e-01, 2.135e-02, 8.044e-03, 7.848e-02, -8.011e-01, -2.960e-02, 1.646e-01));
	r0 += mul(s1_1_1, M4(2.452e-02, -2.222e-01, 2.485e-01, -7.636e-01, 1.646e-01, 2.188e-01, 6.573e-02, 7.168e-01, -2.881e-01, -7.908e+00, 2.163e-01, -8.756e-01, -1.370e-01, -5.533e-01, 5.083e-01, -5.938e-01));
	r1 += mul(s1_1_1, M4(7.733e-02, 2.378e-01, 5.796e-01, -1.646e-01, 5.625e-01, -2.318e+00, -5.621e-01, -2.848e-01, 3.037e-01, 2.329e-01, -3.662e-01, -8.920e-01, -1.593e-03, -8.457e-01, 4.032e-01, 7.062e-01));
	r0 += mul(s1_1_2, M4(1.363e-02, 5.876e-01, -1.549e-01, -6.083e-01, 5.945e-02, -2.588e-01, 3.897e-01, 2.221e-01, -4.211e-02, 1.333e-01, -2.864e-01, 1.493e-01, -7.523e-03, 1.426e-01, -3.193e-01, -1.892e-01));
	r1 += mul(s1_1_2, M4(1.107e-01, -3.803e-01, 6.230e-01, 7.461e-01, -1.833e-02, -3.057e-02, -1.802e-01, 7.218e-02, 2.071e-02, -9.067e-02, -5.696e-02, -3.686e-01, -7.837e-02, 7.217e-02, -1.157e-01, -1.809e-01));
	r0 += mul(s1_2_0, M4(-4.004e-03, -2.873e-02, -1.248e-02, -7.481e-02, 3.537e-02, 1.193e-01, -6.275e-03, -2.630e-01, 1.440e-01, -2.732e-02, 2.292e-01, -7.393e-01, -9.021e-02, -2.910e-01, 3.163e-02, 4.677e-01));
	r1 += mul(s1_2_0, M4(3.184e-02, 5.904e-03, -4.461e-02, 1.023e-01, -5.840e-01, -1.636e-01, -3.201e-01, 3.096e-01, -5.488e-01, 2.233e-02, -4.980e-02, 2.377e-01, 4.810e-02, 6.687e-01, -2.496e-01, -4.718e-01));
	r0 += mul(s1_2_1, M4(-4.627e-02, 1.233e-01, -9.253e-02, 3.282e-02, -5.563e-03, 4.923e-02, -8.105e-01, 9.086e-02, -6.761e-02, -7.338e-03, 7.265e-02, -1.942e+00, 7.838e-02, -2.902e-01, -7.430e-01, 4.542e-02));
	r1 += mul(s1_2_1, M4(-2.612e-02, 1.045e-02, -3.740e-01, 8.964e-02, -5.314e-02, -2.232e-01, 3.154e-01, -3.018e-01, 4.281e-01, -2.744e-01, 4.056e-01, -1.573e-02, 3.565e-02, 1.066e+00, -4.736e-01, -6.388e-01));
	r0 += mul(s1_2_2, M4(6.906e-03, -9.988e-02, -7.005e-02, -3.736e-03, 1.331e-02, 6.250e-02, -7.090e-01, 1.490e-02, -1.265e-02, -1.620e-02, -5.879e-01, 1.166e-01, 6.216e-03, 5.887e-03, 8.379e-01, -3.583e-02));
	r1 += mul(s1_2_2, M4(2.457e-02, 1.454e-02, -5.554e-02, -4.939e-01, 1.647e-03, -6.089e-02, 3.495e-02, -9.100e-02, 4.474e-02, -4.131e-01, 9.189e-02, 2.397e-01, -1.653e-01, 1.043e-02, -5.773e-02, 1.314e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2 (8x4)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(4.652e-02, 2.118e-02, 1.777e-02, -2.906e-02, 3.834e-03, 1.011e-02, -6.713e-02, 1.085e-02, -1.450e-01, -1.499e-01, 2.302e-03, 2.583e-02, -3.711e-04, 2.741e-02, -3.458e-02, 3.259e-02));
	r0 += mul(s0_0_1, M4(-2.569e-04, 4.004e-02, 7.850e-02, -2.020e-01, 5.387e-02, 6.909e-02, -8.329e-02, -3.478e-02, 5.662e-03, -2.999e-02, -1.608e-01, -8.773e-03, -3.874e-02, -6.909e-02, 6.379e-02, 2.815e-02));
	r0 += mul(s0_0_2, M4(-2.328e-02, -3.024e-02, 2.104e-01, -1.535e-01, -9.687e-03, 3.121e-02, 9.264e-05, -2.195e-02, -1.682e-02, -2.241e-02, 3.162e-02, -7.546e-02, 2.338e-02, 1.218e-03, 3.072e-03, 3.387e-02));
	r0 += mul(s0_1_0, M4(3.568e-02, 1.605e-02, -3.021e-02, 1.744e-01, 3.682e-01, 3.291e-01, 1.265e-01, -1.594e-02, -1.668e-01, -9.767e-03, 3.429e-02, -6.392e-01, -1.191e+00, -1.490e-01, -1.627e-01, -2.411e-02));
	r0 += mul(s0_1_1, M4(1.743e-01, 2.075e-02, 6.223e-02, 4.957e-01, -2.777e-01, -2.362e-02, 2.783e-01, 1.053e-01, 7.803e-02, -1.213e-01, -2.707e-02, -9.065e-02, -2.023e-01, -3.512e-01, 1.473e-02, -5.604e-01));
	r0 += mul(s0_1_2, M4(1.044e-01, 1.391e-01, 6.655e-01, 1.817e-01, 5.310e-02, -2.680e-02, 1.876e-02, 1.084e-01, -3.514e-02, 2.059e-02, 3.658e-02, -5.265e-04, -5.674e-02, -3.518e-02, 3.321e-03, -6.615e-02));
	r0 += mul(s0_2_0, M4(-8.915e-02, 6.793e-03, 2.528e-02, -9.072e-02, 7.012e-01, 6.113e-01, 4.309e-02, 8.535e-01, -4.912e-01, -2.744e-01, 1.652e-02, 2.939e-01, -4.359e-02, 8.894e-02, 3.203e-02, -6.715e-02));
	r0 += mul(s0_2_1, M4(-5.987e-01, -4.502e-01, -5.588e-02, -8.027e-01, -4.131e-01, 5.164e-02, -3.366e-02, 3.236e-02, 2.901e-02, -6.327e-02, 7.825e-03, -5.461e-02, -5.164e-02, -1.558e-01, -8.130e-02, -9.202e-01));
	r0 += mul(s0_2_2, M4(2.355e-01, 3.057e-01, 1.048e-01, 4.131e-01, -6.700e-03, -4.599e-02, -1.574e-03, -1.018e-01, -1.610e-02, -8.160e-03, 2.584e-03, 7.788e-02, -2.354e-02, -2.492e-02, 6.279e-04, -3.643e-02));
	r0 += mul(s1_0_0, M4(2.251e-02, 1.874e-02, -4.000e-02, 1.636e-01, -4.309e-02, 1.593e-02, -3.397e-02, -8.663e-03, 6.238e-02, 5.182e-02, 9.493e-02, -2.822e-01, -2.524e-02, -7.151e-02, 1.067e-01, -1.929e-01));
	r0 += mul(s1_0_1, M4(8.030e-02, 3.430e-02, 3.593e-02, 2.046e-01, 6.406e-02, -2.345e-02, 2.400e-02, -1.655e-02, -8.327e-02, 3.853e-02, -1.762e-01, -3.678e-01, 6.226e-02, 4.112e-02, -3.545e-01, -1.427e-02));
	r0 += mul(s1_0_2, M4(-1.224e-02, 4.359e-02, -4.925e-02, 1.750e-02, -3.504e-02, 4.967e-03, -1.392e-02, -6.436e-03, 3.428e-02, 1.307e-02, 4.165e-02, -1.347e-01, 6.182e-03, 6.040e-02, 3.111e-02, 2.771e-02));
	r0 += mul(s1_1_0, M4(4.014e-01, 1.840e-01, 9.982e-02, -3.458e-02, -1.155e-01, 5.106e-02, -9.400e-02, 1.850e-01, -1.450e-01, -9.890e-02, -8.620e-02, 1.938e-01, -1.958e-01, -1.578e-01, -1.347e-01, 8.244e-02));
	r0 += mul(s1_1_1, M4(-2.377e-01, 2.027e-01, 1.880e-01, -1.763e-01, 2.454e-01, -1.255e-01, 2.336e-01, -2.347e-01, 2.803e-01, 2.202e-01, 1.830e-01, 5.304e-01, -2.529e-01, -2.555e-01, -4.357e-02, -1.778e-01));
	r0 += mul(s1_1_2, M4(3.724e-02, -4.195e-03, 6.167e-02, 7.180e-02, -1.265e-01, 2.753e-02, -1.161e-01, -2.013e-03, 4.700e-02, 8.615e-02, -9.542e-03, 6.567e-02, 4.040e-02, -5.118e-02, -1.865e-02, -2.315e-02));
	r0 += mul(s1_2_0, M4(3.271e-01, -1.629e-02, 8.649e-05, 8.125e-02, 5.761e-01, 5.176e-01, 5.844e-02, 3.115e-01, -7.564e-02, -3.276e-03, -1.355e-02, 6.944e-02, -1.690e-01, -1.606e-01, -1.097e-02, -3.740e-01));
	r0 += mul(s1_2_1, M4(-1.664e-01, 2.162e-02, 1.268e-02, 2.446e-01, 2.339e-01, 4.658e-01, 1.592e-02, 5.684e-01, -3.451e-02, -5.517e-02, -4.687e-04, -3.574e-02, -1.812e-01, -1.304e-01, -1.155e-02, -2.764e-01));
	r0 += mul(s1_2_2, M4(1.367e-02, -1.998e-02, -4.510e-02, -6.963e-02, 1.960e-02, 9.689e-02, -3.869e-02, 9.008e-02, 1.116e-01, 4.511e-02, 1.789e-02, 1.987e-01, -3.034e-02, -6.239e-02, -3.647e-03, -1.205e-01));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
}
//!PASS 4
//!DESC out-shuffle (4x4)
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-8.466e-03, 8.423e-03, -1.341e-02, 8.400e-03, 4.039e-02, 1.243e-02, 3.053e-03, 2.236e-02, -9.043e-02, -4.385e-02, 1.099e-02, -4.289e-03, 2.522e-02, -1.250e-02, 1.207e-02, -6.843e-04));
	r0 += mul(s0_0_1, M4(2.039e-02, 2.086e-02, 7.522e-03, -3.699e-02, 1.700e-01, 1.294e-01, -2.264e-02, 4.882e-03, -2.046e-02, -6.568e-02, -3.262e-03, 1.502e-02, 4.650e-02, 7.837e-02, -1.792e-03, 6.150e-03));
	r0 += mul(s0_0_2, M4(1.362e-03, -4.553e-03, -5.095e-03, -1.786e-02, 1.193e-02, 6.665e-02, 9.653e-03, -1.117e-02, -6.344e-03, -1.285e-03, 6.389e-04, -1.254e-04, -2.810e-02, -9.490e-03, 2.764e-03, 1.519e-02));
	r0 += mul(s0_1_0, M4(6.046e-02, -5.579e-02, 4.086e-02, -2.594e-02, -2.222e-01, 6.714e-02, 1.642e-01, 1.251e-02, 2.124e-01, 2.800e-02, -2.271e-01, -1.145e-01, 1.470e-01, 2.230e-03, -2.017e-01, 2.901e-02));
	r0 += mul(s0_1_1, M4(-6.934e-01, 6.074e-01, -3.916e-01, 3.975e-01, -1.182e-01, -1.321e+00, 5.566e-01, 3.135e-02, -1.213e-01, 1.228e-01, -2.879e-02, -1.585e-01, 3.785e-01, 3.936e-01, -3.096e-01, -5.809e-01));
	r0 += mul(s0_1_2, M4(5.465e-02, 1.837e-02, 6.128e-03, -2.014e-02, 2.840e-02, 1.509e-01, -1.450e-02, 1.985e-01, 8.899e-03, -6.614e-02, -1.062e-02, -8.987e-03, -3.886e-02, 5.009e-02, 1.448e-02, 3.161e-02));
	r0 += mul(s0_2_0, M4(-1.064e-02, 1.822e-02, 1.365e-03, -1.041e-02, -6.714e-02, -4.944e-02, -1.042e-01, -3.769e-02, 2.007e-01, 2.301e-02, 5.776e-01, 1.213e-01, 3.036e-03, 1.199e-02, 1.776e-02, 4.685e-03));
	r0 += mul(s0_2_1, M4(5.676e-02, 9.702e-03, -2.397e-01, 2.686e-01, 1.734e-02, 2.728e-02, 8.738e-02, -3.604e-01, -1.548e-01, 9.495e-02, -2.007e-01, 3.917e-01, -3.189e-02, -2.570e-02, 6.957e-02, 7.940e-02));
	r0 += mul(s0_2_2, M4(-1.035e-02, -2.055e-04, 3.797e-02, 3.525e-02, 2.739e-02, 1.148e-02, -1.547e-03, 3.837e-02, -5.462e-03, -7.788e-02, 4.641e-03, -1.392e-01, 8.643e-03, -7.950e-03, -8.491e-03, -1.800e-02));
	r0 += V4(-5.434e-06, 1.445e-05, -9.457e-05, -3.159e-05);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
