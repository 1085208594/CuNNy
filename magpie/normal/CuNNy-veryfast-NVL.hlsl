// CuNNy veryfast NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000120

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in (1x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(-2.466e-01, 2.546e-02, -3.160e-04, 2.230e-01) * s0_0_0;
	r1 += V4(-3.796e-02, -1.554e-02, 3.425e-02, 1.558e-01) * s0_0_0;
	r0 += V4(9.948e-02, 1.324e-03, -3.679e-02, -1.474e-01) * s0_0_1;
	r1 += V4(4.661e-02, 1.005e-03, -4.578e-02, 6.997e-01) * s0_0_1;
	r0 += V4(1.484e-01, 2.152e-02, 3.724e-02, -3.601e-02) * s0_0_2;
	r1 += V4(4.118e-02, 2.449e-03, 3.139e-02, 1.132e-01) * s0_0_2;
	r0 += V4(2.039e-01, 3.801e-01, 5.649e-03, 5.879e-01) * s0_1_0;
	r1 += V4(3.137e-02, -9.082e-01, -1.869e-01, -7.355e-02) * s0_1_0;
	r0 += V4(-9.013e-01, 1.499e-01, -9.046e-01, -7.676e-01) * s0_1_1;
	r1 += V4(-1.531e-01, 9.082e-01, 8.161e-01, -8.145e-01) * s0_1_1;
	r0 += V4(6.439e-01, -6.323e-02, -5.361e-02, 1.000e-01) * s0_1_2;
	r1 += V4(-1.860e-01, 7.000e-03, -1.782e-01, -4.318e-02) * s0_1_2;
	r0 += V4(1.384e-02, 1.136e-01, -1.056e-02, 1.916e-01) * s0_2_0;
	r1 += V4(3.770e-04, 2.886e-03, -1.458e-03, -1.124e-01) * s0_2_0;
	r0 += V4(5.277e-02, -1.570e-01, 9.434e-01, -8.541e-02) * s0_2_1;
	r1 += V4(2.109e-01, 1.684e-02, -1.887e-01, 1.628e-01) * s0_2_1;
	r0 += V4(-1.665e-02, 7.008e-02, 2.020e-02, -7.636e-02) * s0_2_2;
	r1 += V4(3.937e-01, -1.529e-02, -4.421e-02, -9.302e-02) * s0_2_2;
	r0 += V4(9.148e-04, 2.508e-03, -7.101e-04, 1.250e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(8.302e-03, 6.785e-04, 3.499e-03, 8.048e-04);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(2.222e-01, 4.325e-02, 2.456e-02, 2.112e-01, 2.796e-01, 3.330e-01, -1.675e-01, 1.998e-02, 1.642e-01, 4.384e-01, 5.895e-02, 9.512e-02, 1.055e-02, -2.546e-02, 8.917e-02, 3.349e-02));
	r1 += mul(s0_0_0, M4(1.131e-01, 2.222e-02, 1.763e-01, 1.085e-02, 7.329e-02, 2.811e-01, 6.812e-02, 7.861e-02, 2.059e-01, -4.331e-02, 6.520e-02, 2.524e-01, 1.331e-01, -1.136e-02, 3.280e-02, 9.670e-02));
	r0 += mul(s0_0_1, M4(-2.230e-02, -2.305e-01, -9.287e-02, -8.585e-02, -5.196e-01, 7.060e-01, 4.854e-01, 6.613e-02, 1.289e-01, 3.038e-01, 7.680e-02, 3.955e-01, -2.399e-02, -5.820e-02, -2.549e-02, -2.764e-01));
	r1 += mul(s0_0_1, M4(-1.860e-01, -1.866e-01, -6.804e-02, 1.558e-01, -5.392e-01, 1.676e-01, -1.660e-01, 5.080e-02, -5.750e-02, 1.996e-01, 3.748e-01, 3.868e-02, 3.156e-01, 2.999e-02, 1.546e-01, 3.272e-01));
	r0 += mul(s0_0_2, M4(-1.447e-02, -1.306e-01, 4.256e-02, -4.946e-02, 3.848e-01, -4.852e-01, -8.347e-02, 5.731e-02, 5.379e-01, -4.615e-01, 6.950e-02, 1.184e-01, -5.862e-02, 1.560e-01, -1.766e-02, 1.293e-03));
	r1 += mul(s0_0_2, M4(-2.155e-02, 2.765e-02, -2.158e-01, -2.774e-02, -4.446e-02, -3.355e-01, -6.749e-01, -1.554e-01, -8.391e-02, -9.096e-02, -8.456e-01, -8.104e-02, 3.567e-02, 1.775e-01, 3.292e-01, 2.113e-01));
	r0 += mul(s0_1_0, M4(-3.721e-01, 5.412e-02, 1.410e-01, 2.213e-01, 8.254e-01, 8.646e-01, -1.309e-01, 4.825e-01, -1.969e-01, 1.460e-01, -1.323e-01, 1.005e-01, -6.546e-01, -6.504e-01, 7.823e-02, -3.655e-01));
	r1 += mul(s0_1_0, M4(3.589e-01, 1.072e+00, 1.352e-01, -8.742e-03, 3.291e-01, 3.063e-03, 7.967e-02, 2.280e-01, 3.383e-01, -1.011e-01, -1.886e-01, 3.350e-01, -1.398e-01, -1.129e-01, -1.897e-02, -2.237e-01));
	r0 += mul(s0_1_1, M4(-3.401e-01, -4.652e-01, -3.912e-01, -6.556e-01, -4.373e-01, -1.281e-01, 3.271e-01, 6.562e-01, -5.733e-01, 1.018e-01, -1.129e-01, 5.721e-01, -8.095e-01, 4.397e-01, -4.424e-01, -4.449e-01));
	r1 += mul(s0_1_1, M4(-1.268e-01, -9.355e-01, 5.391e-01, 2.297e-01, -3.696e-01, -2.921e-01, -6.273e-01, 2.462e-01, -1.030e-01, -3.362e-02, 4.508e-01, 3.911e-01, -2.803e-01, -5.293e-01, 8.137e-02, 1.911e-01));
	r0 += mul(s0_1_2, M4(1.410e-01, -3.090e-02, 9.886e-02, -2.646e-03, 1.333e-01, -5.566e-01, -1.838e-01, 3.057e-01, 1.222e+00, -5.377e-01, -1.419e-01, 1.777e-01, -5.675e-01, -2.516e-01, 2.152e-01, -2.154e-01));
	r1 += mul(s0_1_2, M4(1.202e-01, -1.976e-01, -6.558e-01, 1.239e-01, 1.152e-01, 4.150e-01, 5.387e-01, -1.383e-01, -6.204e-02, 9.290e-03, -1.074e+00, 2.473e-01, 2.444e-01, 2.863e-01, 5.965e-02, -2.655e-01));
	r0 += mul(s0_2_0, M4(-2.529e-01, 7.494e-02, 4.880e-02, 1.616e-01, -1.405e-01, 3.402e-01, 1.393e-01, -3.268e-01, -6.178e-01, 2.301e-02, 5.593e-02, -3.056e-01, 1.545e-01, -1.599e-01, -1.362e-01, 2.109e-01));
	r1 += mul(s0_2_0, M4(1.114e-01, -2.849e-02, 1.676e-01, -9.147e-02, 2.560e-01, 5.957e-01, 1.440e-01, -8.861e-02, 8.475e-02, 1.194e-01, 5.271e-02, 2.901e-02, -3.565e-01, -2.764e-01, -9.713e-02, 1.106e-01));
	r0 += mul(s0_2_1, M4(1.932e+00, -1.174e-01, -4.951e-01, 3.008e-01, -4.806e-01, -7.398e-01, 2.307e-01, -5.212e-01, -1.329e+00, -1.764e-01, -1.058e-03, -3.660e-01, -2.100e-01, 3.635e-01, 6.957e-02, 1.684e-01));
	r1 += mul(s0_2_1, M4(-5.523e-01, -8.301e-01, 1.295e-01, -4.099e-01, 2.505e-01, -4.450e-02, 3.553e-01, -7.777e-02, 1.603e-01, -7.541e-03, 2.881e-01, 8.389e-02, -3.976e-02, -1.855e-01, -2.210e-01, 2.605e-02));
	r0 += mul(s0_2_2, M4(1.343e-01, -2.304e-01, -2.019e-01, -1.139e-02, 4.569e-01, -9.174e-02, -1.946e-01, -1.708e-01, 1.142e-02, -8.277e-02, -1.313e-01, -6.506e-02, 3.424e-01, -9.602e-02, 1.174e-01, 4.129e-01));
	r1 += mul(s0_2_2, M4(-1.870e-01, -2.107e-02, -2.701e-01, 3.149e-02, 7.241e-02, -1.618e-01, 8.559e-01, 6.714e-02, 6.726e-02, -4.843e-02, 2.367e-01, 1.042e-01, -2.408e-01, -2.014e-02, -1.003e+00, 7.200e-02));
	r0 += mul(s1_0_0, M4(-8.227e-02, -1.120e+00, -1.575e-01, 7.788e-04, 1.063e-01, 2.103e-01, -9.978e-02, -3.761e-02, 4.259e-01, -2.620e-01, 2.564e-02, 1.815e-01, 4.003e-02, -4.901e-02, -3.234e-02, -4.672e-02));
	r1 += mul(s1_0_0, M4(4.748e-01, 1.136e-01, -4.915e-01, -2.575e-01, -1.597e-01, -5.871e-01, 7.448e-03, -1.620e-02, 4.142e-01, 1.505e-01, 1.568e-01, 1.522e-01, -1.777e-01, -1.078e-01, 3.425e-02, 3.332e-02));
	r0 += mul(s1_0_1, M4(-4.031e-01, 1.594e-01, -1.350e-01, -5.126e-01, 3.100e-02, 3.284e-01, 1.343e-01, -1.774e-02, 4.729e-02, -1.613e-01, -2.181e-02, -4.682e-02, -5.627e-02, 3.518e-03, 5.246e-02, 1.902e-02));
	r1 += mul(s1_0_1, M4(-9.237e-02, 5.878e-02, 7.898e-01, -2.959e-01, -5.225e-01, 5.674e-02, -1.457e-01, -9.549e-02, 3.262e-01, -4.093e-01, 4.580e-01, 1.697e-01, 1.778e-01, 2.125e-02, -9.322e-02, 2.001e-02));
	r0 += mul(s1_0_2, M4(-1.383e-01, 3.392e-01, -4.250e-02, 1.375e-02, 1.580e-01, 1.041e-02, 2.370e-01, -1.333e-01, 1.350e-01, 5.146e-02, 8.645e-02, 9.471e-02, 6.119e-02, 8.225e-02, 2.171e-02, 4.430e-02));
	r1 += mul(s1_0_2, M4(4.049e-02, -6.917e-02, 5.493e-01, 1.438e-01, -8.196e-02, 3.712e-01, -4.127e-01, -4.760e-01, 1.491e-01, 9.215e-02, 1.713e-01, 2.569e-01, -6.118e-02, 2.272e-02, 2.213e-02, -5.869e-02));
	r0 += mul(s1_1_0, M4(-3.132e-02, -7.667e-01, -2.682e-01, 1.286e-01, 4.740e-01, 4.953e-01, -9.248e-02, 2.753e-01, -2.521e-01, -6.273e-01, -5.517e-03, -1.822e-01, 1.151e-01, -5.671e-01, -3.241e-02, 1.264e-01));
	r1 += mul(s1_1_0, M4(8.252e-02, -4.953e-02, 2.029e-01, 1.946e-01, 3.250e-01, -1.854e-01, -9.734e-04, 1.261e-01, -2.875e-01, -5.671e-02, 1.708e-01, 1.978e-01, -3.525e-01, -3.899e-01, -1.246e-01, -2.067e-02));
	r0 += mul(s1_1_1, M4(-2.389e-01, 3.073e-01, -1.209e-01, 5.482e-01, 8.038e-01, -3.740e-01, 4.854e-01, 7.705e-01, -5.366e-01, -2.282e-01, -5.774e-02, -9.016e-01, -7.952e-02, -3.429e-01, -6.389e-02, -5.022e-01));
	r1 += mul(s1_1_1, M4(-3.663e-01, -1.697e-01, -1.029e+00, 1.106e-01, 9.893e-02, -4.473e-02, -1.317e-01, 2.516e-01, 3.068e-01, 6.807e-03, -5.021e-01, -5.311e-01, -5.787e-01, 1.939e-01, -7.862e-01, -1.509e-01));
	r0 += mul(s1_1_2, M4(-4.404e-01, 5.714e-01, 1.870e-01, -2.668e-01, 4.792e-01, 1.270e-01, 8.890e-01, 6.404e-01, -2.371e-01, 4.998e-01, -8.963e-02, -3.272e-01, -2.736e-01, 4.329e-01, 1.035e-02, 6.698e-02));
	r1 += mul(s1_1_2, M4(1.174e-01, -6.833e-02, -1.241e-01, 2.352e-02, -2.468e-01, 8.431e-01, -1.411e+00, -6.562e-02, -1.379e-02, -2.362e-01, 4.600e-01, 1.749e-01, -5.108e-02, -2.124e-01, -3.785e-01, -9.791e-02));
	r0 += mul(s1_2_0, M4(3.878e-01, -7.362e-02, -7.328e-02, -5.426e-02, -2.742e-02, 4.092e-01, 6.418e-02, -1.165e-01, -1.877e-01, -2.941e-01, 8.974e-02, -1.846e-01, 2.408e-01, -1.891e-02, 1.221e-01, -1.539e-01));
	r1 += mul(s1_2_0, M4(-3.241e-01, -2.134e-01, -2.246e-01, -5.272e-02, 2.268e-01, 1.601e-01, 7.591e-02, -2.204e-02, -2.241e-01, -1.635e-01, 1.225e-01, -5.252e-02, 1.283e-01, 1.159e-01, 1.821e-01, 1.113e-02));
	r0 += mul(s1_2_1, M4(1.613e-01, 3.401e-01, 1.321e-01, 8.574e-02, -1.082e+00, -1.330e-01, -1.707e-01, -4.402e-01, 1.051e+00, 2.842e-01, -6.113e-01, 4.283e-01, -8.456e-01, -5.067e-01, 7.012e-01, -3.082e-01));
	r1 += mul(s1_2_1, M4(-1.293e-01, -6.842e-02, -3.506e-01, -2.337e-01, 6.132e-01, 3.000e-01, 2.959e-01, 2.421e-01, -7.051e-01, -2.532e-01, -6.895e-01, -1.391e-01, 5.510e-01, 5.023e-02, -5.948e-01, -2.441e-01));
	r0 += mul(s1_2_2, M4(-8.335e-02, 7.431e-02, 9.720e-02, -3.370e-02, -2.209e+00, -4.024e-01, 3.486e-01, -8.445e-01, -3.350e-01, 3.949e-01, 1.865e-01, -2.812e-01, -4.213e-01, 2.179e-01, 3.311e-01, -5.976e-02));
	r1 += mul(s1_2_2, M4(-3.851e-03, 4.095e-02, -2.310e-01, 2.414e-02, 5.058e-01, 5.106e-01, 1.260e+00, 6.015e-01, -9.228e-03, 2.307e-02, -3.255e-01, -2.069e-01, 2.061e-01, -4.486e-02, 3.142e-01, 2.082e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2 (8x4)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-7.607e-03, -6.323e-02, -1.072e-01, -3.213e-01, 3.604e-02, -1.534e-02, -8.851e-04, 1.268e-02, -1.263e-01, -6.908e-02, -1.271e-01, -1.585e-02, 4.125e-02, 4.529e-02, 1.082e-01, 6.856e-02));
	r0 += mul(s0_0_1, M4(-5.540e-01, -2.559e-01, -2.432e-01, -2.510e-01, 1.475e-02, 2.324e-02, 2.485e-02, -9.419e-02, 2.724e-01, 9.424e-03, 3.271e-01, 1.014e-01, 5.911e-02, 1.666e-01, -2.204e-01, 9.023e-02));
	r0 += mul(s0_0_2, M4(-2.332e-01, -5.624e-02, -1.486e-01, -1.333e-01, -5.550e-02, -8.550e-03, 9.932e-02, -2.177e-02, -7.896e-02, -5.735e-05, -2.173e-01, -4.602e-02, 1.714e-01, 6.323e-02, 8.808e-02, 1.411e-01));
	r0 += mul(s0_1_0, M4(1.180e-02, -4.485e-01, -8.376e-02, -3.433e-01, 2.481e-02, -3.313e-02, -5.658e-02, -1.904e-01, 8.702e-02, 2.349e-01, 1.370e-01, 3.076e-01, 4.112e-02, 9.445e-03, 8.475e-02, 1.688e-01));
	r0 += mul(s0_1_1, M4(-5.414e-01, -4.524e-01, -2.744e-01, -6.554e-01, -6.646e-01, -3.467e-01, -2.547e-01, -5.793e-03, 4.717e-01, 5.294e-01, 9.641e-02, 5.137e-01, 2.460e-02, -4.756e-01, 3.369e-01, -9.233e-02));
	r0 += mul(s0_1_2, M4(-4.410e-01, -3.181e-01, -1.648e-01, -2.558e-01, 2.932e-01, -2.270e-01, 1.097e-01, -2.684e-01, 1.351e-02, -8.940e-03, 6.023e-02, 1.939e-03, 2.269e-01, 2.172e-01, 2.212e-01, 2.446e-01));
	r0 += mul(s0_2_0, M4(1.411e-02, 6.295e-02, 1.765e-02, 4.041e-02, 3.124e-03, -7.129e-02, -6.418e-02, -1.200e-01, -8.315e-03, -9.149e-02, 4.945e-02, -3.233e-02, -2.571e-02, -2.042e-03, -1.125e-02, -2.057e-02));
	r0 += mul(s0_2_1, M4(1.878e-02, -8.672e-02, -4.879e-02, 3.317e-04, -8.615e-02, 3.511e-02, -3.176e-02, -1.182e-02, 6.212e-04, 4.674e-02, 1.180e-01, 3.404e-02, 2.488e-02, 1.656e-01, -1.948e-02, 7.739e-02));
	r0 += mul(s0_2_2, M4(-3.145e-02, -6.656e-02, -3.231e-02, -3.296e-02, 5.856e-02, -8.034e-02, 1.470e-02, -9.823e-02, -3.634e-02, -3.507e-02, -7.447e-03, -4.341e-02, 3.893e-02, 5.322e-02, 1.293e-02, 3.238e-02));
	r0 += mul(s1_0_0, M4(-1.927e-02, -2.662e-02, -8.837e-02, -4.381e-02, 2.532e-03, 7.261e-03, 2.692e-02, 1.780e-02, 1.431e-01, 2.321e-01, -4.913e-01, 1.470e-01, -6.763e-02, -2.946e-02, -3.498e-02, -9.774e-02));
	r0 += mul(s1_0_1, M4(-2.580e-02, -1.837e-02, -4.774e-02, 3.475e-02, 1.985e-02, 1.941e-02, -9.468e-02, 6.277e-02, 8.321e-02, 3.409e-02, -3.061e-01, 9.217e-02, -1.239e-02, -3.844e-02, 3.115e-01, 2.545e-02));
	r0 += mul(s1_0_2, M4(5.796e-02, 3.661e-03, 5.282e-02, 3.430e-02, 6.006e-02, -2.133e-02, 1.513e-02, 1.050e-02, 4.882e-03, 3.668e-02, 6.181e-02, 3.211e-02, 2.062e-02, 2.363e-02, 1.128e-02, 1.628e-02));
	r0 += mul(s1_1_0, M4(-1.716e-02, 2.226e-02, -1.248e-01, -1.406e-01, 3.239e-02, -6.472e-02, 3.593e-02, -1.043e-01, -2.442e-01, -6.543e-01, -2.684e-01, -2.783e-01, 4.219e-02, 1.352e-01, 1.457e-01, 3.603e-01));
	r0 += mul(s1_1_1, M4(-4.385e-01, -1.951e-01, -2.466e-01, -7.793e-01, -4.422e-01, -9.311e-03, -2.446e-01, 1.025e-01, -8.793e-01, 3.214e-02, -5.102e-01, -1.839e-02, 5.030e-01, 2.037e-01, 6.230e-01, 5.686e-01));
	r0 += mul(s1_1_2, M4(-1.890e-01, -1.435e-02, -1.626e-01, -2.403e-02, 2.407e-01, 6.084e-02, 1.463e-01, -6.541e-03, 5.625e-02, -7.127e-03, -4.524e-02, -5.861e-02, 1.096e-01, 3.763e-02, 1.724e-01, 4.968e-02));
	r0 += mul(s1_2_0, M4(-1.825e-02, -5.068e-02, -5.017e-02, -5.961e-02, -7.740e-03, 1.851e-02, -8.245e-03, 4.278e-02, -4.281e-02, -8.572e-03, -1.233e-01, -1.831e-01, -5.310e-02, -7.349e-02, -4.441e-03, -1.091e-01));
	r0 += mul(s1_2_1, M4(1.402e-02, -8.386e-02, -9.461e-02, 4.705e-02, 7.000e-02, 3.609e-01, -4.746e-02, 1.706e-01, -2.008e-01, -5.304e-02, -1.749e-01, -1.042e-01, 1.675e-03, 1.097e-01, 6.610e-02, 1.271e-01));
	r0 += mul(s1_2_2, M4(3.199e-02, 3.269e-02, -2.211e-02, 1.172e-02, -1.732e-01, -7.300e-02, -2.154e-01, -1.694e-01, 2.386e-02, -6.394e-03, -5.976e-03, -8.428e-03, 3.027e-02, -1.009e-01, -3.250e-02, -6.421e-02));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
}
//!PASS 4
//!DESC out-shuffle (4x4)
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.016e-02, 4.640e-03, -1.394e-02, -1.729e-02, 1.533e-01, -2.812e-02, 6.666e-02, -3.119e-02, 7.349e-02, -7.605e-04, -9.971e-03, 3.700e-03, 4.352e-04, -1.236e-02, 4.868e-03, 5.641e-03));
	r0 += mul(s0_0_1, M4(2.085e-01, -2.138e-01, -1.937e-02, 5.154e-02, -6.582e-01, -6.971e-02, 5.433e-02, 1.929e-01, 7.244e-02, 1.448e-01, -5.468e-03, -2.614e-02, -5.049e-02, 1.586e-01, 3.210e-02, 5.158e-03));
	r0 += mul(s0_0_2, M4(-2.673e-02, 1.811e-02, 6.542e-03, -3.083e-02, 7.784e-02, -3.115e-01, -3.047e-02, -1.662e-02, 1.633e-02, 7.577e-03, -5.814e-03, 7.927e-03, -2.471e-02, 7.726e-02, 7.796e-03, 4.749e-03));
	r0 += mul(s0_1_0, M4(1.528e-01, -1.723e-02, 7.364e-02, 1.173e-02, -1.120e-02, 4.090e-02, 9.807e-02, 7.094e-03, -1.306e-01, 7.105e-02, 7.544e-02, 3.539e-02, 6.189e-02, -2.889e-02, 2.715e-02, -9.923e-03));
	r0 += mul(s0_1_1, M4(4.502e-01, -1.064e-02, 1.675e-01, -7.481e-01, 4.143e-02, -1.471e-02, 1.980e-01, 3.061e-01, -2.549e-01, -6.074e-01, 2.940e-01, 1.353e-01, -8.210e-02, 3.506e-01, -8.418e-01, 6.571e-03));
	r0 += mul(s0_1_2, M4(-1.465e-02, 3.080e-03, -1.984e-02, -4.529e-02, -1.451e-02, -2.461e-02, 3.091e-02, -1.279e-02, 6.433e-03, 1.136e-01, 5.072e-03, 1.597e-01, -2.696e-03, 1.223e-01, 2.787e-02, -3.996e-02));
	r0 += mul(s0_2_0, M4(-8.043e-03, 3.064e-02, 7.938e-02, 3.413e-02, 3.054e-03, 7.477e-03, 9.751e-03, 1.165e-02, 5.512e-03, -4.016e-02, -9.309e-02, -2.105e-02, -7.904e-04, -3.183e-03, -1.277e-03, -1.515e-02));
	r0 += mul(s0_2_1, M4(-1.143e-02, -1.100e-03, 8.621e-02, 1.665e-01, -6.906e-03, -5.780e-03, -4.947e-03, 5.037e-03, -4.322e-03, 1.376e-02, -2.063e-02, -2.270e-01, 5.618e-03, -8.306e-03, 2.874e-02, 2.951e-02));
	r0 += mul(s0_2_2, M4(-4.502e-03, -1.157e-02, 3.834e-03, -3.403e-02, -8.395e-04, -1.187e-02, -6.206e-03, -2.719e-02, 4.915e-03, 2.494e-02, -8.449e-03, 1.107e-01, 6.132e-03, -3.294e-03, -8.923e-03, 1.545e-02));
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
