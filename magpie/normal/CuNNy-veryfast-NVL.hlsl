// CuNNy veryfast NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-0000120

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(4.699e-02, 9.343e-02, -1.711e-02, 2.176e-02) * s0_0_0;
	r1 += V4(5.432e-02, -1.576e-02, 1.902e-02, -2.092e-02) * s0_0_0;
	r0 += V4(-2.244e-02, -4.576e-01, 3.164e-02, -1.340e-04) * s0_0_1;
	r1 += V4(1.909e-01, 5.061e-02, -1.161e-01, -2.740e-02) * s0_0_1;
	r0 += V4(-1.640e-02, 3.701e-01, -1.557e-02, -1.091e-01) * s0_0_2;
	r1 += V4(6.214e-03, -1.997e-01, -8.145e-01, 4.151e-02) * s0_0_2;
	r0 += V4(-4.530e-02, -1.032e-01, 9.625e-01, 5.472e-02) * s0_1_0;
	r1 += V4(2.470e-01, 5.600e-03, -2.503e-02, -1.135e-01) * s0_1_0;
	r0 += V4(-1.191e+00, -3.593e-01, 7.329e-03, -2.329e-01) * s0_1_1;
	r1 += V4(-2.201e-01, 5.884e-01, 9.043e-01, -3.896e-01) * s0_1_1;
	r0 += V4(1.223e+00, 4.364e-01, 4.612e-02, 5.215e-01) * s0_1_2;
	r1 += V4(2.609e-02, -5.780e-02, -2.259e-03, -7.008e-02) * s0_1_2;
	r0 += V4(-2.787e-03, -2.872e-02, -9.316e-01, -3.385e-02) * s0_2_0;
	r1 += V4(2.657e-02, -5.261e-02, 7.119e-03, -3.800e-01) * s0_2_0;
	r0 += V4(-1.292e-02, -4.514e-01, -6.038e-02, 2.428e-02) * s0_2_1;
	r1 += V4(6.571e-02, -1.331e-01, -3.421e-03, 9.046e-01) * s0_2_1;
	r0 += V4(1.564e-02, 4.990e-01, -2.365e-02, 3.880e-02) * s0_2_2;
	r1 += V4(-9.676e-03, -1.054e-02, 2.993e-02, 5.403e-02) * s0_2_2;
	r0 += V4(-1.893e-03, 7.606e-04, 2.524e-04, 8.215e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(2.213e-03, -1.173e-03, 7.290e-05, 3.539e-06);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-8.808e-01, 9.348e-02, 2.541e-02, -2.275e-01, 2.096e-01, 1.097e-01, 8.123e-02, 8.711e-02, -9.237e-03, -1.381e-01, -1.403e-02, -1.044e-02, 1.448e+00, 3.267e-01, -1.092e-02, 3.820e-01));
	r1 += mul(s0_0_0, M4(5.709e-01, -5.821e-02, 6.306e-02, -1.018e-01, -6.659e-01, 1.182e-01, -1.768e-01, 9.480e-02, 1.154e-01, 1.506e-02, -4.440e-02, -1.093e-01, -9.868e-02, -1.212e-01, 2.733e-01, -6.891e-02));
	r0 += mul(s0_0_1, M4(-1.514e+00, 1.095e-01, 2.684e-01, 6.667e-02, 4.019e-01, -7.314e-02, -6.813e-02, 9.015e-02, -3.083e-02, -3.635e-02, -1.784e-01, -2.085e-01, -9.097e-02, 1.228e-01, -3.997e-02, 5.450e-01));
	r1 += mul(s0_0_1, M4(8.419e-01, -1.393e-01, 4.082e-01, -1.488e-01, -4.561e-01, 1.642e-01, -3.076e-01, -6.838e-02, -1.284e-01, -1.053e-01, 1.413e-01, 4.605e-02, -9.457e-01, 2.415e-01, -4.136e-02, 3.330e-01));
	r0 += mul(s0_0_2, M4(7.316e-02, -1.091e-02, -1.345e-02, 6.423e-02, -6.954e-02, 7.100e-03, 1.017e-02, 3.990e-02, -7.362e-01, 2.185e-02, 2.842e-01, 1.479e-01, 7.727e-02, 1.126e-01, -1.311e-01, -2.439e-01));
	r1 += mul(s0_0_2, M4(-5.568e-03, 8.569e-02, 6.576e-02, -4.398e-02, 6.610e-02, -3.710e-03, -1.419e-01, 3.165e-02, -1.129e+00, 1.254e-01, 1.242e-01, -2.725e-01, 3.747e-01, -9.991e-02, -1.658e-01, 1.022e-01));
	r0 += mul(s0_1_0, M4(6.073e-01, 5.801e-01, 3.666e-01, -2.356e-02, -6.555e-01, -9.097e-01, -2.924e-01, 8.724e-03, 7.842e-02, -4.586e-01, 2.281e-02, 1.583e-02, -1.012e+00, -3.536e-01, -7.354e-02, -8.301e-01));
	r1 += mul(s0_1_0, M4(-6.911e-01, -1.526e-01, 3.622e-02, 1.878e-01, 4.775e-01, 8.338e-02, 1.329e-02, -2.047e-01, -1.192e-01, 4.943e-03, 1.074e-02, -1.243e-01, 5.617e-01, -6.821e-01, 4.205e-01, 1.573e-01));
	r0 += mul(s0_1_1, M4(8.730e-01, 3.253e-02, 7.480e-01, 8.066e-01, -8.653e-01, 2.106e-03, -3.591e-01, -6.720e-01, 2.764e-01, 7.132e-01, -1.207e-01, -2.607e-01, -3.924e-01, -2.000e-01, 3.155e-01, 8.564e-01));
	r1 += mul(s0_1_1, M4(-9.386e-01, 1.577e-01, 9.359e-02, -2.841e-01, -3.812e-02, -2.124e-01, -9.735e-02, 1.803e-01, -1.819e-01, -6.270e-02, 1.411e-01, 3.721e-01, 4.516e-01, -8.620e-02, -5.631e-01, -4.878e-01));
	r0 += mul(s0_1_2, M4(5.859e-02, -4.252e-02, 3.730e-03, 6.986e-02, -1.349e-01, -5.823e-02, -2.760e-02, -1.172e-01, 1.025e-01, -5.134e-01, 3.122e-01, -2.721e-03, -2.295e-02, 1.836e-01, -2.505e-01, -2.071e-01));
	r1 += mul(s0_1_2, M4(3.323e-01, 1.018e-01, 1.011e-01, -4.169e-02, -5.669e-01, -1.718e-01, 7.983e-03, 3.650e-02, -9.461e-01, 1.333e-01, 5.066e-01, 3.000e-01, -1.535e-01, -7.064e-02, -3.192e-01, 2.025e-01));
	r0 += mul(s0_2_0, M4(2.530e-01, 6.034e-01, -6.406e-02, -2.346e-01, -9.077e-02, -9.959e-02, 9.478e-02, 6.038e-02, -4.021e-02, -2.786e-02, -1.738e-02, 1.035e-02, -7.696e-02, -5.082e-01, 1.112e-01, 2.135e-01));
	r1 += mul(s0_2_0, M4(2.741e-01, 1.596e-01, -1.284e-01, 4.619e-01, -2.854e-02, -2.822e-01, 1.890e-01, -2.117e-01, 9.372e-03, -8.498e-03, -1.346e-02, 6.668e-02, -7.624e-01, 1.246e+00, -2.330e-01, -4.053e-01));
	r0 += mul(s0_2_1, M4(2.036e-01, -4.041e-02, 1.213e-01, 4.951e-01, -1.093e-01, 9.243e-02, 5.484e-02, -1.456e-01, -8.186e-03, 6.256e-02, -2.517e-02, 4.180e-02, -2.458e-01, -1.091e-01, 7.170e-03, -3.998e-01));
	r1 += mul(s0_2_1, M4(-1.965e-01, 1.362e-01, -2.396e-01, 1.997e-01, 1.188e-01, -2.248e-01, 2.744e-01, -3.936e-01, 2.031e-02, 2.783e-01, -8.765e-02, 9.503e-02, 6.784e-01, -4.522e-01, 2.838e-01, 2.569e-03));
	r0 += mul(s0_2_2, M4(5.664e-02, -8.150e-02, 3.109e-02, 1.199e-01, 7.729e-02, 5.228e-02, -6.314e-02, -4.556e-02, 6.470e-02, -1.266e-01, -1.091e-01, -8.031e-02, -1.155e-01, 8.107e-02, 3.664e-02, -1.438e-01));
	r1 += mul(s0_2_2, M4(3.798e-01, 6.437e-02, 6.487e-02, -8.511e-02, -2.634e-02, 3.141e-04, 2.211e-02, -1.120e-02, 1.057e-01, 1.821e-01, -3.008e-01, 8.170e-03, -4.345e-01, -1.114e-02, -9.136e-02, 3.102e-03));
	r0 += mul(s1_0_0, M4(1.730e-02, 5.008e-02, -1.534e-02, -1.255e-01, -5.924e-03, 9.996e-02, 4.409e-02, 1.158e-02, -4.811e-01, -3.347e-02, 2.554e-02, 2.961e-02, -7.431e-02, -7.398e-02, -1.034e-02, -1.050e-01));
	r1 += mul(s1_0_0, M4(-2.943e-01, 6.236e-02, -1.077e-01, 8.714e-03, -2.177e-01, 3.486e-01, 5.586e-03, -2.113e-01, 1.001e-01, -1.223e-01, -7.961e-03, 5.073e-02, -2.680e-02, -1.485e-01, 1.095e-01, 1.203e-01));
	r0 += mul(s1_0_1, M4(-1.199e+00, -9.469e-02, 5.893e-02, 2.407e-01, 1.214e+00, -2.915e-01, -1.004e-01, -1.573e-01, -4.072e-01, 5.597e-02, 1.038e-01, 8.427e-02, -6.973e-01, -1.583e-01, 1.874e-02, -3.823e-01));
	r1 += mul(s1_0_1, M4(1.779e-01, -2.770e-01, 1.757e-01, 5.915e-02, -4.910e-01, -1.083e-01, -1.941e-01, -1.081e-01, 1.570e-01, 2.763e-02, 1.408e-01, 5.084e-02, -3.686e-02, -1.843e-01, 2.045e-02, -1.268e-01));
	r0 += mul(s1_0_2, M4(-4.496e-01, 6.723e-02, 3.095e-01, 3.272e-01, 5.134e-01, -9.354e-02, -3.151e-02, -1.154e-01, -5.490e-02, -2.079e-02, 6.005e-03, -5.099e-03, -1.336e-01, -7.214e-02, 1.518e-01, -2.264e-02));
	r1 += mul(s1_0_2, M4(4.818e-01, 6.752e-03, 2.660e-01, 1.831e-01, -3.682e-01, -7.078e-03, -1.333e-01, -4.540e-02, 1.577e-01, -1.950e-02, 2.707e-02, -6.741e-03, 1.462e-01, -1.315e-01, 5.371e-01, -6.029e-02));
	r0 += mul(s1_1_0, M4(4.203e-02, 3.486e-01, -1.792e-01, -1.577e-01, -1.809e-01, -8.876e-02, -3.565e-03, 2.921e-01, -4.731e-01, 3.416e-01, 9.156e-02, 2.312e-02, 3.196e-02, 7.934e-02, -1.313e-01, -3.057e-01));
	r1 += mul(s1_1_0, M4(4.343e-01, -1.717e-01, -1.308e-02, 4.129e-01, -1.391e-02, -1.204e-01, 1.405e-01, -1.728e-01, -4.098e-01, -9.343e-02, -1.416e-01, 6.774e-02, 5.097e-02, 2.125e-01, -1.311e-01, -5.988e-02));
	r0 += mul(s1_1_1, M4(-3.969e-01, 4.733e-01, 3.271e-01, -3.216e-01, -2.552e-01, -1.457e-01, -7.170e-01, -2.103e-01, 1.864e-01, -7.078e-02, 3.255e-01, 2.627e-01, -9.232e-02, 1.636e-01, -1.661e-02, -1.225e-01));
	r1 += mul(s1_1_1, M4(-6.447e-01, 7.375e-02, -1.023e+00, -4.729e-01, 1.656e+00, -2.462e-01, -2.314e-01, 1.066e+00, -1.481e-01, 3.237e-02, 1.947e-01, -2.358e-01, -8.926e-01, 3.644e-01, -5.592e-01, -2.017e-01));
	r0 += mul(s1_1_2, M4(1.099e+00, -6.196e-01, -2.472e-01, 1.388e-01, -5.579e-01, 8.569e-02, -4.123e-02, 6.760e-03, 1.109e-01, -7.154e-03, -4.242e-02, -4.509e-02, 3.853e-01, -1.899e-01, 7.982e-02, 3.048e-01));
	r1 += mul(s1_1_2, M4(-7.908e-03, -2.067e-01, 1.279e-02, -3.138e-01, -3.298e-01, 1.139e-01, -6.101e-01, 1.694e-01, 5.374e-02, 5.525e-03, 1.135e-01, 3.168e-02, -3.095e-01, 4.132e-01, 5.415e-02, -5.421e-02));
	r0 += mul(s1_2_0, M4(-9.278e-02, -2.343e-01, -2.495e-02, -3.735e-01, 2.108e-01, 5.372e-01, 1.469e-02, -2.574e-01, -2.726e-01, 2.817e-01, -8.210e-03, 1.558e-01, 3.132e-03, -1.980e-02, -4.900e-03, -5.459e-02));
	r1 += mul(s1_2_0, M4(-6.386e-02, 1.524e-01, 1.311e-01, -5.059e-01, 3.999e-02, -7.045e-02, -1.327e-01, -5.701e-02, -5.168e-01, -7.493e-03, -3.591e-01, 9.489e-02, 4.260e-02, -5.696e-02, 1.454e-02, -8.946e-02));
	r0 += mul(s1_2_1, M4(3.178e-01, 1.175e+00, -3.448e-01, 2.320e-03, -6.686e-02, -1.760e-01, 2.519e-01, 2.096e-01, 1.429e-01, -3.699e-01, -2.000e-02, 3.665e-01, -6.484e-02, 6.562e-02, -3.305e-02, -1.459e-01));
	r1 += mul(s1_2_1, M4(-6.101e-01, -5.426e-02, 4.639e-01, 5.774e-01, -6.764e-01, -9.296e-02, 2.373e-01, -4.963e-01, -2.240e-01, 2.930e-01, -2.422e-04, 9.299e-02, 2.603e-02, -2.802e-02, -2.575e-02, -1.107e-02));
	r0 += mul(s1_2_2, M4(5.408e-01, -9.393e-01, 2.458e-01, 2.114e-01, 1.044e-01, 1.129e-01, 3.269e-01, 2.474e-02, -3.099e-02, 8.223e-02, -1.417e-01, -7.651e-02, 2.682e-02, -9.087e-03, -3.648e-02, 3.183e-02));
	r1 += mul(s1_2_2, M4(9.404e-01, 4.572e-01, 9.184e-01, 1.946e-01, -5.279e-03, 1.240e-01, -2.012e-01, -2.030e-01, 4.074e-02, -1.244e-01, 5.845e-02, 1.148e-01, -2.549e-01, -2.654e-02, -2.327e-01, 9.394e-02));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-1.003e-03, 1.077e-01, 3.992e-02, 6.031e-02, 5.052e-03, 4.009e-02, 2.357e-02, 2.944e-02, -1.437e-02, -1.145e-01, -1.255e-01, -8.224e-02, 1.157e-02, 1.228e-01, 1.394e-02, 2.337e-02));
	r0 += mul(s0_0_1, M4(-3.259e-02, 9.163e-02, 2.937e-02, -1.947e-02, 2.482e-02, 4.795e-01, 3.135e-01, 3.122e-01, 9.448e-02, 2.110e-01, 1.106e-01, 1.597e-01, -1.685e-01, -4.183e-01, -2.793e-01, -3.028e-01));
	r0 += mul(s0_0_2, M4(-1.480e-01, 7.453e-02, 7.442e-02, 3.959e-02, 8.375e-02, -2.036e-01, 1.532e-01, 3.455e-02, 1.018e-01, -6.801e-02, 4.627e-02, 7.320e-03, -9.070e-02, 4.400e-02, -6.540e-02, -3.970e-02));
	r0 += mul(s0_1_0, M4(-8.171e-02, -1.268e-01, 1.480e-01, 1.313e-01, 9.363e-03, -5.481e-02, -1.671e-02, -4.066e-02, -1.873e-02, -3.740e-01, -4.224e-02, -1.872e-01, -9.151e-02, 1.089e-01, -1.440e-01, 9.862e-04));
	r0 += mul(s0_1_1, M4(2.456e-01, -8.536e-01, -4.775e-01, -1.469e-01, 9.448e-02, 2.705e-01, 3.291e-01, 2.846e-01, -3.007e-01, 9.199e-01, 2.730e-01, 3.838e-01, 4.678e-01, -5.449e-01, -1.208e-02, -2.485e-02));
	r0 += mul(s0_1_2, M4(1.583e-01, -1.789e-02, -1.393e-01, -5.750e-02, 3.525e-01, 1.296e-01, 1.082e-01, 4.252e-03, 4.764e-01, -4.616e-03, 1.037e-01, 4.002e-02, -6.270e-01, 6.336e-02, -1.194e-01, 1.144e-02));
	r0 += mul(s0_2_0, M4(1.443e-01, -5.596e-01, -9.779e-02, -8.333e-02, -1.460e-02, 6.775e-03, -2.970e-02, 2.327e-03, 6.280e-03, 2.364e-02, -5.651e-02, -1.271e-02, -4.684e-02, 1.957e-02, -4.302e-02, -7.977e-02));
	r0 += mul(s0_2_1, M4(-1.113e+00, -1.023e-01, -3.720e-01, -1.333e-01, 2.084e-02, 6.318e-03, 4.091e-02, -2.060e-03, 6.761e-02, -5.652e-03, -3.553e-02, 2.114e-01, -1.313e-01, -2.188e-02, -1.699e-01, -7.761e-02));
	r0 += mul(s0_2_2, M4(-3.252e-01, -9.271e-02, -5.671e-02, -1.186e-01, 6.265e-02, -2.115e-02, 6.132e-02, -2.808e-02, 1.576e-01, 1.447e-02, 1.499e-02, 2.634e-03, -2.656e-02, -5.102e-02, 1.905e-02, 7.067e-03));
	r0 += mul(s1_0_0, M4(-7.184e-04, -1.841e-01, -2.893e-02, -1.024e-01, 1.732e-02, 1.946e-02, 2.854e-02, -4.353e-02, -3.329e-02, -5.598e-03, -1.906e-02, -3.943e-02, -1.439e-02, 9.947e-02, 4.965e-02, 1.255e-01));
	r0 += mul(s1_0_1, M4(-7.718e-02, -9.398e-02, -9.579e-02, -9.560e-02, -1.110e-01, 4.013e-01, 8.383e-02, -5.698e-02, -6.633e-02, 4.704e-02, -2.892e-03, -4.429e-02, 8.492e-02, 4.197e-01, 4.072e-01, 5.374e-01));
	r0 += mul(s1_0_2, M4(-3.679e-02, -1.865e-02, -3.528e-02, -2.276e-02, -2.222e-01, -8.961e-02, 1.025e-02, -1.974e-02, -7.364e-02, -1.169e-02, -1.549e-05, -4.239e-04, 1.267e-01, 9.882e-02, 1.694e-01, 1.796e-01));
	r0 += mul(s1_1_0, M4(8.357e-03, -7.872e-01, -1.030e-01, -5.459e-01, 3.528e-02, 4.517e-02, -3.408e-02, 7.630e-03, 1.806e-02, -1.089e-01, 8.709e-02, 9.355e-02, 8.344e-03, -4.723e-02, -2.011e-02, 8.401e-03));
	r0 += mul(s1_1_1, M4(-4.560e-01, -5.009e-01, -3.370e-01, -3.674e-01, 2.050e-01, 2.481e-01, 3.643e-01, 2.694e-01, -1.304e-01, -2.475e-01, -2.549e-01, 1.636e-01, 8.075e-02, -1.297e-01, 1.214e-01, -1.596e-01));
	r0 += mul(s1_1_2, M4(-1.225e-01, -1.590e-01, -1.582e-01, -1.772e-01, 5.644e-01, 6.422e-02, 1.076e-01, -4.627e-02, 3.755e-02, -1.314e-02, -9.316e-05, -3.420e-02, 2.302e-02, 4.054e-02, -1.655e-01, 1.440e-01));
	r0 += mul(s1_2_0, M4(1.189e-01, 7.992e-02, -4.198e-02, -4.331e-02, -1.736e-02, 1.024e-03, -2.617e-02, 8.658e-03, 2.529e-02, -8.629e-03, 2.427e-02, 6.195e-02, -4.743e-02, -5.121e-02, -6.090e-02, -4.809e-02));
	r0 += mul(s1_2_1, M4(-3.887e-01, 3.333e-02, -8.530e-02, -4.271e-01, 7.786e-03, -1.131e-03, 1.316e-02, -2.913e-02, -1.284e-01, 1.264e-01, 6.665e-02, -1.063e-01, -7.595e-02, -9.315e-02, -8.031e-02, -7.209e-02));
	r0 += mul(s1_2_2, M4(-5.246e-01, -1.699e-02, 1.225e-02, -5.392e-02, 2.564e-03, -2.379e-03, 5.930e-03, 1.887e-02, 1.559e-01, 7.335e-03, 5.839e-02, 4.329e-02, -2.319e-01, -1.971e-02, -6.470e-02, 1.731e-02));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.860e-01, 1.997e-01, 1.023e-01, -2.750e-03, 3.046e-02, 2.124e-03, 8.880e-03, 3.688e-03, -1.412e-01, 2.972e-02, -1.909e-01, 1.948e-02, 9.399e-02, -4.406e-02, 1.428e-01, -1.101e-02));
	r0 += mul(s0_0_1, M4(1.013e-01, -1.118e-01, 7.191e-02, 2.343e-02, 1.764e-01, 4.944e-02, 6.866e-02, -3.577e-02, 1.284e-01, 4.044e-01, -1.056e-01, 4.234e-02, -2.760e-01, -3.896e-01, 1.491e-03, -2.171e-03));
	r0 += mul(s0_0_2, M4(-9.265e-03, -3.592e-02, 7.852e-03, -1.623e-02, -3.266e-03, -8.326e-02, 2.863e-02, -2.350e-02, 1.759e-03, 8.738e-02, -9.878e-03, 1.267e-02, -2.130e-03, 6.908e-02, -2.594e-02, 4.306e-03));
	r0 += mul(s0_1_0, M4(1.888e-01, 1.912e-01, -4.034e-01, 4.303e-02, 6.612e-02, 1.892e-03, 1.529e-02, -3.406e-02, -2.300e-01, -4.878e-02, -1.733e-01, -2.970e-02, 1.428e-01, -1.657e-02, 2.397e-01, 5.041e-02));
	r0 += mul(s0_1_1, M4(6.171e-03, 4.377e-02, 1.354e-01, -4.331e-01, -8.027e-01, 5.979e-02, 1.509e-01, 4.385e-01, 2.254e-01, -7.535e-01, 3.428e-01, -1.772e-01, 2.145e-01, 3.369e-01, -6.435e-01, -4.268e-01));
	r0 += mul(s0_1_2, M4(-3.723e-03, -3.577e-02, -1.913e-02, 1.179e-02, 1.882e-02, -1.919e-01, 1.227e-02, 7.864e-02, -1.260e-02, 1.662e-01, -3.106e-03, 1.841e-01, 1.269e-02, 1.189e-01, 1.665e-02, -4.057e-02));
	r0 += mul(s0_2_0, M4(-9.875e-03, -1.687e-03, -7.788e-02, -4.211e-02, 8.570e-04, -6.793e-03, -1.997e-02, -1.619e-02, -3.822e-03, -8.620e-03, 5.744e-02, 1.054e-02, 2.125e-03, 8.209e-03, 5.389e-02, 8.019e-03));
	r0 += mul(s0_2_1, M4(-6.681e-03, -3.082e-02, -2.049e-02, -5.602e-02, 1.053e-02, -1.490e-02, -6.166e-02, 7.984e-02, 2.984e-02, 8.029e-02, 7.592e-02, -8.413e-02, -1.877e-02, -3.073e-02, 1.606e-01, 1.862e-01));
	r0 += mul(s0_2_2, M4(-3.591e-04, 5.404e-06, -2.537e-05, -9.920e-03, -1.386e-03, -1.179e-02, 2.705e-03, 5.309e-02, -8.234e-04, 2.676e-02, -2.509e-03, 1.809e-02, 1.684e-03, -3.510e-03, 5.876e-03, 4.675e-02));
	r0 += V4(-3.357e-10, 1.786e-09, -1.453e-08, 1.582e-11);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
