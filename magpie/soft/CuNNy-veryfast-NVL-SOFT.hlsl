// CuNNy veryfast NVL SOFT - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-SOFT-0000120

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(-4.189e-01, 5.982e-03, 3.645e-01, -3.317e-03) * s0_0_0;
	r1 += V4(1.611e-02, -7.198e-01, -5.397e-02, -8.287e-02) * s0_0_0;
	r0 += V4(3.347e-01, 1.113e+00, -3.895e-03, -6.872e-02) * s0_0_1;
	r1 += V4(-1.413e-02, -3.003e-01, -1.633e-01, -9.448e-02) * s0_0_1;
	r0 += V4(4.749e-02, 4.605e-02, -1.655e-01, 7.177e-02) * s0_0_2;
	r1 += V4(-1.514e-03, 3.491e-02, -6.912e-02, -1.250e-01) * s0_0_2;
	r0 += V4(-4.404e-01, -1.192e-02, -7.504e-01, -2.515e-02) * s0_1_0;
	r1 += V4(1.074e+00, 9.615e-01, -1.090e-01, -2.115e-02) * s0_1_0;
	r0 += V4(5.224e-01, -1.072e+00, 8.566e-01, -1.230e+00) * s0_1_1;
	r1 += V4(-1.036e+00, 2.695e-02, 7.286e-01, -1.801e-02) * s0_1_1;
	r0 += V4(-4.522e-02, -5.117e-02, -1.350e-01, 4.004e-01) * s0_1_2;
	r1 += V4(-4.192e-02, -6.162e-02, -1.057e-01, -8.770e-02) * s0_1_2;
	r0 += V4(-1.516e-01, 8.362e-03, 3.824e-01, 4.368e-02) * s0_2_0;
	r1 += V4(4.687e-02, 7.067e-02, -1.787e-02, -6.219e-02) * s0_2_0;
	r0 += V4(1.052e-01, -5.339e-02, -7.949e-01, 5.847e-01) * s0_2_1;
	r1 += V4(-5.769e-02, -2.945e-04, -2.001e-01, 1.480e-02) * s0_2_1;
	r0 += V4(4.077e-02, 1.803e-02, 2.439e-01, 2.245e-01) * s0_2_2;
	r1 += V4(1.849e-02, -1.803e-02, 8.896e-02, -1.471e-01) * s0_2_2;
	r0 += V4(6.003e-03, -2.150e-03, 4.842e-04, -9.636e-04);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(3.248e-06, 4.482e-03, 9.630e-03, -1.523e-02);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(7.846e-02, 3.704e-02, 3.784e-03, 7.583e-02, -5.528e-03, -5.628e-02, 1.516e-01, 6.518e-02, 1.586e-01, 7.272e-02, -4.166e-01, 9.426e-03, 8.262e-01, -2.065e-01, 4.967e-01, 3.804e-01));
	r1 += mul(s0_0_0, M4(-2.456e-01, 9.533e-03, 1.627e-01, -1.313e-01, 3.194e-01, 6.246e-02, -6.244e-02, -2.658e-01, -8.968e-02, 2.845e-03, 1.377e-01, -9.250e-03, -3.156e-01, 2.770e-01, -3.236e-01, 4.107e-01));
	r0 += mul(s0_0_1, M4(-7.299e-02, -1.329e-02, -2.567e-01, -7.600e-02, 5.068e-02, -4.522e-02, -2.045e-02, 4.911e-02, -7.581e-03, 1.731e-01, -6.819e-01, -1.574e-01, -2.826e-02, 1.127e-01, 4.313e-01, 4.545e-01));
	r1 += mul(s0_0_1, M4(-4.460e-01, -9.517e-02, 1.181e-01, -8.324e-01, -1.559e-02, 1.008e-02, 4.026e-02, 4.365e-01, -8.672e-01, -1.605e-01, -6.607e-03, 3.505e-01, 1.380e-01, 3.089e-01, -6.083e-02, 1.719e-01));
	r0 += mul(s0_0_2, M4(1.447e-01, -4.843e-02, -4.866e-01, -5.388e-02, -1.425e-01, 3.972e-02, 4.727e-03, -5.136e-02, -2.257e-01, 1.715e-01, -5.966e-01, -2.285e-02, -4.550e-02, 4.804e-02, 6.832e-02, 9.985e-02));
	r1 += mul(s0_0_2, M4(1.586e-01, -1.371e-01, 6.098e-02, 3.051e-01, -5.171e-02, -2.074e-02, 2.773e-02, -1.112e-01, -4.439e-01, 1.142e-02, 3.041e-02, -9.622e-02, 5.023e-02, 1.373e-01, 5.491e-02, 1.134e-01));
	r0 += mul(s0_1_0, M4(-1.528e-02, -4.673e-02, 1.870e-01, -2.285e-02, -1.353e-01, -1.000e+00, 6.527e-01, 5.709e-02, -2.451e-02, -1.748e-01, -4.855e-01, 1.390e-01, 1.074e-02, 5.170e-01, 3.865e-01, 4.658e-01));
	r1 += mul(s0_1_0, M4(6.054e-01, -5.282e-02, -9.206e-02, 2.135e-01, 6.855e-01, 1.562e-02, 3.723e-01, -1.000e+00, -2.101e-01, 1.394e-02, 3.160e-02, -2.399e-01, 1.189e-02, -1.656e-01, -4.912e-02, -1.000e+00));
	r0 += mul(s0_1_1, M4(-3.558e-02, 1.392e-01, 4.413e-01, 3.779e-02, 4.583e-01, -1.000e+00, -1.862e-01, -4.249e-01, 2.023e-02, 3.806e-01, -1.000e+00, 1.833e-04, -1.617e-01, -1.000e+00, 3.849e-01, -6.029e-02));
	r1 += mul(s0_1_1, M4(-1.503e-01, 8.483e-02, 1.812e-01, -1.000e+00, 7.647e-01, -4.639e-01, -5.717e-01, 6.617e-01, -5.158e-01, 1.144e-02, -2.902e-01, 2.034e-01, -2.427e-02, 1.902e-01, -8.952e-01, -2.600e-01));
	r0 += mul(s0_1_2, M4(-1.550e-01, 1.835e-03, 1.416e-01, -4.886e-01, 6.519e-02, -9.076e-02, 1.847e-02, -4.851e-02, 5.219e-02, -4.928e-02, -6.898e-01, 7.352e-02, -1.616e-02, -2.493e-02, 9.163e-02, -2.186e-02));
	r1 += mul(s0_1_2, M4(-3.599e-01, -4.985e-01, -4.855e-01, -2.608e-01, -1.770e-03, 3.421e-02, 1.698e-01, -2.663e-02, -9.085e-02, 1.072e-01, -1.609e-01, 1.102e-01, -2.948e-02, -6.761e-03, 3.211e-02, -4.336e-02));
	r0 += mul(s0_2_0, M4(-2.683e-02, 2.644e-02, 1.361e-01, 1.618e-02, -1.196e-02, 6.075e-01, 5.215e-01, 1.072e-01, 1.558e-02, -2.471e-02, -1.149e-01, 9.856e-03, 3.016e-02, -1.412e-02, -8.482e-02, 1.874e-02));
	r1 += mul(s0_2_0, M4(-1.268e-03, 1.195e-02, 7.545e-02, -2.313e-01, 2.036e-01, -1.764e-02, 3.849e-01, -2.884e-01, -2.056e-01, -4.703e-03, 7.488e-03, -4.045e-01, -1.458e-01, -5.177e-02, 2.509e-02, -6.229e-02));
	r0 += mul(s0_2_1, M4(6.463e-02, -1.000e+00, -5.099e-01, 3.850e-02, 1.508e-02, -4.108e-01, 2.433e-01, -8.912e-02, 2.126e-02, 8.110e-02, -4.579e-01, -1.402e-02, -4.266e-02, 9.352e-02, 1.797e-01, 3.316e-02));
	r1 += mul(s0_2_1, M4(3.288e-02, 7.887e-02, -3.180e-01, -1.387e-01, -4.443e-01, 3.116e-01, 9.702e-02, 5.456e-01, -3.507e-01, -4.935e-02, 5.064e-04, -3.155e-02, 1.283e-02, 1.755e-02, 1.107e-02, 1.423e-01));
	r0 += mul(s0_2_2, M4(1.164e-01, -2.985e-01, -7.577e-01, 6.811e-02, -3.032e-02, -6.450e-02, -1.753e-01, -5.639e-02, 5.892e-03, 5.731e-02, -9.010e-02, 3.038e-02, -1.714e-02, -5.277e-04, -3.808e-02, -5.428e-02));
	r1 += mul(s0_2_2, M4(-1.224e-02, -1.550e-01, 6.405e-02, 7.273e-02, -7.606e-02, 2.690e-01, 1.267e-01, -1.765e-01, -7.038e-02, -6.335e-02, -2.119e-02, 5.768e-02, 1.329e-03, -8.338e-06, 3.613e-04, -7.639e-02));
	r0 += mul(s1_0_0, M4(4.275e-02, 5.801e-02, 1.272e-02, -1.309e-02, 1.263e-02, -4.221e-02, 5.342e-02, -2.921e-02, -3.028e-01, 1.201e-01, -6.619e-01, 1.249e-01, 4.867e-02, 5.028e-02, 4.943e-02, 4.863e-02));
	r1 += mul(s1_0_0, M4(3.259e-02, -5.660e-03, 4.133e-02, 1.406e-03, 9.631e-02, -4.574e-03, -1.591e-02, 1.614e-01, -7.639e-01, 1.668e-01, -4.935e-01, -2.342e-01, -2.634e-02, -2.288e-02, -2.376e-02, -2.541e-02));
	r0 += mul(s1_0_1, M4(-1.000e+00, -5.859e-01, 2.783e-01, -1.179e-01, 1.806e-01, 6.140e-02, 9.908e-02, 3.720e-02, 4.269e-01, 1.655e-02, -5.561e-01, -1.978e-01, 1.380e-01, 1.385e-01, 1.413e-01, 1.369e-01));
	r1 += mul(s1_0_1, M4(9.952e-01, -1.073e-02, -7.903e-02, 6.696e-01, -1.377e-01, 5.752e-03, 2.755e-01, 3.399e-01, -4.172e-01, -2.946e-01, -2.320e-01, -8.878e-01, -1.298e-01, -1.195e-01, -1.131e-01, -1.299e-01));
	r0 += mul(s1_0_2, M4(2.457e-01, -1.819e-02, 2.355e-01, 7.152e-02, -2.968e-01, -5.235e-02, 1.472e-01, -1.344e-02, 2.037e-01, -4.676e-02, 2.711e-01, 1.234e-01, -8.449e-02, -8.433e-02, -8.525e-02, -8.810e-02));
	r1 += mul(s1_0_2, M4(7.660e-02, 1.717e-02, 2.241e-01, 1.451e-01, 3.877e-01, 3.330e-02, -7.301e-02, -1.096e-01, 1.669e-01, 1.267e-02, 1.241e-01, 9.614e-03, 8.368e-02, 8.200e-02, 8.529e-02, 8.542e-02));
	r0 += mul(s1_1_0, M4(-4.917e-02, -1.520e-01, -1.465e-01, 6.548e-02, -8.091e-02, -3.878e-02, 2.484e-03, -1.696e-02, -1.745e-01, 1.866e-02, -7.349e-01, -3.150e-01, -9.667e-02, -9.344e-02, -9.474e-02, -9.689e-02));
	r1 += mul(s1_1_0, M4(-7.225e-02, -4.645e-04, 2.715e-02, -1.000e+00, 8.520e-02, -4.793e-03, 3.499e-02, -1.830e-01, -4.499e-01, 6.255e-02, -2.366e-01, 1.857e-01, 5.840e-02, 5.689e-02, 6.225e-02, 5.882e-02));
	r0 += mul(s1_1_1, M4(9.726e-02, -1.000e+00, -3.113e-01, -3.813e-01, -5.164e-01, 2.132e-01, 5.817e-02, 4.571e-02, -1.727e-01, -1.649e-01, 1.000e+00, 4.250e-01, 6.640e-02, 5.426e-02, 5.436e-02, 5.445e-02));
	r1 += mul(s1_1_1, M4(-2.743e-01, -2.214e-01, -5.803e-01, -1.642e-01, -3.158e-01, -1.295e-03, -2.124e-01, -1.892e-01, 6.776e-01, 5.538e-02, 1.000e+00, -1.802e-01, -1.596e-02, 4.713e-05, -5.873e-03, -9.293e-03));
	r0 += mul(s1_1_2, M4(3.514e-01, 1.151e-01, -1.409e-01, 4.026e-02, -3.120e-01, -2.177e-01, -4.014e-01, 2.690e-02, 2.836e-02, 1.908e-01, 4.401e-01, -4.641e-02, 3.462e-03, 7.132e-03, 1.034e-02, 4.828e-03));
	r1 += mul(s1_1_2, M4(-3.868e-01, 7.376e-01, 2.210e-01, 8.244e-02, -4.304e-01, 3.504e-02, -7.312e-02, -3.298e-01, 3.550e-01, -1.261e-01, 4.990e-02, 2.847e-01, 1.953e-02, 2.374e-02, 1.958e-02, 1.863e-02));
	r0 += mul(s1_2_0, M4(2.652e-02, 1.294e-01, 7.886e-02, -4.201e-02, -1.320e-02, -1.481e-01, -1.049e-01, -1.250e-02, -2.480e-02, -1.528e-01, -2.007e-01, -7.217e-02, 9.842e-02, 9.550e-02, 9.412e-02, 9.515e-02));
	r1 += mul(s1_2_0, M4(1.888e-03, -1.617e-03, 2.477e-02, -8.215e-01, 3.106e-02, -6.445e-03, 1.636e-03, -5.206e-01, -3.163e-02, 4.997e-02, 4.170e-02, 4.725e-01, -1.509e-01, -1.481e-01, -1.493e-01, -1.509e-01));
	r0 += mul(s1_2_1, M4(-6.791e-02, 6.306e-01, 3.510e-01, 9.899e-03, 9.434e-02, -1.000e+00, -4.889e-01, -2.011e-01, 5.133e-03, 1.317e-01, 4.499e-01, 2.834e-02, 3.348e-02, 3.007e-02, 3.222e-02, 3.176e-02));
	r1 += mul(s1_2_1, M4(2.088e-01, -1.047e-01, 4.355e-01, -3.894e-01, -1.016e-01, 1.390e-01, -2.332e-01, -3.449e-01, 4.987e-01, 1.150e-01, -1.008e-01, 1.273e-01, -1.556e-02, 3.212e-04, -1.490e-02, -1.646e-02));
	r0 += mul(s1_2_2, M4(-4.116e-02, 4.293e-02, 3.398e-01, -4.464e-02, 1.165e-01, 3.156e-01, -3.193e-01, -1.194e-01, -1.873e-02, -1.172e-01, -4.668e-02, -5.396e-02, -9.274e-02, -9.516e-02, -9.848e-02, -9.975e-02));
	r1 += mul(s1_2_2, M4(-1.295e-01, -7.307e-02, 1.079e-01, 2.605e-01, -5.215e-02, -1.654e-01, 4.021e-02, -7.372e-02, 2.098e-02, -5.626e-02, 3.387e-02, 2.036e-01, -1.217e-01, -1.143e-01, -1.188e-01, -1.197e-01));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.852e-02, 1.773e-03, -2.517e-02, -2.749e-02, 3.403e-01, 2.160e-01, -2.035e-01, 1.371e-02, -1.153e-01, 8.388e-02, 1.102e-01, 7.322e-03, -5.632e-01, -2.251e-01, -2.742e-01, -4.749e-02));
	r0 += mul(s0_0_1, M4(1.101e-01, 9.687e-03, 4.138e-02, -2.265e-02, -1.625e-01, -1.000e+00, -8.305e-01, -7.879e-03, 1.392e-01, 3.042e-02, -3.336e-02, 6.023e-02, 6.714e-02, -1.967e-01, 8.314e-02, -4.675e-02));
	r0 += mul(s0_0_2, M4(-3.331e-02, 3.814e-02, 5.223e-03, 1.447e-02, 1.392e-01, -8.073e-01, -1.811e-02, 1.723e-02, -4.637e-02, -3.911e-03, -5.820e-03, 1.790e-02, 2.751e-04, 1.321e-01, 1.301e-02, 5.891e-02));
	r0 += mul(s0_1_0, M4(4.687e-01, 1.013e-01, 3.324e-02, 7.302e-02, -7.325e-02, -9.206e-01, 7.548e-02, -3.787e-01, 2.097e-01, 8.331e-02, -5.328e-01, 7.251e-02, -2.861e-02, -1.636e-01, -1.440e-01, -3.148e-01));
	r0 += mul(s0_1_1, M4(-5.185e-02, 2.939e-01, 1.454e-01, 1.446e-01, -4.402e-01, 3.069e-02, -3.557e-03, -1.000e+00, 1.240e-01, -6.455e-01, -1.274e-01, -6.327e-01, 1.147e-01, 2.772e-01, 3.428e-01, -2.732e-01));
	r0 += mul(s0_1_2, M4(3.657e-02, 6.365e-02, -7.435e-03, 3.186e-02, -9.855e-02, -1.514e-01, -1.120e-01, -2.035e-01, 4.334e-02, 2.496e-02, 2.825e-02, -1.125e-01, -9.937e-03, 2.349e-01, 2.429e-02, 2.803e-01));
	r0 += mul(s0_2_0, M4(4.779e-02, -1.209e-02, -4.460e-01, 1.111e-01, 4.987e-02, -2.549e-01, -1.213e-01, -2.385e-01, -3.896e-02, 3.760e-02, -1.367e-02, 2.949e-02, -1.886e-02, 3.161e-02, 1.252e-01, 4.234e-02));
	r0 += mul(s0_2_1, M4(8.291e-02, -2.275e-02, 2.822e-01, 2.378e-01, -3.612e-02, -8.904e-02, -1.165e-01, -3.031e-02, 3.927e-02, 2.888e-02, 1.259e-01, 4.886e-03, 1.976e-02, 1.763e-01, 1.136e-01, 3.219e-01));
	r0 += mul(s0_2_2, M4(8.556e-03, 4.072e-02, -3.011e-02, 1.153e-01, 2.767e-02, -6.761e-02, -6.031e-03, -1.121e-01, -3.900e-02, 6.339e-02, 3.494e-03, 1.333e-01, -5.839e-04, 8.374e-02, -8.140e-03, 9.873e-02));
	r0 += mul(s1_0_0, M4(-5.757e-02, -7.304e-03, -6.199e-03, -1.831e-02, 7.065e-01, 1.951e-01, 1.689e-01, 5.094e-02, -8.245e-03, 4.217e-02, -3.603e-02, 1.615e-02, -8.310e-02, 9.734e-02, 2.820e-02, 4.502e-02));
	r0 += mul(s1_0_1, M4(4.048e-02, -2.580e-02, -3.497e-03, 1.746e-02, 3.549e-02, 3.399e-02, -2.550e-02, -5.906e-02, 5.165e-02, -1.602e-02, 9.235e-02, 7.931e-02, -5.973e-02, -1.365e-01, -5.570e-02, -4.815e-02));
	r0 += mul(s1_0_2, M4(-5.282e-02, -1.970e-02, -7.640e-03, 1.661e-03, -1.306e-02, -7.419e-02, -3.166e-02, -2.045e-02, -1.038e-02, 5.220e-02, 3.766e-02, 5.189e-03, -3.139e-02, -1.382e-02, -2.815e-02, -4.603e-02));
	r0 += mul(s1_1_0, M4(5.443e-02, -1.423e-02, -7.252e-02, -2.411e-02, 4.512e-02, 2.553e-01, 3.168e-01, 2.035e-01, -2.617e-02, -5.732e-02, -6.942e-01, -2.420e-02, -3.068e-02, 5.608e-02, 3.695e-02, 4.485e-02));
	r0 += mul(s1_1_1, M4(-1.904e-01, 5.034e-02, 1.203e-01, -8.564e-02, 6.864e-02, 5.961e-02, 5.539e-02, -1.904e-01, -9.648e-02, -4.963e-01, -2.917e-01, -5.059e-01, 8.018e-02, -3.917e-01, -2.726e-01, -3.214e-01));
	r0 += mul(s1_1_2, M4(-1.336e-02, -4.983e-03, -5.509e-02, -1.167e-01, -1.048e-02, 1.343e-02, -2.837e-02, -5.807e-02, -1.135e-02, -2.056e-02, 5.870e-02, -1.909e-02, -1.800e-02, -1.756e-02, 3.689e-02, -8.465e-03));
	r0 += mul(s1_2_0, M4(-3.452e-02, -3.460e-02, 5.615e-03, 1.837e-02, 3.400e-02, 5.992e-02, 1.968e-01, 9.888e-02, -2.428e-02, 1.099e-04, -9.426e-02, 5.010e-03, 3.119e-02, 1.328e-02, 1.217e-02, 4.096e-02));
	r0 += mul(s1_2_1, M4(-1.738e-03, 7.915e-02, 2.481e-01, 1.295e-01, 3.483e-03, 1.163e-01, 7.249e-02, 2.529e-01, -3.263e-02, -8.103e-02, -1.065e-01, -2.269e-01, -3.519e-02, 2.753e-02, -5.012e-02, -1.406e-03));
	r0 += mul(s1_2_2, M4(-3.699e-02, -7.339e-02, -5.641e-02, 2.077e-01, -1.420e-02, 1.701e-02, -2.502e-02, 4.858e-02, 8.610e-04, -2.600e-02, 2.811e-02, -5.178e-02, -3.166e-02, 5.663e-03, -2.850e-02, -3.970e-01));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.712e-03, 1.219e-06, 3.374e-04, 3.060e-04, -7.688e-05, 1.946e-03, -6.488e-03, 2.353e-04, 5.472e-03, 6.294e-04, 6.893e-03, 5.194e-04, -3.098e-02, -1.224e-02, 2.989e-04, -4.653e-03));
	r0 += mul(s0_0_1, M4(-8.264e-03, -9.429e-03, 3.578e-04, -4.488e-04, 8.451e-03, 4.100e-02, -6.113e-03, 5.749e-03, 1.586e-02, -2.356e-04, 6.996e-03, -2.282e-04, -1.157e-01, -7.445e-02, 8.934e-03, 1.028e-02));
	r0 += mul(s0_0_2, M4(-7.731e-03, -7.627e-03, -8.137e-04, 1.458e-04, -2.031e-03, -6.157e-03, 6.384e-03, -1.252e-02, 4.760e-02, 6.668e-02, -2.889e-02, -1.622e-03, -2.228e-02, -5.529e-02, -5.338e-03, -4.680e-03));
	r0 += mul(s0_1_0, M4(-4.191e-03, 2.476e-03, -9.281e-03, -1.451e-03, -3.278e-03, 1.370e-02, 4.305e-02, 1.041e-03, -4.415e-03, -2.274e-03, -1.007e-02, -8.585e-04, 9.720e-02, -3.949e-02, 1.240e-02, -1.941e-03));
	r0 += mul(s0_1_1, M4(3.525e-01, 3.454e-02, 3.090e-02, -1.099e-02, -8.994e-01, -3.517e-01, -1.733e-01, 5.798e-02, -1.256e-01, 2.803e-02, -1.156e-01, 6.122e-04, 3.057e-01, 4.948e-01, -5.683e-01, -2.920e-01));
	r0 += mul(s0_1_2, M4(2.823e-02, 2.819e-01, -2.681e-03, 1.739e-02, 4.004e-02, -2.444e-03, -5.588e-03, 8.548e-02, 3.057e-01, -6.502e-01, 3.504e-01, -3.308e-01, -1.402e-02, 7.788e-02, 9.526e-03, -1.097e-01));
	r0 += mul(s0_2_0, M4(-1.578e-02, 2.638e-06, -1.714e-02, 4.727e-03, -1.876e-02, 1.552e-02, 1.549e-02, 8.664e-03, 9.630e-03, -1.198e-03, 1.516e-02, -2.664e-03, -6.816e-03, 3.105e-03, -3.453e-02, -1.956e-02));
	r0 += mul(s0_2_1, M4(5.086e-02, -3.059e-02, 3.838e-01, 3.297e-02, 5.159e-02, 7.436e-03, -9.351e-02, 6.054e-02, 1.529e-02, -1.444e-03, 1.995e-02, -6.017e-03, -3.162e-02, -2.051e-02, 1.100e-02, 6.714e-02));
	r0 += mul(s0_2_2, M4(-1.739e-02, 4.972e-02, 8.656e-03, 3.213e-01, -6.511e-03, 3.207e-04, 7.142e-03, 6.568e-02, 9.961e-04, 3.499e-02, 1.114e-01, -1.422e-01, 4.757e-03, -2.126e-02, -1.337e-02, -4.042e-02));
	r0 += V4(2.544e-09, -3.785e-10, 2.523e-11, -1.166e-08);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
