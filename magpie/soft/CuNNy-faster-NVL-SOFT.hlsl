// CuNNy faster NVL SOFT - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-SOFT-0000168

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in (1x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(3.107e-02, -2.124e-03, 3.797e-02, -2.500e-02) * s0_0_0;
	r1 += V4(-7.637e-03, -4.120e-02, 1.920e-02, 1.581e-03) * s0_0_0;
	r0 += V4(-3.456e-02, 1.317e-03, -4.862e-02, 3.095e-02) * s0_0_1;
	r1 += V4(-3.721e-04, -1.018e-01, -3.170e-01, 2.240e-01) * s0_0_1;
	r0 += V4(3.904e-02, -8.606e-03, 1.016e-02, -1.319e-02) * s0_0_2;
	r1 += V4(6.785e-03, 1.160e+00, 2.568e-01, -1.695e-02) * s0_0_2;
	r0 += V4(4.357e-01, -2.546e-01, 9.733e-03, 5.180e-01) * s0_1_0;
	r1 += V4(1.012e+00, 9.252e-02, 1.850e-02, 1.342e-01) * s0_1_0;
	r0 += V4(-1.066e+00, 6.723e-01, -1.097e+00, 4.734e-01) * s0_1_1;
	r1 += V4(-9.861e-01, -8.506e-01, -3.880e-01, -1.018e+00) * s0_1_1;
	r0 += V4(-3.125e-02, -1.416e-02, 7.406e-02, 2.155e-02) * s0_1_2;
	r1 += V4(-2.942e-02, -2.607e-01, 4.778e-01, 3.869e-01) * s0_1_2;
	r0 += V4(1.352e-01, -8.569e-02, -5.872e-02, -5.020e-01) * s0_2_0;
	r1 += V4(8.999e-03, -5.110e-02, -6.814e-02, -5.972e-02) * s0_2_0;
	r0 += V4(3.425e-01, -2.252e-01, 1.155e+00, -4.996e-01) * s0_2_1;
	r1 += V4(-2.686e-02, 1.040e-01, -3.124e-01, 3.077e-01) * s0_2_1;
	r0 += V4(-1.584e-02, 2.020e-02, -8.715e-02, -5.237e-03) * s0_2_2;
	r1 += V4(1.899e-02, -5.135e-02, 3.164e-01, -1.438e-01) * s0_2_2;
	r0 += V4(-1.697e-03, 1.187e-03, -1.073e-04, 1.586e-04);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(1.248e-04, -4.071e-03, 4.748e-05, -5.563e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-3.731e-02, 3.309e-02, 1.301e-01, -7.875e-02, 1.991e-02, -4.323e-02, -1.285e-01, 3.714e-01, -1.617e-01, -7.154e-02, -2.242e-01, 1.367e-01, 6.883e-03, -5.108e-02, -2.060e-03, 1.088e-01));
	r1 += mul(s0_0_0, M4(-7.854e-02, -2.532e-01, 6.460e-02, -6.959e-02, 2.122e-01, -6.018e-02, -1.241e-02, 8.130e-02, 3.125e-01, -1.212e-01, 2.029e-02, 6.206e-02, -1.981e-03, 2.422e-02, 1.029e-04, 2.497e-02));
	r0 += mul(s0_0_1, M4(-8.714e-02, 3.857e-01, 2.202e-01, 3.367e-01, 2.272e-01, -3.545e-01, -2.294e-01, -1.262e-01, 6.467e-01, -1.587e-01, -1.632e-01, -1.931e+00, -6.137e-02, -2.544e-02, 3.273e-01, -4.670e-01));
	r1 += mul(s0_0_1, M4(1.504e-01, -1.770e-01, -7.016e-01, 1.308e-01, -6.369e-01, -9.802e-02, 1.187e+00, -3.408e-01, -8.858e-01, -2.494e-01, 2.331e-01, -2.235e-02, -3.883e-01, 7.595e-02, 2.011e-01, -6.845e-03));
	r0 += mul(s0_0_2, M4(1.528e-01, -3.690e-01, -3.326e-01, 7.429e-01, -2.122e-01, 6.265e-01, 4.556e-01, -4.575e-01, -1.195e-03, 2.256e-01, 3.737e-01, -3.545e-01, -3.896e-01, -1.548e-01, -7.382e-01, 1.699e-01));
	r1 += mul(s0_0_2, M4(-1.043e-01, -4.327e-01, 1.010e-01, -2.317e-02, 4.932e-01, 2.109e-01, -9.439e-02, 4.408e-02, -2.043e-01, -3.795e-02, -1.023e-01, -5.060e-02, -3.973e-02, 1.034e-02, -1.547e-02, 1.583e-01));
	r0 += mul(s0_1_0, M4(2.520e-01, -2.849e-02, 4.191e-01, -8.233e-02, -2.271e-02, -4.748e-02, 1.092e-01, -3.193e-01, -1.685e-01, -1.682e-01, -3.127e-01, 1.438e-01, 1.294e-02, -1.021e-02, -2.405e-02, 8.748e-02));
	r1 += mul(s0_1_0, M4(-2.644e-01, 2.964e-01, -1.887e-01, 1.065e-01, -2.095e-01, -3.419e-02, 9.850e-02, -1.636e-01, 1.727e-01, 7.901e-02, 1.913e-02, 4.996e-01, -1.471e-02, 4.339e-02, 2.408e-02, -6.586e-02));
	r0 += mul(s0_1_1, M4(-1.423e-01, -1.207e+00, 4.769e-01, -1.767e-01, 3.616e-02, 5.404e-01, -1.074e+00, 4.865e-01, 4.397e-02, -8.721e-01, -8.939e-02, 2.037e-01, 1.460e-01, 2.507e-01, 5.702e-01, -6.220e-01));
	r1 += mul(s0_1_1, M4(8.424e-02, 6.197e-01, 6.630e-01, 4.197e-01, 6.421e-01, -9.770e-01, -1.074e+00, -9.274e-01, -3.022e-01, 5.219e-01, -9.541e-02, 2.440e-01, 1.187e-02, 4.920e-02, -2.088e-02, -3.843e-01));
	r0 += mul(s0_1_2, M4(-5.035e-02, 4.227e-01, -5.914e-01, 5.268e-02, 1.140e-01, -6.553e-01, 1.096e+00, 1.583e-01, 7.597e-02, 2.297e-02, 3.214e-01, -3.175e-02, -2.078e-01, -2.165e-01, -6.113e-01, -4.295e-01));
	r1 += mul(s0_1_2, M4(6.387e-01, -7.689e-02, 1.164e-01, -2.235e-01, -1.291e+00, -3.022e-02, -5.807e-02, 4.326e-01, -6.595e-02, -1.189e-01, -8.336e-02, -2.571e-02, 3.855e-01, 3.043e-01, 2.607e-01, 1.879e-01));
	r0 += mul(s0_2_0, M4(-2.348e-03, -1.197e-01, 9.035e-02, 2.297e-01, 1.813e-02, 6.645e-02, -2.492e-02, -3.143e-02, -1.654e-02, -8.900e-03, -3.907e-02, -1.629e-01, 1.101e-02, 2.229e-02, 3.011e-02, -3.543e-02));
	r1 += mul(s0_2_0, M4(4.184e-02, -4.643e-02, 1.425e-01, -1.773e-01, -2.325e-02, 9.250e-02, -8.324e-02, 1.591e-02, 3.430e-02, -2.306e-02, -7.263e-02, 1.404e-01, 1.158e-02, -1.068e-02, 4.134e-03, -5.396e-02));
	r0 += mul(s0_2_1, M4(1.730e-01, 8.071e-02, 1.333e-01, 9.047e-02, -2.393e-01, -2.224e-01, -2.357e-01, -5.020e-01, -2.706e-02, 2.862e-02, -4.036e-02, 1.595e-02, 6.519e-02, 1.130e-01, 8.433e-02, 2.631e-01));
	r1 += mul(s0_2_1, M4(-3.468e-01, -6.584e-01, 1.434e-01, -4.140e-01, 2.134e-01, 6.273e-01, -6.295e-02, 1.188e+00, 1.538e-01, -3.893e-02, -1.601e-02, -3.178e-01, 1.395e-02, -1.708e-01, 4.577e-02, -3.838e-01));
	r0 += mul(s0_2_2, M4(1.589e-02, -8.783e-02, -5.677e-02, -3.262e-01, 5.624e-02, 8.601e-02, 2.385e-02, 3.838e-01, 7.757e-03, 7.797e-02, 2.241e-02, 1.363e-01, -2.679e-02, -1.013e-01, -3.674e-02, -1.842e-01));
	r1 += mul(s0_2_2, M4(-4.062e-01, -1.362e-01, -7.647e-02, 3.563e-01, 6.325e-01, 2.941e-01, 1.044e-01, -3.490e-01, 1.929e-01, -2.357e-02, 1.705e-02, -1.807e-01, -2.456e-01, -9.507e-02, -3.574e-02, 1.595e-01));
	r0 += mul(s1_0_0, M4(-2.666e-02, -4.439e-02, -4.473e-02, 8.828e-02, 1.395e-01, -2.263e-03, 4.479e-02, -2.541e-02, 7.446e-02, 7.107e-02, 5.518e-02, -9.731e-02, 1.134e-01, -5.264e-03, 2.542e-03, -1.597e-01));
	r1 += mul(s1_0_0, M4(6.091e-02, 1.111e-01, -8.582e-03, 1.204e-02, 4.068e-02, -9.246e-02, -6.300e-02, -1.168e-02, -6.786e-02, 1.509e-01, -6.243e-02, 8.910e-02, 1.741e-02, 2.412e-01, -1.535e-01, 5.382e-02));
	r0 += mul(s1_0_1, M4(4.192e-02, -3.671e-01, -1.627e-01, -3.228e-01, 1.111e-01, 8.493e-03, 5.097e-02, 5.023e-02, -1.373e-01, -9.801e-02, 1.598e-01, 2.745e-01, -1.755e-01, -2.587e-01, 6.136e-02, 8.027e-01));
	r1 += mul(s1_0_1, M4(1.160e-01, -5.091e-02, 1.617e-01, -1.113e-01, 1.123e-01, -9.023e-02, 3.750e-02, -2.596e-02, 2.913e-01, 7.780e-02, -1.496e-01, -5.725e-02, 2.575e-01, 1.789e-01, -2.985e-02, 8.051e-02));
	r0 += mul(s1_0_2, M4(-1.343e-02, 2.167e-01, 2.796e-01, -5.800e-01, -1.970e-02, 1.861e-02, 5.152e-02, -7.590e-02, 5.883e-02, 4.937e-02, -1.861e-02, 1.482e-01, -8.974e-02, 2.669e-02, 1.851e-02, -7.336e-02));
	r1 += mul(s1_0_2, M4(2.435e-02, 6.858e-02, 4.886e-02, 1.177e-01, -6.135e-02, -2.686e-02, 1.739e-02, 1.258e-03, 2.271e-01, -3.985e-02, 2.665e-02, 7.637e-03, -1.959e-01, 2.919e-01, -8.674e-02, -5.204e-04));
	r0 += mul(s1_1_0, M4(1.747e-02, 5.548e-02, -2.074e-01, 5.380e-02, -5.071e-01, -6.488e-02, -2.724e-01, 4.881e-01, 3.805e-02, 2.409e-01, 1.984e-01, -4.875e-01, -1.600e-01, 3.089e-02, -4.261e-01, -1.704e-01));
	r1 += mul(s1_1_0, M4(1.057e-01, -1.304e-01, -2.551e-02, -2.228e-02, -1.532e-01, -2.078e-02, 8.029e-02, 3.697e-02, 3.052e-01, 2.032e-01, 1.314e-01, -1.028e-01, 3.646e-01, -1.521e-01, 6.613e-02, -2.127e-01));
	r0 += mul(s1_1_1, M4(-5.890e-02, -6.360e-01, -3.686e-01, 5.879e-01, 2.455e-01, -9.682e-02, -1.225e-01, -3.096e-01, -2.785e-01, -3.606e-01, 1.137e-01, -5.403e-01, -1.826e-01, -2.654e-01, 5.715e-02, -3.642e-01));
	r1 += mul(s1_1_1, M4(-2.078e-01, -4.909e-01, 3.259e-02, 1.508e-01, -1.069e+00, -1.340e-01, 9.736e-02, -2.970e-02, -6.104e-01, 1.160e-01, 3.508e-01, -2.637e-01, -1.534e-01, -1.020e-01, -7.802e-02, -1.687e-01));
	r0 += mul(s1_1_2, M4(4.791e-01, 3.184e-01, 2.081e-01, -1.394e+00, -1.431e-02, -8.967e-02, -5.934e-03, 8.232e-02, 4.920e-02, 6.056e-02, -6.234e-02, -2.526e-01, -1.149e-01, -2.315e-01, -1.848e-01, -2.150e-03));
	r1 += mul(s1_1_2, M4(-1.423e+00, -2.044e-01, -3.994e-01, 3.824e-01, 7.438e-02, -3.289e-02, 1.594e-02, -2.289e-02, -1.353e-01, 4.239e-02, 1.083e-02, 3.582e-02, -9.905e-02, 1.721e-01, 7.281e-02, -9.915e-02));
	r0 += mul(s1_2_0, M4(-7.642e-02, 3.187e-02, -9.088e-02, -1.453e-01, -4.743e-02, -3.157e-02, -2.640e-01, 4.153e-01, -7.542e-02, -1.919e-01, -1.691e-01, 6.168e-02, 3.590e-02, 1.473e-01, -8.459e-02, 2.632e-01));
	r1 += mul(s1_2_0, M4(4.734e-02, 2.328e-02, -1.422e-02, 9.581e-02, 1.194e-01, -4.796e-02, -3.658e-03, 3.095e-01, 1.891e-02, -9.289e-02, 2.845e-02, 4.882e-01, 1.493e-01, 4.343e-03, -3.265e-02, -1.594e-01));
	r0 += mul(s1_2_1, M4(5.909e-02, 1.124e-01, 8.867e-02, 5.547e-02, 5.334e-02, 3.810e-01, 6.646e-02, 4.481e-01, 4.918e-02, -1.275e-01, -4.340e-02, -1.350e-02, -1.188e-01, -2.373e-01, 3.601e-02, -7.602e-02));
	r1 += mul(s1_2_1, M4(2.222e-01, 1.317e-02, 2.430e-02, -8.069e-01, 2.531e-01, -8.982e-02, -1.070e-01, -8.299e-02, -2.103e-01, 6.961e-02, 2.392e-03, -1.793e-03, -3.939e-02, -5.170e-02, -1.187e-01, 5.751e-01));
	r0 += mul(s1_2_2, M4(9.569e-02, 4.928e-01, 2.336e-01, 3.308e-01, 5.003e-02, 1.926e-02, 1.747e-02, 4.516e-02, 8.062e-03, -1.725e-02, 7.600e-02, 8.699e-02, -5.954e-02, -5.336e-02, 2.778e-02, 1.596e-01));
	r1 += mul(s1_2_2, M4(5.787e-01, -4.755e-02, 5.485e-03, -3.575e-01, -3.591e-02, -6.650e-02, -5.627e-02, 1.013e-02, 3.853e-02, -5.251e-02, -1.657e-03, -1.209e-02, 1.198e-01, -1.310e-01, 2.453e-02, -4.280e-02));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2 (8x8)
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(6.481e-03, 4.360e-02, -8.328e-02, -1.994e-02, -1.725e-02, 7.938e-02, -2.832e-01, 1.394e-01, 3.465e-02, -2.804e-02, 9.412e-02, 4.795e-02, -1.003e-02, -6.797e-02, -8.968e-02, -6.553e-02));
	r1 += mul(s0_0_0, M4(7.341e-03, -1.014e-01, 3.814e-02, 1.842e-02, 1.038e-01, 1.948e-02, 2.653e-01, 2.580e-01, -5.198e-02, -2.503e-02, -5.004e-02, -9.728e-02, 7.219e-03, 8.188e-02, 2.759e-02, 1.305e-02));
	r0 += mul(s0_0_1, M4(-5.967e-02, -3.923e-02, -1.842e-01, 8.239e-02, -1.478e-02, -9.005e-02, -9.256e-01, 5.104e-01, 4.362e-02, 2.028e-02, -1.353e-01, -3.448e-01, -8.778e-03, -4.759e-03, 3.962e-01, -3.877e-01));
	r1 += mul(s0_0_1, M4(-4.217e-02, -1.369e-01, -1.397e-01, -3.897e-02, -2.399e-02, -4.746e-02, -1.251e-01, 2.824e-02, 3.001e-02, 1.783e-02, 7.815e-02, -7.619e-02, 8.001e-03, 1.375e-01, -2.289e-02, 8.001e-03));
	r0 += mul(s0_0_2, M4(-2.752e-02, -2.822e-02, 9.935e-02, -1.788e-02, -2.374e-02, -2.405e-02, -5.270e-02, 9.378e-02, -1.115e-02, 9.995e-04, -1.054e-01, -3.494e-02, 6.708e-02, -1.679e-01, 2.893e-03, -1.372e-01));
	r1 += mul(s0_0_2, M4(-2.377e-02, -1.799e-02, -3.359e-02, -3.019e-02, -1.789e-02, -6.328e-02, -3.249e-02, 4.008e-02, -1.879e-03, 2.480e-02, 2.879e-03, -3.174e-02, -2.674e-02, -1.154e-02, 9.363e-02, -6.030e-02));
	r0 += mul(s0_1_0, M4(-1.987e-02, 8.396e-03, -2.037e-01, 8.633e-02, 4.066e-02, 5.737e-01, -6.260e-02, 1.752e-01, 1.972e-02, 6.051e-01, -1.406e-01, -2.361e-01, 3.018e-02, 2.069e-02, -4.124e-02, -3.881e-02));
	r1 += mul(s0_1_0, M4(1.133e-02, 1.440e-01, 1.548e-02, 2.288e-02, 2.552e-01, -1.013e-01, 2.017e-01, 3.779e-01, -7.249e-02, 1.264e-01, -6.861e-02, -1.243e-01, 5.237e-02, -2.089e-01, 2.800e-02, 4.283e-02));
	r0 += mul(s0_1_1, M4(-2.624e-01, -7.433e-01, -1.636e-01, -2.767e-01, -1.774e-01, 2.336e-02, 2.018e-02, -4.786e-01, -4.822e-02, -1.948e-01, 6.443e-02, -5.147e-03, 1.657e-01, 8.077e-02, -2.003e-01, 2.093e-01));
	r1 += mul(s0_1_1, M4(1.522e-01, 7.485e-02, 5.838e-01, 6.972e-01, -1.174e-01, -1.145e-01, -9.703e-02, -3.761e-01, 3.282e-01, -4.284e-02, -1.802e-01, 1.282e-01, -2.300e-01, -4.734e-01, -2.344e-01, -3.607e-01));
	r0 += mul(s0_1_2, M4(-5.261e-02, 4.310e-02, -1.003e-01, -4.252e-01, -2.409e-03, -1.413e-02, 2.964e-02, 6.818e-02, -2.245e-03, 9.369e-03, -5.431e-02, 1.223e-02, -1.669e-01, -1.763e-01, 1.355e-01, 2.943e-01));
	r1 += mul(s0_1_2, M4(-1.526e-01, -5.848e-02, 5.095e-02, -9.102e-02, 7.211e-02, 1.025e-02, -3.167e-02, 2.791e-02, -1.866e-02, -2.508e-02, -3.582e-02, -2.135e-03, 1.270e-01, -2.871e-03, 2.170e-03, 8.355e-02));
	r0 += mul(s0_2_0, M4(-6.621e-02, 1.278e-01, 9.734e-02, -5.496e-02, -2.608e-02, 7.349e-03, 6.200e-02, -1.089e-02, 2.050e-01, 5.955e-02, 6.590e-02, -5.721e-02, -1.834e-02, 1.809e-02, 5.247e-02, 4.630e-02));
	r1 += mul(s0_2_0, M4(2.188e-02, 3.326e-02, 2.423e-02, 3.551e-02, 3.096e-02, 8.232e-02, 1.356e-02, 2.708e-02, 3.193e-02, -1.512e-01, 2.994e-02, 4.284e-02, -1.977e-03, 1.988e-02, -5.299e-03, -1.662e-02));
	r0 += mul(s0_2_1, M4(-8.534e-03, -1.737e-02, 1.130e-01, -3.232e-01, 8.673e-02, 6.448e-02, -4.906e-02, 1.281e-01, -3.917e-01, -3.213e-02, -5.522e-02, -1.798e-01, -2.007e-01, -4.333e-02, 9.363e-02, -1.704e-01));
	r1 += mul(s0_2_1, M4(1.991e-02, -2.208e-02, 1.548e-02, -1.387e-02, -7.202e-02, -4.055e-02, -1.347e-02, 1.282e-02, 1.945e-02, -1.331e-01, 4.949e-02, -7.515e-02, -3.835e-02, -1.204e-01, -3.487e-03, 9.918e-03));
	r0 += mul(s0_2_2, M4(2.162e-02, -3.184e-02, 9.681e-02, -1.178e-01, -2.684e-02, 4.258e-03, -7.473e-02, 6.848e-02, -2.530e-02, 1.581e-02, 3.787e-03, -1.107e-02, 6.714e-02, -6.834e-02, 2.484e-02, -1.832e-01));
	r1 += mul(s0_2_2, M4(-1.210e-01, 1.418e-02, -2.114e-02, -9.218e-03, 2.229e-02, -1.605e-02, 1.771e-02, -8.897e-03, -7.199e-03, -1.077e-02, 1.084e-02, -1.437e-02, 4.201e-02, -2.044e-01, 4.712e-04, 2.278e-02));
	r0 += mul(s1_0_0, M4(-7.966e-03, 2.809e-02, -2.667e-01, 5.406e-02, -1.613e-02, -2.150e-02, -9.559e-02, -5.796e-02, 2.666e-03, -2.049e-02, 6.659e-02, -5.437e-02, -6.556e-03, 1.967e-02, 9.167e-02, 3.019e-02));
	r1 += mul(s1_0_0, M4(-1.720e-02, -1.416e-02, -3.019e-02, -2.241e-02, -1.297e-02, 1.967e-02, -3.146e-02, -1.994e-02, 8.994e-04, -1.108e-02, -1.133e-02, -8.178e-03, 2.210e-03, 5.976e-02, 3.793e-02, 1.271e-02));
	r0 += mul(s1_0_1, M4(-8.323e-02, -5.701e-02, -4.467e-01, 1.981e-01, 1.026e-02, 1.367e-01, 2.279e-01, -1.488e+00, 1.064e-02, -2.034e-03, 3.268e-02, -3.057e-01, 3.439e-02, -4.386e-01, -1.353e-01, -1.113e-01));
	r1 += mul(s1_0_1, M4(-1.238e-01, -7.325e-02, -1.714e-01, -2.239e-01, 1.086e-01, 8.570e-02, 1.244e-01, 2.388e-01, -3.477e-02, -2.056e-02, -8.191e-02, -1.137e-01, -2.056e-01, -4.649e-01, -1.763e-01, -4.287e-01));
	r0 += mul(s1_0_2, M4(-5.628e-03, 3.592e-02, 3.101e-02, -1.553e-02, 3.020e-03, -3.962e-02, -2.484e-01, 9.268e-02, -9.979e-03, -2.825e-02, 5.592e-02, -1.404e-01, 1.032e-01, 2.028e-01, 4.681e-03, -1.719e-02));
	r1 += mul(s1_0_2, M4(1.223e-03, -2.230e-03, -2.769e-02, 2.522e-02, 2.836e-02, 3.680e-02, 2.451e-01, 1.838e-02, -5.696e-02, 8.076e-03, -4.601e-02, -1.016e-01, 6.892e-02, 1.518e-01, 6.808e-02, -1.141e-01));
	r0 += mul(s1_1_0, M4(-5.871e-02, -2.155e-01, -1.363e-01, -4.015e-01, -8.376e-02, -2.634e-01, 5.437e-02, -5.493e-03, 2.433e-02, -1.263e-01, 9.152e-02, -1.546e-02, -9.404e-03, 7.202e-02, -6.822e-02, -1.598e-03));
	r1 += mul(s1_1_0, M4(-7.141e-02, -5.812e-01, -1.315e-01, -1.909e-01, -1.106e-02, -2.697e-02, -5.408e-03, -4.380e-02, 2.944e-03, 4.377e-02, -3.277e-02, 2.152e-03, 1.850e-02, 1.466e-01, 3.202e-03, 4.550e-02));
	r0 += mul(s1_1_1, M4(-1.712e-01, -3.903e-01, -3.105e-01, -4.351e-01, 3.680e-01, 5.704e-02, -2.583e-01, 1.954e-01, -4.852e-02, 2.432e-02, 3.752e-01, -4.409e-01, -2.898e-01, -8.142e-02, 9.401e-02, -1.850e-01));
	r1 += mul(s1_1_1, M4(-1.189e-01, -4.398e-01, -1.423e-01, -1.865e-01, 7.542e-02, -7.037e-01, -2.855e-02, -7.778e-02, 3.224e-01, -1.127e-01, 2.546e-01, 4.678e-01, -3.999e-02, 7.877e-01, 5.307e-02, 7.133e-02));
	r0 += mul(s1_1_2, M4(9.545e-02, 5.244e-02, -1.399e-01, -2.160e-01, -2.744e-01, 1.867e-03, -2.329e-01, -9.407e-02, -2.079e-01, 9.909e-03, 1.094e-01, 3.136e-01, 3.129e-01, 1.762e-02, 1.769e-01, 2.162e-01));
	r1 += mul(s1_1_2, M4(-6.079e-02, -4.427e-02, -3.905e-02, -5.126e-02, -1.158e-01, -3.565e-01, -4.347e-02, -7.111e-02, -7.374e-02, 6.033e-02, -1.879e-01, 1.106e-01, 9.137e-02, 3.130e-01, -8.166e-03, 3.341e-02));
	r0 += mul(s1_2_0, M4(-1.326e-01, -6.246e-02, -1.419e-02, -2.271e-01, -2.139e-03, 7.046e-03, -1.645e-02, -2.028e-02, 1.236e-01, 2.365e-02, -4.157e-02, 1.167e-01, 2.842e-02, 1.848e-02, 1.220e-02, 7.685e-02));
	r1 += mul(s1_2_0, M4(-1.453e-02, -1.217e-01, -3.590e-03, -7.204e-03, 4.835e-03, 6.704e-02, 5.510e-03, 7.906e-03, -1.628e-02, -1.686e-01, 7.577e-03, 1.873e-03, 8.808e-04, -4.055e-02, -1.904e-03, -1.541e-02));
	r0 += mul(s1_2_1, M4(-3.723e-01, -1.493e-01, -4.275e-02, -4.162e-01, -1.724e-01, -5.099e-02, 4.930e-02, -1.577e-01, 6.198e-01, -1.178e-01, -2.174e-01, 2.355e-01, 1.364e-01, -4.995e-03, -3.851e-02, 1.656e-01));
	r1 += mul(s1_2_1, M4(-5.694e-03, -1.375e-01, -3.104e-02, -5.747e-02, 2.573e-02, 1.671e-01, 2.324e-02, 4.976e-02, -1.510e-02, -7.915e-01, -6.372e-02, -9.439e-02, -2.172e-02, -2.222e-01, -2.090e-02, -4.813e-02));
	r0 += mul(s1_2_2, M4(-2.074e-02, 3.139e-02, -6.219e-02, -3.519e-02, -5.546e-02, 1.805e-02, 6.094e-03, -6.746e-02, -3.122e-02, -3.941e-02, -1.754e-02, 2.287e-01, 1.002e-02, 6.562e-03, -4.903e-03, 6.013e-02));
	r1 += mul(s1_2_2, M4(-1.439e-02, 4.821e-02, -9.074e-03, 1.494e-02, -1.328e-02, 1.237e-01, -8.804e-03, -1.151e-02, 9.620e-03, -4.606e-02, 4.470e-03, -4.396e-02, -2.448e-03, -8.405e-02, 2.974e-03, 4.312e-03));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle (8x4)
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.226e-01, -1.178e-02, 2.224e-02, 1.109e-03, 1.059e-02, -2.412e-03, 1.028e-02, -6.854e-04, 2.734e-03, 5.155e-03, 2.283e-03, -6.557e-04, -2.357e-02, 1.153e-02, -7.578e-03, 8.492e-04));
	r0 += mul(s0_0_1, M4(-3.917e-01, 3.564e-01, -5.789e-03, 2.652e-03, -1.400e-01, 8.014e-02, 1.198e-02, -1.400e-02, -2.940e-03, -1.308e-02, -4.537e-04, 5.953e-03, -1.208e-01, -6.957e-02, 4.926e-03, 2.538e-02));
	r0 += mul(s0_0_2, M4(-7.202e-03, -1.927e-01, -1.529e-02, -5.054e-02, 4.494e-03, 1.260e-02, 4.679e-03, 1.624e-03, -5.888e-04, 2.000e-03, -7.749e-04, -7.147e-04, 8.390e-03, -5.214e-02, -4.569e-03, 8.601e-03));
	r0 += mul(s0_1_0, M4(1.776e-02, 4.826e-04, 1.129e-01, -1.289e-03, 5.464e-02, 5.109e-03, 8.653e-02, -1.347e-03, -2.624e-02, 3.527e-02, 9.365e-03, -5.237e-03, -2.650e-02, -1.839e-02, -1.463e-01, 2.464e-02));
	r0 += mul(s0_1_1, M4(1.647e-02, -1.808e-02, -1.193e-01, 3.793e-01, -3.916e-01, 2.729e-01, -5.879e-01, 3.116e-01, -8.072e-03, -1.996e-01, -1.081e-02, -1.609e-02, 3.779e-01, 2.941e-01, -1.393e-01, -4.872e-01));
	r0 += mul(s0_1_2, M4(3.383e-03, -3.700e-02, -3.849e-03, -6.860e-02, 3.255e-04, 1.655e-01, 6.074e-04, 1.101e-01, 3.196e-03, 6.856e-02, 9.501e-03, 1.100e-02, -6.415e-03, 2.627e-02, -1.681e-02, 6.002e-02));
	r0 += mul(s0_2_0, M4(2.046e-07, -1.369e-07, -1.053e-06, -2.318e-04, 1.345e-02, -1.275e-03, -1.034e-02, 5.067e-04, 8.855e-02, -2.850e-03, 1.685e-01, -1.643e-03, -2.610e-03, 3.869e-04, 7.795e-02, 2.444e-04));
	r0 += mul(s0_2_1, M4(-2.803e-05, 3.522e-07, -1.982e-03, 8.457e-04, 1.040e-03, -8.560e-04, -4.312e-02, 1.641e-02, 1.713e-01, 2.705e-01, -5.493e-01, -1.372e-01, -4.214e-05, -2.896e-03, 6.055e-02, 1.372e-01));
	r0 += mul(s0_2_2, M4(2.788e-05, 5.858e-07, 1.943e-03, -1.028e-03, 1.399e-03, -2.168e-02, 4.197e-03, 7.468e-03, -3.737e-02, -2.636e-03, 5.076e-02, -7.757e-02, -1.448e-04, -4.643e-03, -2.230e-03, 8.391e-04));
	r0 += mul(s1_0_0, M4(1.356e-02, -9.731e-03, -1.517e-02, -1.039e-03, 3.869e-02, -2.032e-04, 1.044e-04, 1.203e-04, -2.835e-03, 4.331e-04, -2.444e-05, 1.090e-04, -1.070e-02, -1.889e-03, 6.734e-03, 7.992e-04));
	r0 += mul(s1_0_1, M4(3.278e-02, -4.175e-02, -7.058e-03, 1.247e-02, 1.052e-01, 9.888e-02, -4.507e-03, -7.768e-04, 1.969e-04, -1.806e-03, 2.953e-05, 4.940e-04, -5.460e-03, 3.094e-02, 1.682e-03, -6.468e-03));
	r0 += mul(s1_0_2, M4(7.489e-04, -5.632e-03, -3.503e-03, -1.692e-02, -1.072e-03, 3.528e-02, 1.292e-03, 9.251e-05, -9.475e-05, 2.754e-04, -1.193e-06, -6.753e-04, 2.404e-04, -4.684e-04, 4.193e-04, 3.423e-03));
	r0 += mul(s1_1_0, M4(4.426e-01, 2.034e-02, 4.211e-01, -2.184e-03, 2.547e-02, -6.559e-03, 8.756e-02, -1.194e-02, 2.486e-01, 9.924e-02, 4.820e-03, -3.463e-04, -5.059e-01, -8.229e-02, -2.433e-01, 2.309e-03));
	r0 += mul(s1_1_1, M4(-2.662e-02, -3.527e-01, 3.875e-03, -4.326e-01, -3.983e-01, -2.881e-01, 3.857e-01, 3.975e-01, 1.209e-01, 2.803e-01, -3.461e-04, 1.148e-02, 2.811e-01, -4.399e-01, 8.410e-02, 1.322e-01));
	r0 += mul(s1_1_2, M4(-7.286e-04, 4.014e-02, -1.545e-03, 5.994e-02, 9.622e-03, -3.614e-02, -3.249e-02, 1.812e-02, 2.162e-04, 4.660e-03, -4.382e-03, -1.116e-02, -3.916e-03, 1.238e-01, 1.017e-02, 3.477e-02));
	r0 += mul(s1_2_0, M4(-3.185e-02, -9.803e-03, -1.137e-02, 3.817e-03, 1.002e-02, 5.114e-04, -5.309e-02, 7.459e-03, 2.432e-03, -6.592e-03, -4.756e-01, 1.711e-02, -2.423e-02, 1.711e-02, 2.171e-01, -1.370e-02));
	r0 += mul(s1_2_1, M4(5.371e-03, 6.236e-03, 4.611e-03, -1.510e-02, -2.450e-03, -9.357e-03, -1.115e-01, -6.323e-02, -6.420e-03, -4.070e-02, 1.033e-01, -5.259e-01, -5.280e-03, 1.863e-02, 2.493e-01, 9.580e-02));
	r0 += mul(s1_2_2, M4(2.248e-04, -2.701e-02, 5.527e-03, -3.870e-02, -4.685e-04, -2.261e-03, 9.008e-03, -5.660e-02, -5.736e-04, 4.796e-02, -2.615e-02, 1.122e-01, -8.952e-04, 2.794e-02, 3.445e-03, 8.821e-02));
	r0 += V4(-2.728e-08, 1.317e-08, -6.389e-09, 1.713e-08);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
