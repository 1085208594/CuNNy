// CuNNy faster NVL SOFT - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-SOFT-0000168

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(1.604e-01, 1.359e-02, 1.424e-02, 5.019e-04) * s0_0_0;
	r1 += V4(5.264e-03, 2.282e-01, -2.319e-01, 8.599e-02) * s0_0_0;
	r0 += V4(-7.332e-02, -2.026e-02, -4.602e-02, 1.098e+00) * s0_0_1;
	r1 += V4(2.986e-03, 3.704e-01, 2.996e-01, 4.232e-01) * s0_0_1;
	r0 += V4(-2.479e-02, 1.361e-02, 3.472e-02, 3.671e-02) * s0_0_2;
	r1 += V4(-5.080e-03, 6.075e-01, 4.633e-03, 2.147e-02) * s0_0_2;
	r0 += V4(1.961e-01, 1.120e+00, 4.734e-04, 8.748e-03) * s0_1_0;
	r1 += V4(-5.277e-02, -2.842e-01, 9.657e-02, 2.324e-01) * s0_1_0;
	r0 += V4(-7.843e-01, -1.082e+00, -1.051e+00, -1.070e+00) * s0_1_1;
	r1 += V4(-1.009e+00, -8.487e-02, -9.941e-01, -1.251e+00) * s0_1_1;
	r0 += V4(-7.884e-03, -2.532e-02, -6.128e-02, -2.759e-02) * s0_1_2;
	r1 += V4(1.043e+00, -4.365e-01, 8.459e-01, 1.288e-01) * s0_1_2;
	r0 += V4(1.013e-01, 2.494e-02, -1.369e-02, -2.011e-03) * s0_2_0;
	r1 += V4(5.504e-02, 7.143e-02, 5.289e-01, -1.273e-01) * s0_2_0;
	r0 += V4(2.026e-01, -4.553e-02, 1.099e+00, -3.745e-02) * s0_2_1;
	r1 += V4(-8.782e-02, -2.931e-01, -4.561e-01, 6.035e-01) * s0_2_1;
	r0 += V4(4.729e-02, 7.114e-03, 2.126e-02, -3.594e-03) * s0_2_2;
	r1 += V4(4.356e-02, -1.758e-01, -9.921e-02, -1.212e-01) * s0_2_2;
	r0 += V4(1.423e-02, -2.715e-03, -3.028e-05, 1.216e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(3.782e-03, 2.007e-02, -1.555e-03, -1.204e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-2.339e-02, 5.019e-01, -3.023e-02, 1.686e-02, 5.348e-02, -1.169e-01, -7.742e-02, -2.511e-02, 1.411e-01, -4.443e-01, -1.478e-01, -4.714e-03, 2.286e-02, 1.474e-02, 2.036e-02, -4.139e-02));
	r1 += mul(s0_0_0, M4(5.533e-03, -6.899e-02, -2.640e-01, 3.685e-02, 2.959e-02, -2.101e-02, -2.507e-02, 6.068e-02, 1.655e-01, -4.739e-03, -2.767e-02, 3.417e-01, -1.931e-02, -2.336e-01, -2.185e-01, -1.995e-03));
	r0 += mul(s0_0_1, M4(-7.211e-03, -2.061e-01, -1.377e-01, -5.716e-02, -6.367e-02, 2.632e-01, -5.742e-03, 9.674e-02, -4.369e-01, 1.000e+00, 1.753e-01, 3.571e-01, -1.917e-02, 5.006e-01, 1.554e-01, 4.564e-02));
	r1 += mul(s0_0_1, M4(-2.247e-02, -2.988e-02, -2.408e-01, -6.380e-02, 1.052e-01, -6.932e-02, -1.266e-01, 7.602e-02, 3.858e-01, -3.693e-01, -1.000e+00, 3.702e-01, 5.755e-02, -1.844e-01, -4.207e-01, 5.094e-02));
	r0 += mul(s0_0_2, M4(1.693e-03, -2.403e-02, -3.287e-02, 8.158e-02, 1.410e-02, 6.973e-01, 1.685e-01, 7.508e-02, -9.857e-02, -4.294e-02, -1.317e-01, -4.616e-02, -5.589e-02, 2.150e-01, -2.225e-02, -2.171e-02));
	r1 += mul(s0_0_2, M4(2.582e-02, -6.031e-02, 1.023e-01, -1.679e-03, 4.565e-02, -8.190e-02, -3.087e-01, -4.742e-02, 2.207e-02, 3.035e-01, 7.910e-02, -1.176e-02, -9.584e-03, 1.497e-01, -3.841e-01, 5.791e-02));
	r0 += mul(s0_1_0, M4(-6.716e-02, -1.629e-01, 2.041e-01, -1.071e-01, -4.936e-03, 1.871e-01, -1.559e-01, 3.552e-02, 1.255e-01, 1.587e-01, -2.656e-01, 9.333e-02, 6.896e-02, 2.629e-01, -1.922e-01, 9.014e-02));
	r1 += mul(s0_1_0, M4(-1.289e-01, -1.660e-01, 1.493e-01, -2.426e-01, 3.277e-03, 1.081e-01, -2.511e-01, 4.060e-02, 4.713e-04, -1.728e-01, -3.328e-01, 3.096e-01, -1.431e-01, -1.928e-01, -4.497e-01, -9.719e-02));
	r0 += mul(s0_1_1, M4(-3.237e-02, 2.640e-02, -2.941e-01, -1.741e-01, 3.373e-01, -6.126e-01, 4.217e-01, -6.745e-02, 2.341e-01, 1.862e-03, 1.935e-01, 2.717e-01, 7.722e-01, -2.596e-01, 6.315e-01, 6.972e-02));
	r1 += mul(s0_1_1, M4(1.927e-01, -2.828e-01, 3.125e-01, 3.486e-01, -8.114e-01, -1.000e+00, 4.170e-01, -9.353e-01, -1.079e-01, -1.000e+00, 5.380e-01, -5.138e-01, -2.079e-01, -1.000e+00, 6.959e-01, -1.901e-01));
	r0 += mul(s0_1_2, M4(-7.603e-03, 2.402e-03, -8.664e-02, 2.217e-02, -9.082e-02, -1.000e+00, -1.598e-01, 7.520e-01, -3.028e-02, 1.537e-01, -4.914e-02, 2.304e-01, 4.075e-02, -1.450e-01, 2.256e-01, 1.585e-01));
	r1 += mul(s0_1_2, M4(7.288e-02, 1.886e-01, 8.157e-02, 1.148e-01, 1.203e-01, -8.192e-02, -4.128e-01, 9.927e-02, -2.268e-02, -1.227e-02, -3.381e-01, -3.140e-01, -7.446e-02, -2.079e-01, -3.858e-01, 4.501e-02));
	r0 += mul(s0_2_0, M4(1.083e-02, -3.673e-01, 2.833e-01, 5.467e-03, 7.602e-04, 2.977e-01, -6.417e-03, 3.152e-02, -1.357e-02, 4.640e-01, -8.814e-02, -4.949e-02, 5.903e-03, 5.449e-01, -1.985e-01, 1.638e-02));
	r1 += mul(s0_2_0, M4(4.804e-02, -2.024e-01, 4.986e-01, -1.811e-01, -7.227e-02, -1.162e-02, -2.559e-01, 1.189e-01, -6.652e-02, 4.512e-02, -2.871e-01, 7.412e-03, -1.426e-01, -4.501e-02, -2.383e-01, -3.906e-03));
	r0 += mul(s0_2_1, M4(3.479e-02, 4.816e-01, 2.117e-01, 1.260e-01, 3.474e-02, 5.100e-01, 7.689e-02, -3.870e-02, 7.443e-03, 1.761e-01, -6.218e-02, -1.111e-01, 9.354e-03, -5.406e-01, -2.803e-01, -1.372e-01));
	r1 += mul(s0_2_1, M4(-2.591e-01, -1.989e-01, 1.066e-01, 1.413e-01, 2.494e-03, -8.643e-02, -4.600e-01, -6.070e-02, 3.802e-02, -7.983e-02, -2.368e-01, -8.913e-02, 1.596e-01, 1.392e-01, -6.003e-01, -1.960e-01));
	r0 += mul(s0_2_2, M4(1.217e-04, -3.043e-01, 9.252e-02, 1.038e-01, -1.956e-02, 5.099e-02, -3.208e-02, -8.898e-03, -7.461e-03, -3.648e-02, -7.543e-02, -6.625e-02, -3.372e-02, -1.449e-01, -6.863e-02, -3.860e-02));
	r1 += mul(s0_2_2, M4(-2.729e-02, -1.613e-01, -9.866e-02, 1.249e-01, 9.388e-02, 2.103e-01, -1.863e-01, -2.129e-01, 4.479e-02, 1.914e-01, -1.035e-01, -6.945e-02, -5.897e-02, -9.915e-02, -4.024e-02, -3.149e-02));
	r0 += mul(s1_0_0, M4(-1.839e-02, 1.661e-01, 1.707e-01, -1.124e-02, -3.376e-02, 9.609e-02, -3.371e-02, 4.631e-02, 4.515e-02, 2.809e-02, 1.312e-02, 4.615e-02, -3.733e-02, -1.488e-02, 8.572e-02, 4.194e-02));
	r1 += mul(s1_0_0, M4(-1.579e-03, -1.432e-01, -1.985e-01, 2.264e-02, 2.144e-02, 2.416e-01, 7.365e-02, 5.508e-02, 1.408e-01, -2.558e-02, 9.269e-02, 1.039e-01, -4.559e-02, 2.594e-01, 4.449e-01, -9.753e-02));
	r0 += mul(s1_0_1, M4(1.601e-01, 1.279e-01, 2.175e-01, -1.735e-01, -4.042e-04, -2.138e-01, -1.489e-01, -2.927e-02, -2.881e-01, -1.658e-01, -2.787e-01, 1.257e-01, 1.382e-01, -8.009e-01, -1.354e-01, -1.042e-01));
	r1 += mul(s1_0_1, M4(-2.973e-03, -3.333e-01, 3.030e-03, -9.906e-03, -5.482e-02, -1.016e-01, 6.125e-02, -1.517e-01, 3.134e-02, 1.858e-01, 2.258e-02, -1.857e-01, -7.628e-02, 3.733e-01, 9.553e-01, 1.070e-01));
	r0 += mul(s1_0_2, M4(4.284e-03, 1.952e-02, 1.818e-02, -1.452e-02, 1.010e-02, 9.148e-02, 4.275e-02, 1.183e-02, -3.192e-02, 1.829e-02, -2.319e-02, -1.350e-02, 1.787e-02, -3.608e-01, 7.924e-02, -1.890e-03));
	r1 += mul(s1_0_2, M4(-3.081e-02, -3.200e-03, -3.821e-01, 6.079e-02, 1.993e-03, -4.983e-02, 1.059e-01, -8.573e-03, 2.693e-02, 6.901e-02, 5.377e-01, -1.549e-01, 7.072e-02, -6.774e-02, 3.969e-01, 2.011e-01));
	r0 += mul(s1_1_0, M4(1.333e-02, 3.016e-01, -5.418e-01, 1.384e-01, -1.344e-02, -1.499e-01, 1.860e-01, 4.090e-02, -1.949e-02, -6.361e-01, 1.305e-02, -6.114e-02, -9.788e-02, -5.007e-01, 3.506e-01, -9.090e-02));
	r1 += mul(s1_1_0, M4(5.392e-01, -2.889e-01, -7.651e-01, 5.462e-01, 5.421e-02, 5.848e-02, 7.364e-02, 7.536e-02, 1.029e-01, 2.064e-01, 4.696e-01, -1.724e-01, 2.645e-03, 9.299e-02, 6.837e-01, -5.720e-02));
	r0 += mul(s1_1_1, M4(3.232e-01, 5.522e-01, 2.511e-01, -1.896e-02, -2.817e-02, 4.641e-01, -2.705e-01, -8.802e-02, -9.091e-02, -6.270e-01, -2.742e-01, 9.259e-02, -1.734e-01, -7.748e-01, 1.196e-02, -3.974e-01));
	r1 += mul(s1_1_1, M4(-1.191e-01, -1.000e+00, 2.562e-01, -3.715e-01, 3.084e-02, 2.480e-01, 6.933e-03, -6.901e-02, 9.267e-02, 4.455e-01, 1.733e-01, -2.343e-01, 1.894e-01, 2.827e-01, -4.822e-01, 5.192e-01));
	r0 += mul(s1_1_2, M4(-4.963e-03, 9.120e-02, -3.416e-02, 9.449e-02, 1.117e-02, 1.299e-01, -7.496e-03, 3.078e-02, -2.087e-02, -1.616e-01, 3.379e-02, 7.405e-02, -1.059e-02, -3.073e-01, 1.065e-01, -3.331e-01));
	r1 += mul(s1_1_2, M4(-1.496e-02, -2.381e-01, -3.104e-01, 9.994e-02, -4.511e-03, -6.493e-02, -1.566e-01, 7.852e-02, 7.453e-02, 2.880e-01, 3.954e-01, -6.164e-02, 3.704e-02, 2.648e-01, 5.145e-01, 1.298e-01));
	r0 += mul(s1_2_0, M4(-2.881e-02, -5.578e-02, -1.164e-01, 1.105e-02, -9.884e-03, -1.019e-01, 8.463e-02, 4.391e-02, 3.412e-02, 2.092e-01, -7.072e-03, 1.390e-02, -1.145e-02, -4.732e-01, 9.643e-04, -5.287e-02));
	r1 += mul(s1_2_0, M4(-5.802e-02, 4.539e-01, 1.597e-01, 2.142e-01, 3.432e-02, 5.604e-02, 2.486e-01, -1.180e-02, -6.545e-03, -1.588e-02, 4.733e-02, 3.292e-02, 1.060e-01, 3.698e-02, 3.104e-01, 6.047e-02));
	r0 += mul(s1_2_1, M4(2.207e-02, 2.129e-01, 3.379e-02, -1.060e-01, 3.840e-02, 2.424e-01, 2.461e-02, -3.210e-02, -1.203e-02, -2.939e-01, -2.842e-02, 1.411e-01, -1.962e-02, -8.039e-01, -5.895e-02, 3.901e-02));
	r1 += mul(s1_2_1, M4(2.022e-02, -1.089e-01, -1.899e-01, -2.626e-01, -7.175e-03, 1.527e-02, -1.220e-01, 7.636e-02, 4.158e-02, 1.328e-01, 9.891e-02, -6.346e-02, 1.061e-01, 3.470e-01, 5.104e-01, 1.187e-01));
	r0 += mul(s1_2_2, M4(4.882e-03, 2.191e-01, -5.220e-02, -9.920e-03, 7.615e-03, 1.046e-01, -4.241e-02, -7.230e-03, -1.118e-02, -2.378e-01, 1.069e-01, 3.706e-02, 4.895e-02, -5.904e-02, 5.012e-02, 1.205e-02));
	r1 += mul(s1_2_2, M4(-4.103e-02, 3.457e-02, -6.654e-02, 8.944e-03, -3.715e-03, 9.051e-03, 2.138e-02, 1.227e-02, 8.462e-02, 7.377e-02, 1.554e-01, -2.671e-02, -2.774e-02, -1.188e-01, 2.174e-01, 5.096e-02));
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.146e-02, 5.403e-03, -7.823e-02, 4.103e-02, 4.229e-02, -7.350e-03, -1.689e-02, -2.533e-02, -2.099e-02, 1.774e-02, 8.324e-02, -3.420e-02, -2.672e-02, 1.042e-02, -4.749e-02, -1.141e-01));
	r1 += mul(s0_0_0, M4(-9.177e-02, 1.637e-02, 2.124e-01, -8.947e-02, 4.810e-02, 2.532e-03, -4.782e-02, -1.653e-02, 1.323e-01, 1.237e-02, -8.947e-02, 9.575e-02, -1.612e-01, -2.383e-02, -5.565e-01, -1.963e-02));
	r0 += mul(s0_0_1, M4(-9.349e-02, -1.199e-01, 1.855e-02, 1.655e-01, -1.293e-02, -1.923e-02, -1.608e-02, -6.317e-03, 8.551e-02, 9.655e-02, -2.817e-02, -1.606e-01, -9.860e-02, 7.788e-02, -1.494e-02, -1.169e-01));
	r1 += mul(s0_0_1, M4(-6.851e-01, -1.606e-01, -1.252e-01, -1.281e-01, -7.477e-02, -7.631e-03, -2.620e-01, -4.982e-03, 6.291e-01, 1.333e-01, 1.859e-01, -5.172e-02, -6.002e-02, 6.561e-02, 1.830e-02, -1.744e-01));
	r0 += mul(s0_0_2, M4(4.334e-03, 9.629e-04, 5.778e-02, 2.370e-02, -5.908e-02, -2.304e-02, -4.853e-02, -6.420e-02, 5.475e-02, 6.237e-02, 1.989e-02, 1.654e-02, -2.970e-02, 2.948e-02, 1.739e-02, 1.237e-02));
	r1 += mul(s0_0_2, M4(-3.604e-01, -7.195e-02, 2.283e-02, -3.447e-01, -1.625e-01, -5.590e-02, -4.199e-03, -8.201e-02, 3.179e-01, 1.065e-01, -8.258e-02, 3.516e-01, 1.564e-01, 9.508e-03, -8.185e-02, 7.123e-02));
	r0 += mul(s0_1_0, M4(5.189e-02, 9.276e-02, -1.953e-02, -1.008e-02, 1.123e-03, 1.390e-02, -8.513e-03, -3.910e-02, -1.246e-01, -9.590e-02, 3.286e-03, -6.099e-02, 3.713e-02, -1.195e-01, -2.049e-01, 4.220e-02));
	r1 += mul(s0_1_0, M4(-2.417e-02, 8.169e-02, 1.976e-01, -2.179e-02, 7.128e-03, 3.063e-03, 5.988e-02, -2.671e-02, -6.675e-02, -7.775e-02, 3.423e-01, -1.342e-02, -1.216e-01, -5.436e-02, 4.619e-01, -1.048e-01));
	r0 += mul(s0_1_1, M4(1.583e-01, -1.747e-02, 5.271e-01, -2.563e-01, -7.525e-02, -1.150e-01, -1.120e-01, -7.006e-02, 8.598e-02, -7.502e-02, -5.911e-01, -4.241e-02, 2.666e-01, 2.227e-03, 6.342e-01, 8.189e-01));
	r1 += mul(s0_1_1, M4(2.018e-01, 9.621e-02, -8.101e-01, -8.023e-02, -1.000e+00, -1.374e-01, -6.128e-02, -8.102e-02, -5.295e-01, -8.283e-02, 4.110e-01, -4.532e-01, 2.078e-01, 3.617e-01, 7.201e-02, 5.093e-02));
	r0 += mul(s0_1_2, M4(2.173e-01, 3.045e-01, -5.529e-02, -7.549e-02, -5.144e-02, -1.542e-01, -1.218e-01, -1.059e-01, -2.916e-01, -2.634e-01, 1.579e-01, 6.053e-02, -1.489e-01, -4.131e-01, -7.416e-02, -1.067e-01));
	r1 += mul(s0_1_2, M4(3.726e-01, 4.150e-01, 9.269e-02, 2.945e-01, 6.852e-02, -2.247e-02, 4.843e-02, -6.389e-02, 4.302e-01, -3.646e-01, -1.199e-01, 4.007e-01, -2.138e-01, -3.805e-01, -4.722e-02, 8.696e-02));
	r0 += mul(s0_2_0, M4(-2.086e-02, 7.234e-02, 6.470e-02, 5.724e-02, -2.340e-02, 2.942e-03, -1.613e-02, -2.611e-02, -5.113e-02, -4.517e-02, -4.451e-02, -3.413e-02, -1.401e-01, -1.648e-01, -8.325e-02, -1.205e-01));
	r1 += mul(s0_2_0, M4(1.954e-01, -1.530e-02, -2.216e-02, 6.505e-02, -8.189e-02, -2.374e-02, 1.345e-02, -3.653e-02, -1.179e-01, -2.357e-02, -1.514e-01, 3.257e-02, -9.147e-02, -1.206e-01, -4.319e-01, 5.239e-04));
	r0 += mul(s0_2_1, M4(1.577e-01, 3.102e-01, 1.924e-01, 2.698e-01, -1.528e-02, -1.499e-01, -3.463e-02, -1.434e-02, 2.342e-01, 5.256e-01, 4.267e-01, 3.861e-01, 1.412e-01, 4.686e-01, 5.457e-02, -7.959e-03));
	r1 += mul(s0_2_1, M4(-9.442e-02, 2.307e-01, 1.367e-01, -3.590e-02, -2.037e-01, -8.379e-02, -2.529e-01, -7.767e-02, 7.006e-02, 2.283e-01, 3.128e-02, 3.497e-02, -6.437e-02, 2.114e-01, -5.540e-02, -6.267e-02));
	r0 += mul(s0_2_2, M4(-1.486e-01, -2.540e-01, 1.091e-02, 1.764e-02, -7.564e-03, 1.366e-01, -1.714e-02, -2.043e-02, -1.833e-02, 1.046e-01, 7.442e-02, 9.361e-02, -7.519e-02, -1.411e-01, 7.038e-03, -1.186e-02));
	r1 += mul(s0_2_2, M4(-7.760e-02, -3.371e-01, -2.486e-02, -3.656e-02, 8.753e-02, 2.417e-02, 2.341e-02, 2.778e-02, -1.980e-02, 1.283e-01, 3.470e-02, 8.285e-02, -3.939e-02, -8.813e-02, 2.661e-02, 2.007e-02));
	r0 += mul(s1_0_0, M4(3.551e-02, 3.985e-02, 1.017e-02, 2.702e-02, -4.169e-02, 4.790e-02, 5.517e-02, 9.871e-02, 3.044e-02, -3.593e-02, -7.739e-02, -1.111e-02, -5.910e-02, -3.621e-02, 5.357e-03, -2.246e-02));
	r1 += mul(s1_0_0, M4(-2.219e-02, 1.389e-02, -1.075e-01, 4.877e-02, 3.369e-02, 1.092e-02, -4.337e-01, 5.593e-02, -2.891e-01, -2.824e-02, -8.090e-01, -4.010e-03, -1.889e-02, -1.161e-02, 1.117e-01, -3.823e-02));
	r0 += mul(s1_0_1, M4(-7.497e-03, 6.230e-02, 1.675e-01, 1.380e-01, -1.620e-01, 8.796e-02, 1.568e-01, 3.047e-02, 4.733e-02, -3.530e-02, -7.837e-02, -7.114e-02, -3.247e-02, -6.617e-02, -1.311e-01, -6.332e-02));
	r1 += mul(s1_0_1, M4(2.155e-01, 5.415e-03, 7.051e-02, 2.305e-01, 2.807e-01, 2.560e-02, 4.140e-02, 1.597e-01, -6.458e-02, 4.961e-02, -6.202e-01, -2.996e-01, -1.055e-01, -1.853e-02, 1.294e-01, -8.540e-02));
	r0 += mul(s1_0_2, M4(-1.582e-02, -4.474e-02, -3.083e-02, 2.295e-02, 9.062e-02, 1.465e-01, 5.794e-02, 6.284e-02, -1.452e-01, -3.109e-02, -3.406e-02, 1.749e-02, 8.993e-02, 6.420e-03, 1.246e-03, -9.303e-03));
	r1 += mul(s1_0_2, M4(-4.319e-01, 5.577e-02, 1.778e-01, -2.878e-01, -7.570e-01, 6.543e-02, 4.083e-03, 4.469e-02, 2.588e-01, 3.349e-02, -4.646e-01, 1.843e-01, 9.969e-03, -6.980e-02, -5.912e-02, 1.376e-01));
	r0 += mul(s1_1_0, M4(7.248e-02, 5.981e-02, -4.329e-03, 2.789e-02, -9.758e-02, 5.403e-02, 3.358e-02, 5.118e-02, 9.487e-02, 1.276e-02, -2.118e-02, 1.507e-02, -7.851e-02, -3.313e-02, 1.532e-02, -4.211e-02));
	r1 += mul(s1_1_0, M4(1.934e-01, 7.328e-02, 3.983e-01, 2.441e-02, 1.902e-02, 2.068e-02, -1.000e+00, -3.917e-02, -4.800e-02, -3.406e-02, -1.000e+00, -1.089e-02, -1.807e-01, -6.076e-02, -5.454e-01, -1.454e-02));
	r0 += mul(s1_1_1, M4(-5.145e-01, -3.960e-01, 1.549e-02, 1.280e-02, -1.000e+00, -5.010e-01, -8.509e-02, -1.046e-01, -1.035e-01, 1.111e-01, 2.264e-01, 7.917e-02, 2.157e-02, 2.822e-01, -6.273e-02, -2.349e-01));
	r1 += mul(s1_1_1, M4(-1.407e-01, -3.790e-01, 1.127e-01, 6.044e-02, -6.009e-01, -5.618e-01, 6.651e-02, -1.724e-02, 3.739e-01, 1.221e-01, -2.538e-01, 3.550e-01, 1.901e-01, 1.118e-01, 3.491e-01, -1.366e-02));
	r0 += mul(s1_1_2, M4(6.855e-01, 8.725e-01, 9.677e-02, 2.004e-01, -2.877e-01, -4.307e-01, -1.271e-01, -1.493e-01, -2.222e-01, -1.389e-01, -5.386e-02, -9.596e-02, -5.411e-02, -6.181e-01, -7.299e-02, -6.646e-02));
	r1 += mul(s1_1_2, M4(1.110e-01, 7.676e-01, 1.348e-01, -2.141e-01, -1.000e+00, -6.674e-01, -1.510e-01, -1.000e+00, -1.000e+00, -2.529e-01, -1.896e-01, -1.251e-01, 6.777e-01, -6.992e-01, -9.348e-02, -1.000e+00));
	r0 += mul(s1_2_0, M4(5.749e-03, 9.368e-02, -7.483e-03, -1.066e-02, -2.294e-02, 5.536e-02, 3.432e-02, 2.791e-02, -2.912e-02, 6.452e-03, 1.360e-03, -1.547e-02, 7.201e-02, -7.495e-02, -3.626e-02, -2.399e-02));
	r1 += mul(s1_2_0, M4(1.498e-01, 3.312e-03, 2.830e-01, 5.258e-02, 5.582e-02, 6.015e-02, -1.986e-01, 1.671e-02, -2.215e-01, -3.383e-02, -4.306e-01, -6.968e-03, -6.089e-02, 1.325e-02, 1.647e-01, -1.082e-02));
	r0 += mul(s1_2_1, M4(1.636e-01, -6.916e-02, -3.855e-02, 4.768e-02, -6.997e-02, -2.429e-01, -6.016e-02, -1.155e-01, -2.568e-01, -2.134e-01, -1.324e-01, -1.033e-01, 7.347e-02, -5.808e-02, -3.526e-02, 1.736e-03));
	r1 += mul(s1_2_1, M4(-1.313e-01, 9.643e-02, -2.839e-01, -7.111e-02, -7.197e-01, -1.132e-01, 5.997e-03, -3.848e-02, 9.545e-02, -1.001e-01, -6.582e-01, 5.015e-03, 1.391e-01, 4.792e-02, 2.391e-01, -7.104e-02));
	r0 += mul(s1_2_2, M4(8.030e-02, 3.748e-01, 2.747e-02, 8.041e-03, 1.220e-03, -2.208e-01, -6.860e-02, -6.713e-02, -4.187e-02, -6.196e-02, -2.520e-02, -1.642e-02, 1.033e-01, -2.135e-03, -3.002e-02, -2.050e-02));
	r1 += mul(s1_2_2, M4(-4.078e-02, 1.967e-01, -5.739e-03, 1.299e-02, -2.518e-01, -5.508e-02, -1.165e-01, -8.683e-02, -5.175e-01, 1.480e-02, -1.769e-01, 6.461e-03, 2.430e-01, 1.705e-01, 7.250e-02, -2.118e-03));
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.008e-01, -6.799e-03, -1.846e-03, -2.351e-04, -6.208e-01, -2.027e-02, -1.429e-02, -2.255e-03, 1.294e-01, -2.159e-02, -9.893e-04, 2.365e-03, 9.594e-02, 5.972e-03, 3.134e-03, -2.408e-03));
	r0 += mul(s0_0_1, M4(1.268e-03, 8.682e-02, -1.413e-02, 9.414e-03, 1.313e-02, -4.299e-01, -1.567e-03, 4.359e-03, -2.849e-02, -4.267e-02, -4.248e-03, -4.930e-03, 1.427e-03, 1.111e-01, 5.609e-03, 7.930e-03));
	r0 += mul(s0_0_2, M4(1.413e-02, -5.791e-03, 1.326e-03, -7.917e-04, -1.618e-02, -8.905e-03, 2.183e-03, 1.766e-03, -6.895e-03, -1.080e-02, 6.546e-04, 9.982e-04, 3.884e-03, 1.115e-02, 1.089e-03, -1.114e-03));
	r0 += mul(s0_1_0, M4(1.018e-01, 7.036e-03, 1.997e-01, 1.213e-02, 3.459e-02, -1.911e-02, -2.610e-02, 5.969e-02, 2.259e-01, -1.259e-02, 2.881e-01, 6.358e-03, -2.520e-01, -2.399e-03, 3.271e-02, 1.063e-02));
	r0 += mul(s0_1_1, M4(-1.216e-01, -4.502e-01, -5.640e-02, -4.087e-01, 6.784e-02, -2.079e-02, 7.159e-02, -2.517e-02, 1.694e-01, 6.287e-01, -2.042e-01, 1.593e-02, -1.762e-01, -5.261e-01, 1.899e-01, 2.657e-01));
	r0 += mul(s0_1_2, M4(-1.533e-02, -2.369e-02, 2.235e-03, -3.516e-02, 3.443e-03, -1.265e-02, 1.205e-02, 2.850e-02, -6.054e-03, 9.744e-03, -8.190e-03, 6.548e-03, 1.046e-02, -2.244e-02, 8.455e-03, -6.223e-03));
	r0 += mul(s0_2_0, M4(2.727e-02, 1.169e-02, -1.955e-02, -1.868e-02, 3.645e-03, 3.594e-05, -2.415e-03, -3.397e-03, -6.826e-04, -4.834e-03, 7.104e-02, 4.984e-03, -3.054e-03, 1.583e-03, -6.177e-02, -1.742e-04));
	r0 += mul(s0_2_1, M4(-7.512e-03, -2.459e-02, -2.519e-02, -5.118e-02, -4.170e-03, -3.935e-03, 5.916e-03, 1.897e-04, 2.000e-02, 1.488e-02, 1.057e-01, 2.092e-01, -1.597e-02, -9.381e-03, -1.116e-01, -2.017e-01));
	r0 += mul(s0_2_2, M4(3.321e-03, -5.230e-04, -2.884e-03, -8.501e-03, 5.316e-04, -1.661e-03, -2.792e-03, 2.873e-03, 5.203e-03, -1.165e-02, 9.589e-03, 2.827e-02, -5.585e-03, 1.224e-02, -6.755e-03, -3.280e-02));
	r0 += mul(s1_0_0, M4(-3.649e-02, 1.459e-02, 1.500e-03, 1.138e-03, 1.146e-01, 2.536e-02, 1.658e-02, -2.554e-03, -2.076e-03, -1.419e-07, -7.803e-05, 2.292e-07, -4.773e-02, -2.333e-02, 3.175e-04, 2.961e-03));
	r0 += mul(s1_0_1, M4(1.690e-02, -2.705e-02, 7.341e-03, -1.660e-03, 3.856e-02, 2.475e-01, 6.187e-03, -6.394e-03, -3.738e-03, -8.038e-03, -1.461e-04, -6.832e-06, -7.190e-03, 4.301e-03, 6.571e-03, 1.042e-02));
	r0 += mul(s1_0_2, M4(-7.309e-03, -1.639e-02, -3.212e-03, -1.107e-02, 1.090e-02, 7.727e-03, -5.264e-03, -3.832e-03, 9.516e-02, 1.345e-01, -2.090e-02, -1.789e-02, 4.134e-03, 2.870e-03, -1.462e-03, -2.421e-04));
	r0 += mul(s1_1_0, M4(-5.054e-01, -3.655e-01, -3.800e-01, -4.748e-02, -1.022e-01, 5.777e-02, -7.310e-01, -9.065e-02, 2.615e-03, -1.247e-06, 4.038e-04, 4.385e-07, 7.778e-01, 3.447e-01, 1.899e-01, -3.259e-02));
	r0 += mul(s1_1_1, M4(5.151e-03, 1.457e-02, 7.073e-03, -6.529e-02, 3.603e-02, 2.063e-01, 4.577e-02, -4.871e-02, 1.489e-01, 1.680e-03, 1.111e-01, -4.549e-03, -9.779e-03, 9.524e-02, 1.495e-02, 6.093e-02));
	r0 += mul(s1_1_2, M4(1.590e-03, 2.075e-03, -3.211e-03, -9.430e-04, -3.966e-03, 3.285e-02, -1.089e-02, -9.293e-03, -2.491e-01, 1.486e-01, 9.150e-02, 5.488e-01, -3.176e-03, 7.825e-03, 2.311e-04, 1.826e-03));
	r0 += mul(s1_2_0, M4(3.444e-03, 1.214e-02, -1.186e-02, -8.911e-02, -2.191e-02, -2.752e-03, 1.946e-04, 1.381e-02, -7.999e-04, 1.536e-06, -9.587e-04, -7.991e-07, -1.569e-02, -4.064e-02, 1.926e-01, 7.657e-02));
	r0 += mul(s1_2_1, M4(-1.059e-02, -1.090e-02, -1.870e-02, -2.009e-03, 1.090e-03, 1.413e-02, 7.889e-03, 1.654e-02, 1.908e-02, 4.017e-03, 6.460e-02, -5.966e-04, -8.613e-03, -3.696e-03, -5.386e-03, 2.650e-02));
	r0 += mul(s1_2_2, M4(-5.393e-04, -1.578e-03, -1.206e-03, -4.616e-03, -2.075e-03, 1.680e-03, 1.327e-03, 6.138e-04, 2.085e-02, 4.867e-02, -1.067e-01, -3.488e-02, 6.674e-05, 1.098e-03, -3.120e-03, 1.142e-03));
	r0 += V4(-8.128e-10, 7.656e-09, 7.292e-11, 6.221e-09);
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
