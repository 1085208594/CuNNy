// CuNNy faster NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-D08N02

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(2.476e-02, 1.391e-01, -6.978e-02, 4.862e-03) * s0_0_0;
	r1 += V4(-1.968e-01, -8.926e-01, -1.029e-02, 3.961e-03) * s0_0_0;
	r0 += V4(-6.682e-02, -3.495e-01, 3.816e-02, -6.875e-03) * s0_0_1;
	r1 += V4(-1.448e-02, 4.548e-01, 5.025e-02, 2.690e-01) * s0_0_1;
	r0 += V4(1.107e-02, -2.213e-01, -5.372e-02, 3.659e-03) * s0_0_2;
	r1 += V4(-2.262e-02, 6.909e-02, -4.533e-02, 8.000e-02) * s0_0_2;
	r0 += V4(3.164e-02, -6.767e-02, 3.243e-04, 3.824e-01) * s0_1_0;
	r1 += V4(8.223e-01, 9.746e-01, -2.336e-03, -6.573e-02) * s0_1_0;
	r0 += V4(-1.074e+00, -1.893e-01, -9.466e-02, 1.666e-01) * s0_1_1;
	r1 += V4(-4.188e-01, -4.619e-01, -1.103e+00, -1.262e+00) * s0_1_1;
	r0 += V4(-1.198e-02, -4.248e-01, 6.430e-01, 3.232e-03) * s0_1_2;
	r1 += V4(3.183e-02, -1.479e-01, 1.105e+00, 5.702e-01) * s0_1_2;
	r0 += V4(-5.626e-02, -9.239e-02, 1.518e-02, 5.635e-01) * s0_2_0;
	r1 += V4(-2.877e-02, -1.156e-01, 8.821e-03, 4.451e-02) * s0_2_0;
	r0 += V4(1.139e+00, 4.908e-01, -6.251e-02, -1.113e+00) * s0_2_1;
	r1 += V4(1.204e-02, 3.845e-02, 4.217e-03, 5.503e-03) * s0_2_1;
	r0 += V4(1.198e-03, 7.213e-01, -2.165e-01, -4.557e-03) * s0_2_2;
	r1 += V4(1.470e-02, 7.962e-02, -1.275e-02, 2.173e-02) * s0_2_2;
	r0 += V4(-5.057e-04, -1.072e-03, 5.267e-03, 6.467e-06);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(6.927e-03, 5.344e-05, -5.218e-05, -4.579e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(3.507e-01, 6.302e-02, 2.767e-01, -1.291e+00, -3.564e-01, -2.891e-01, -2.998e-01, 5.078e-01, 4.756e-01, 9.705e-01, -5.885e-01, -7.259e-01, 2.318e-01, -2.802e-02, 8.719e-02, -1.822e+00));
	r1 += mul(s0_0_0, M4(-5.039e-02, -7.521e-03, 6.811e-01, -4.841e-02, -4.749e-02, 1.519e-01, -5.019e-01, 2.212e-02, -2.046e-01, 6.164e-01, -2.686e-01, -1.114e-01, -9.459e-02, -1.032e-02, 1.001e-01, 2.281e-02));
	r0 += mul(s0_0_1, M4(2.667e-01, -1.277e+01, 7.788e-02, 4.676e-01, -8.863e-02, -4.143e-01, 2.691e-01, -5.300e-01, -4.341e-02, 4.756e-01, -1.055e-01, -3.028e-01, -5.362e-03, -4.131e-01, 5.770e-03, 6.656e-02));
	r1 += mul(s0_0_1, M4(9.221e-03, -3.771e-02, 4.638e-01, -8.428e-01, 4.495e-03, -4.145e-02, 2.091e-01, 1.943e-01, -1.275e-01, -3.354e-02, -4.373e-01, -9.644e-02, 1.143e-01, -9.336e-02, 4.912e-01, 6.983e-02));
	r0 += mul(s0_0_2, M4(7.936e-02, 2.779e-01, -6.348e-01, 3.179e-01, -2.221e-02, -5.316e-02, 1.547e-01, 1.763e-01, -7.116e-02, -3.405e-02, 2.966e-01, -1.292e-01, 3.344e-01, 5.866e-01, -1.230e+00, 3.855e-01));
	r1 += mul(s0_0_2, M4(2.035e-02, 1.416e-01, -7.754e-01, -4.596e-02, 1.311e-02, 1.229e-03, 1.496e-01, -9.456e-03, -8.051e-03, -4.418e-02, 7.459e-02, -9.302e-02, 3.305e-03, 2.140e-01, 4.778e-01, -5.977e-02));
	r0 += mul(s0_1_0, M4(-2.744e-01, -1.903e-01, 5.449e-01, -2.669e+00, 1.577e-01, 2.793e-02, -6.900e-01, 1.749e-01, -4.455e-01, -7.215e-01, 1.698e-01, 1.011e+00, 1.132e-01, 3.821e-02, 2.607e-01, -1.779e+00));
	r1 += mul(s0_1_0, M4(2.727e-01, -3.900e-02, 7.540e-02, 3.159e-02, -3.037e-01, 5.072e-02, 3.861e-02, 1.675e-01, -3.506e-01, -1.926e-01, 1.676e-01, 3.610e-01, 2.754e-02, -2.280e-02, 2.028e-01, 1.236e-02));
	r0 += mul(s0_1_1, M4(-1.802e-01, 1.020e-01, 9.465e-01, -5.596e-01, 9.872e-02, -2.475e-01, 6.465e-01, -4.232e-01, 2.124e-01, -2.877e-02, 5.168e-01, 1.926e-02, -2.158e-01, -1.238e-02, -2.904e-01, -6.760e-01));
	r1 += mul(s0_1_1, M4(6.118e-01, 2.721e-02, -1.502e+00, 6.857e-02, -9.199e-02, -8.373e-02, 1.413e-01, 6.051e-02, -1.525e-02, 2.795e-03, 4.330e-01, 1.233e-01, 8.306e-02, 6.909e-02, -4.037e-02, -2.614e-01));
	r0 += mul(s0_1_2, M4(2.244e-02, 3.369e-01, -8.492e-01, 2.067e-01, -6.407e-02, 4.306e-02, 4.112e-03, -1.126e-01, 8.723e-02, 2.956e-02, -9.234e-02, -1.132e-01, -1.818e-01, -4.242e-02, -1.906e-01, 7.188e-02));
	r1 += mul(s0_1_2, M4(5.506e-02, 6.297e-02, -6.518e-01, 2.631e-01, 4.431e-02, 1.676e-02, 9.639e-02, 3.448e-03, 6.043e-02, 3.944e-02, 2.038e-01, 1.754e-01, 1.791e-01, 3.099e-02, -3.420e-01, 4.913e-02));
	r0 += mul(s0_2_0, M4(-6.090e-02, 8.026e-03, 1.006e-01, 3.927e-02, 9.395e-02, 1.919e-02, -2.939e-01, 2.014e-01, 2.320e-01, -2.939e-01, -5.059e-01, -6.334e-01, 8.928e-03, 7.469e-02, 8.505e-02, 2.495e-01));
	r1 += mul(s0_2_0, M4(3.009e-02, -2.617e-03, 1.768e-02, -1.402e-02, -1.100e-01, -1.695e-02, -7.055e-02, 5.874e-02, -4.067e-02, -3.144e-02, 3.201e-02, -1.790e-01, -1.148e-02, 1.433e-02, 3.594e-02, 3.405e-02));
	r0 += mul(s0_2_1, M4(-3.104e-02, -8.798e-03, 1.910e-01, 1.459e-01, -7.646e-02, -6.937e-02, 1.222e-02, -3.357e-01, -7.063e-02, -6.887e-02, 6.956e-02, 9.266e-02, -1.070e-02, 1.002e-01, 6.478e-02, 7.925e-02));
	r1 += mul(s0_2_1, M4(5.041e-02, 2.678e-02, -1.453e-01, -1.786e-02, -2.751e-02, -4.326e-02, 3.018e-01, -7.643e-02, 2.603e-01, 5.221e-02, 6.988e-02, 3.485e-01, -1.953e-02, 8.988e-03, -5.335e-02, 2.375e-02));
	r0 += mul(s0_2_2, M4(1.346e-02, 6.568e-02, 5.134e-02, 1.903e-01, 6.628e-04, -4.453e-03, 4.735e-02, 6.717e-02, 1.224e-03, -3.031e-02, 2.793e-01, -6.274e-02, -8.486e-02, 3.702e-02, -7.096e-02, 1.121e-01));
	r1 += mul(s0_2_2, M4(3.145e-02, 3.350e-02, -2.393e-01, 7.124e-02, 2.420e-03, 2.481e-03, 4.237e-02, -1.740e-02, -2.375e-02, -2.046e-02, -7.013e-02, -1.333e-01, -5.774e-02, -1.381e-02, -1.937e-02, -5.557e-02));
	r0 += mul(s1_0_0, M4(-9.691e-02, 1.267e-01, 2.842e-02, -5.597e-01, -4.568e-02, -1.517e-01, -2.283e-02, 3.841e-01, 1.606e-01, -2.085e-01, 3.096e-01, 1.952e-01, -8.117e-02, -7.426e-02, -3.777e-02, 3.804e-01));
	r1 += mul(s1_0_0, M4(-1.637e-02, 8.640e-02, 4.938e-02, -4.519e-02, 9.350e-03, -1.366e-01, 3.905e-02, -2.373e-02, 2.914e-02, 3.525e-01, 2.407e-01, -1.955e-01, -5.064e-02, 2.746e-01, 1.667e-01, -1.195e-01));
	r0 += mul(s1_0_1, M4(1.699e-02, 4.657e-01, -1.699e-02, -5.969e-01, 2.607e-01, -2.103e-01, -8.301e-02, 1.949e-01, 1.484e-01, -1.296e+00, -5.351e-02, 4.614e-01, -3.887e-01, 3.406e-01, -1.430e-01, -2.164e-01));
	r1 += mul(s1_0_1, M4(9.432e-02, -5.007e-01, -3.375e-01, 1.047e-01, -3.359e-03, -4.379e-02, 2.668e-01, -7.031e-02, 2.705e-02, 1.453e-01, 1.484e-01, -1.368e-01, -2.467e-03, -2.979e-01, -4.576e-01, 2.494e-01));
	r0 += mul(s1_0_2, M4(5.020e-01, 5.692e-01, 3.994e-01, 2.548e-02, -3.693e-03, 2.232e-02, -9.633e-02, 3.139e-01, 5.313e-02, 8.889e-02, -2.917e-01, 1.802e-01, -3.626e-02, -1.224e-01, 2.909e-01, -3.434e-02));
	r1 += mul(s1_0_2, M4(8.226e-02, 2.705e-01, -3.859e-02, -2.287e-01, 4.681e-02, 1.363e-02, 2.309e-01, 1.174e-01, 2.914e-02, 1.372e-01, -9.512e-02, 8.090e-02, 5.652e-02, -1.391e-01, 1.230e-01, 1.182e-02));
	r0 += mul(s1_1_0, M4(7.054e-03, -6.907e-02, -2.763e-01, 7.210e-01, 3.583e-02, 4.972e-02, 2.340e-01, -7.213e-01, -2.423e-01, 4.657e-01, -2.882e-01, -1.949e+00, 5.137e-01, -1.417e-01, -2.598e-01, -1.013e+00));
	r1 += mul(s1_1_0, M4(-1.071e-01, 8.503e-02, -1.483e-01, 2.129e-02, 1.753e-02, -1.076e-01, 5.958e-02, 1.013e-02, 3.700e-01, 2.568e-01, 9.280e-02, -3.446e-01, -4.717e-01, -7.248e-02, 2.919e-01, -2.223e-01));
	r0 += mul(s1_1_1, M4(-7.715e-01, 2.055e-01, 3.376e-01, -1.132e-01, 1.698e-01, 2.337e-01, 1.895e-02, -2.901e-01, -3.115e-01, -1.953e-01, -2.489e-01, -2.224e-01, 6.077e-01, 3.969e-01, -5.319e-01, 4.061e-02));
	r1 += mul(s1_1_1, M4(6.621e-01, -5.156e-02, -6.381e-01, 8.637e-03, 1.822e-01, -1.381e-02, -3.362e-02, -9.609e-02, 3.610e-01, -6.954e-02, -2.648e+00, 3.434e-02, 1.275e-02, 1.703e-01, -2.781e-01, 8.613e-01));
	r0 += mul(s1_1_2, M4(-9.016e-01, -1.016e+00, -3.420e-01, -3.057e-01, 1.636e-01, -5.422e-01, -1.906e-01, 2.933e-01, -7.156e-02, 7.531e-02, -5.706e-01, 1.844e-02, 9.631e-02, -1.735e-01, 1.144e+00, -2.248e-01));
	r1 += mul(s1_1_2, M4(-3.933e-01, -3.154e-01, 3.486e-01, -1.094e+00, 7.350e-02, 3.794e-02, -5.737e-01, -1.983e-01, -5.025e-03, 1.717e-02, -1.756e-01, 4.727e-02, -5.542e-02, -5.212e-02, 2.441e-01, -1.654e-01));
	r0 += mul(s1_2_0, M4(6.695e-02, -1.527e-01, -3.779e-01, 1.294e-01, -5.293e-02, 9.168e-02, 1.470e-01, -9.098e-01, -9.171e-02, -1.724e-01, 7.988e-01, 8.297e-01, -2.994e-01, 2.099e-01, -5.233e-01, -6.388e-01));
	r1 += mul(s1_2_0, M4(-4.209e-02, 2.007e-05, -8.351e-02, -2.151e-02, 6.197e-03, -8.272e-04, -5.100e-02, 2.251e-02, 1.180e-01, 1.843e-02, 5.020e-01, 2.039e-01, -1.402e-03, 8.351e-02, -3.956e-01, -2.440e-01));
	r0 += mul(s1_2_1, M4(4.696e-01, -4.519e-01, 7.542e-01, 1.621e+00, -2.685e-01, 5.840e-01, 3.986e-02, 1.835e-01, 1.665e-01, -4.050e-02, -1.243e-01, 4.893e-01, -2.345e-01, -8.535e-02, 6.232e-01, -3.924e-01));
	r1 += mul(s1_2_1, M4(5.400e-02, -1.488e-02, 7.159e-01, 2.815e-02, 2.757e-02, 4.212e-02, -5.723e-01, 6.228e-02, 5.093e-02, 3.493e-02, -1.806e-01, 3.548e-01, -1.073e-01, -5.366e-02, 2.449e-01, -5.489e-01));
	r0 += mul(s1_2_2, M4(3.284e-01, 2.545e-02, -5.336e-01, -4.025e-02, -1.124e-01, -1.119e-01, 4.691e-01, 8.301e-01, 7.101e-02, 3.873e-02, -3.117e-01, 1.520e-01, -7.045e-02, 8.345e-02, 4.220e-01, -6.811e-02));
	r1 += mul(s1_2_2, M4(1.042e-01, 4.708e-02, -4.769e-02, 8.183e-01, 1.142e-02, -1.936e-03, 8.049e-02, -4.192e-01, 3.835e-02, 2.616e-03, -2.544e-02, 9.462e-02, -3.587e-02, 9.393e-03, 4.186e-02, -1.278e-01));
	r0 += V4(4.465e-05, -6.480e-03, -3.424e-03, -1.131e-02);
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 += V4(2.779e-03, -1.309e-04, -7.489e-03, 4.173e-03);
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0, T1
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(2.222e-03, -6.978e-02, 4.278e-02, 1.352e-02, -2.604e-01, 7.200e-02, -2.076e-03, -5.575e-02, 1.462e-01, 2.741e-02, 3.316e-02, 2.331e-02, -1.140e-01, 1.384e-02, -3.594e-02, -2.920e-02));
	r1 += mul(s0_0_0, M4(-5.264e-02, 7.291e-03, -4.260e-02, -1.154e-02, 7.502e-03, -4.009e-02, 2.187e-02, -9.860e-03, 5.175e-02, -1.008e-01, -2.662e-02, -6.107e-02, -4.899e-02, 3.119e-03, 2.185e-02, -6.196e-02));
	r0 += mul(s0_0_1, M4(1.909e-01, -1.499e-01, -1.756e-01, 1.682e-01, -2.259e-01, 1.100e-01, 8.724e-02, -1.276e-01, -3.499e-02, 6.274e-02, 7.781e-03, -4.782e-02, -1.305e-01, -1.488e-01, -2.439e-01, -1.450e-01));
	r1 += mul(s0_0_1, M4(6.714e-02, -2.652e-02, 1.567e-01, 1.327e-01, -7.542e-02, -5.294e-02, -1.512e-02, 1.019e-03, -9.815e-02, 2.888e-02, 1.614e-02, 1.789e-01, -5.371e-02, -4.509e-01, 1.372e-01, -2.134e-01));
	r0 += mul(s0_0_2, M4(4.118e-02, -1.053e-02, -6.617e-03, -4.756e-02, -1.489e-01, 3.604e-03, 1.757e-02, -4.684e-02, 1.350e-01, 9.397e-03, 2.074e-02, 5.049e-02, -2.794e-03, -5.315e-02, -6.550e-02, -5.958e-02));
	r1 += mul(s0_0_2, M4(8.464e-02, 7.580e-02, -2.097e-01, -1.243e-01, -7.618e-02, -5.427e-03, 4.372e-03, 8.204e-02, 4.182e-03, -5.840e-02, 6.224e-02, 3.577e-02, -1.911e-01, -3.610e-02, -1.235e-01, -7.372e-01));
	r0 += mul(s0_1_0, M4(2.562e-01, 2.331e-01, -3.610e-02, 3.286e-02, 3.658e-01, 1.550e-01, 1.225e-01, 1.815e-01, -2.163e-01, -2.446e-01, -1.243e-01, -1.405e-01, -4.398e-02, 8.904e-02, 1.507e-02, -8.163e-02));
	r1 += mul(s0_1_0, M4(-3.057e-01, -5.215e-01, 3.430e-02, -3.025e-02, 2.764e-01, 5.687e-01, -9.547e-02, 1.037e-01, -2.978e-01, -3.603e-01, -1.512e-01, 1.522e-02, 1.559e-01, 8.383e-02, -6.274e-02, 1.271e-02));
	r0 += mul(s0_1_1, M4(-4.893e-01, 7.020e-02, -2.136e-01, -3.896e-01, 9.504e-02, 2.004e-01, -5.002e-02, 4.292e-01, -8.517e-02, 2.746e-01, 5.971e-02, 1.995e-01, -5.455e-01, -1.543e-01, -3.348e-01, -4.048e-01));
	r1 += mul(s0_1_1, M4(-3.253e-01, -2.818e-01, 3.248e-01, 4.206e-01, 4.424e-01, 1.927e-01, -2.329e-02, -5.456e-02, 1.022e-01, -1.621e-02, -7.630e-01, -1.265e-01, -4.757e-01, -2.629e+00, 1.411e-01, -1.803e-01));
	r0 += mul(s0_1_2, M4(1.469e-02, -1.660e-02, -2.645e-02, -9.885e-02, -3.600e-02, -6.808e-03, 7.772e-02, 7.534e-02, 9.545e-02, -9.498e-02, -4.951e-03, -8.639e-02, 3.920e-02, -1.372e-01, -6.442e-02, -2.323e-01));
	r1 += mul(s0_1_2, M4(-9.140e-02, 1.532e-01, -7.837e-01, 5.967e-01, 6.345e-03, -6.231e-02, -6.252e-03, 1.603e-01, -2.081e-01, -1.109e-01, 1.180e-01, -2.032e-01, -1.127e-01, -5.661e-02, -2.078e-01, -6.228e-01));
	r0 += mul(s0_2_0, M4(-6.198e-02, -1.450e-01, -9.224e-02, 1.732e-02, 2.655e-02, -7.933e-02, -1.315e-01, -1.254e-01, 3.368e-02, 2.543e-02, -2.366e-02, 3.602e-02, 1.409e-01, 4.205e-02, 4.472e-02, 9.361e-02));
	r1 += mul(s0_2_0, M4(-1.199e-01, 3.193e-01, -1.173e-02, 1.469e-02, 1.867e-01, 1.410e-01, 8.639e-02, -3.707e-02, -1.780e-02, -1.194e-01, 1.073e-02, -6.123e-02, 1.879e-01, 1.232e-03, -6.090e-02, -2.869e-02));
	r0 += mul(s0_2_1, M4(1.678e-01, -3.087e-02, -2.441e-01, 4.876e-01, -9.109e-02, -6.844e-02, 1.003e-01, -3.408e-01, 5.567e-03, -5.413e-02, -3.161e-02, -1.352e-01, -3.369e-01, -1.398e-01, -1.614e-01, -4.072e-01));
	r1 += mul(s0_2_1, M4(4.385e-01, -3.467e-01, 2.926e-01, -5.266e-01, -2.832e-01, -4.181e-02, -6.489e-02, 8.902e-02, -1.899e-01, -1.154e-01, -1.629e-01, -2.958e-02, -4.940e-01, -4.309e-01, 1.875e-01, 9.285e-02));
	r0 += mul(s0_2_2, M4(1.501e-02, -5.163e-02, 3.256e-02, 3.056e-01, -4.303e-02, -6.089e-02, -7.159e-02, 3.224e-02, -5.264e-02, -5.337e-04, 2.666e-02, -7.812e-02, -7.957e-02, -3.756e-02, 1.940e-02, -1.888e-01));
	r1 += mul(s0_2_2, M4(-1.366e-01, 7.251e-02, 2.593e-02, -1.192e-01, -1.128e-02, -3.312e-03, -9.100e-02, -5.500e-02, -1.637e-03, -1.988e-02, 7.179e-02, 1.120e-01, -1.312e-01, 1.205e-02, -4.429e-02, -1.086e-01));
	r0 += mul(s1_0_0, M4(-2.351e-01, -9.126e-02, 4.945e-02, -8.354e-02, -6.673e-02, -1.100e-02, 1.127e-02, -2.314e-02, -1.330e-01, -1.010e-01, -5.018e-02, 2.099e-03, -2.015e-01, -3.266e-03, 4.989e-02, -8.440e-02));
	r1 += mul(s1_0_0, M4(-2.131e-02, -1.031e-01, -3.313e-01, -1.378e-01, 1.950e-03, -1.763e-02, -4.410e-02, -1.618e-02, 2.279e-02, -2.843e-02, 6.748e-02, -2.503e-02, -1.009e-01, -5.726e-02, -2.851e-02, 8.744e-02));
	r0 += mul(s1_0_1, M4(-1.352e-01, -6.084e-02, -9.204e-02, -2.038e-01, -6.536e-03, 4.463e-02, 8.716e-02, -3.928e-02, 7.563e-04, -7.015e-02, -3.862e-02, -5.065e-02, -2.656e-01, -1.017e-01, 8.297e-02, -5.893e-02));
	r1 += mul(s1_0_1, M4(-7.488e-02, -6.085e-02, 3.138e-01, -1.433e-01, -4.389e-02, -2.559e-02, 3.843e-02, -6.932e-02, 1.539e-02, 4.109e-02, -2.326e-01, -3.775e-01, -2.449e-01, -5.633e-02, -2.378e-01, 4.195e-01));
	r0 += mul(s1_0_2, M4(-1.479e-01, -1.851e-02, -4.351e-02, -4.679e-02, -1.090e-02, 2.455e-02, 4.996e-04, 2.016e-02, -4.399e-02, 3.164e-02, -3.382e-02, 2.699e-02, 7.102e-02, 7.577e-03, -2.929e-03, -1.261e-02));
	r1 += mul(s1_0_2, M4(-1.812e-03, 1.204e-01, -2.275e-02, -1.126e-01, -4.487e-02, -6.016e-02, 9.018e-02, 4.530e-02, 3.675e-02, 2.611e-02, 3.821e-02, -1.364e-01, 2.833e-02, -4.675e-02, 2.600e-02, -7.393e-02));
	r0 += mul(s1_1_0, M4(4.127e-01, 3.857e-01, 2.359e-01, 2.269e-01, 1.655e-01, 3.893e-02, 1.013e-01, 1.577e-01, -5.432e-01, 1.239e-02, -1.395e-01, -4.227e-01, -1.545e-01, 2.853e-01, 2.485e-01, 3.306e-01));
	r1 += mul(s1_1_0, M4(-1.773e-01, -5.548e-02, -6.658e-01, 1.155e-01, 6.244e-02, -1.752e-02, 8.424e-02, 6.323e-02, 1.685e-03, 1.926e-01, -2.176e-01, -2.529e-01, 1.332e-01, -4.465e-02, -9.823e-01, 1.648e-01));
	r0 += mul(s1_1_1, M4(1.652e-01, 6.757e-02, 8.029e-01, 6.571e-01, 1.057e-01, 1.724e-01, -6.485e-02, 1.636e-01, 1.403e-01, -3.514e-01, -5.143e-02, -2.180e-01, -3.704e-01, -2.937e-01, -4.580e-01, 8.185e-02));
	r1 += mul(s1_1_1, M4(1.056e+00, 5.957e-01, 4.287e-01, 5.913e-01, 4.976e-03, 6.827e-02, 1.591e-01, 1.369e-01, -6.047e-02, 1.735e-02, 2.300e-01, -4.697e-01, -7.637e-01, -2.463e-01, -5.793e-01, -6.816e-01));
	r0 += mul(s1_1_2, M4(-2.167e-02, 6.860e-02, 6.997e-03, 1.041e-01, 5.459e-02, 5.255e-02, -1.449e-03, 4.308e-02, -3.584e-01, 1.401e-01, -5.173e-02, -6.663e-02, -3.631e-02, -5.467e-02, 3.640e-02, -8.066e-03));
	r1 += mul(s1_1_2, M4(-2.817e-01, -1.394e-01, -2.573e-02, 6.897e-01, 2.160e-01, 5.036e-02, 2.957e-01, -7.968e-01, 1.687e-01, 9.278e-02, -1.754e-01, -1.656e-01, 1.301e-01, 5.782e-02, 1.355e-02, -3.154e-01));
	r0 += mul(s1_2_0, M4(-9.605e-02, -4.948e-02, 3.144e-02, -9.841e-02, -3.192e-01, -1.382e-01, -1.423e-01, -1.121e-01, -5.013e-02, -1.594e-01, 5.000e-02, -2.139e-01, 7.351e-02, 1.103e-01, 1.239e-01, 9.502e-02));
	r1 += mul(s1_2_0, M4(3.338e-03, 3.660e-01, 1.305e-02, 3.227e-02, -3.133e-01, -6.772e-01, 1.416e-01, -3.968e-02, 1.811e-01, 7.349e-02, -4.557e-02, 6.095e-02, 4.190e-02, -2.640e-02, -2.118e-02, 1.886e-01));
	r0 += mul(s1_2_1, M4(1.176e-01, -2.171e-01, -4.678e-01, -4.318e-01, 4.547e-01, 4.218e-01, 3.882e-01, -3.642e-01, -1.398e-01, -9.109e-02, 5.068e-02, -2.607e-01, -1.548e-01, 1.066e-01, 1.777e-01, 1.102e-01));
	r1 += mul(s1_2_1, M4(4.289e-01, -3.904e-01, 4.367e-01, -5.605e-01, 3.152e-01, 4.286e-01, -1.855e+00, -7.051e-01, -2.001e-01, 2.229e-01, 2.408e-01, 2.606e-01, -1.275e-01, 3.525e-01, -3.804e-01, 3.643e-01));
	r0 += mul(s1_2_2, M4(8.837e-02, -1.117e-01, 1.504e-02, 1.161e-01, -7.857e-02, 1.151e-01, -2.456e-01, -5.182e-01, 2.679e-02, 1.509e-01, 6.097e-03, 1.235e-01, -3.958e-02, 6.774e-02, -3.060e-02, -5.083e-02));
	r1 += mul(s1_2_2, M4(-3.662e-01, -9.376e-02, 2.210e-01, -3.566e-01, -2.955e-02, -1.497e-01, -2.241e-01, 4.698e-01, 2.456e-01, -3.547e-02, 8.809e-02, 1.773e-01, 2.250e-01, 2.476e-02, -8.061e-02, 1.792e-01));
	r0 += V4(-3.673e-03, -1.282e-03, -2.978e-03, -2.813e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(-2.335e-03, -2.109e-03, -5.050e-03, -5.043e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0, T1
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-3.442e-03, 2.971e-03, 5.782e-03, 4.862e-04, 3.526e-02, -9.078e-03, 3.170e-03, -2.545e-03, -2.870e-02, 5.594e-03, -1.691e-03, 1.839e-04, -8.765e-02, -2.435e-02, -1.748e-02, -3.356e-03));
	r0 += mul(s0_0_1, M4(-6.612e-02, -3.333e-02, 3.376e-03, 9.935e-03, -2.862e-02, 1.186e-02, 3.455e-03, 9.123e-03, 2.764e-01, 6.195e-02, 2.419e-02, -9.436e-03, 2.271e-01, 1.122e-01, 3.162e-02, 1.108e-02));
	r0 += mul(s0_0_2, M4(3.441e-02, -1.274e-01, 3.059e-02, 7.936e-02, -2.557e-03, -2.274e-02, 5.420e-03, 3.450e-02, -1.654e-02, 6.323e-02, -1.119e-02, 2.208e-02, -1.687e-02, 9.106e-02, -6.557e-03, -5.586e-04));
	r0 += mul(s0_1_0, M4(-1.874e-02, 4.457e-03, -6.453e-03, -8.012e-05, 4.023e-02, 2.092e-03, 4.019e-02, -4.943e-03, -1.996e-02, -1.093e-02, -2.668e-02, 1.277e-02, -2.073e-02, 2.298e-03, 6.325e-03, 1.402e-03));
	r0 += mul(s0_1_1, M4(2.998e-01, -9.832e-02, 8.765e-02, -6.666e-02, -5.583e-02, 2.288e-01, -1.655e-01, 1.660e-01, -1.598e-01, -1.116e-01, 3.743e-01, -1.225e-02, 1.515e-01, 5.222e-04, -3.799e-01, -1.881e-01));
	r0 += mul(s0_1_2, M4(-7.153e-02, 2.627e-01, -7.495e-02, -2.529e-01, -3.058e-02, -2.705e-01, -6.765e-02, -3.546e-01, -4.260e-02, -4.675e-02, -5.625e-02, 2.073e-01, -5.578e-03, 9.302e-02, 9.830e-03, -1.284e-01));
	r0 += mul(s0_2_0, M4(-7.035e-03, 4.593e-03, -1.983e-02, 5.279e-04, 1.156e-02, -1.619e-03, 4.189e-02, 1.809e-03, 3.462e-03, -2.982e-04, -1.581e-02, -9.004e-03, -2.765e-03, 1.301e-03, -6.510e-03, -5.083e-03));
	r0 += mul(s0_2_1, M4(-1.024e-02, -7.192e-03, -6.701e-03, -3.638e-02, 1.724e-02, 8.719e-03, 7.398e-02, 9.009e-02, 1.565e-02, 2.451e-03, -1.333e-01, -7.983e-02, -1.247e-02, -5.471e-03, 4.721e-02, 2.728e-02));
	r0 += mul(s0_2_2, M4(-4.131e-02, -3.805e-02, 4.748e-02, 9.839e-02, 3.654e-02, 3.209e-02, 7.790e-02, 5.214e-02, -2.628e-02, -1.837e-02, -7.544e-02, -1.340e-01, 1.472e-03, 1.630e-03, 1.619e-02, 4.670e-02));
	r0 += mul(s1_0_0, M4(-1.807e-04, -8.493e-03, -1.548e-03, 2.339e-03, -1.282e-02, 7.302e-03, -3.823e-03, 4.567e-04, -5.050e-02, 3.901e-03, -2.270e-02, -5.030e-03, -1.251e-02, -4.461e-03, -8.762e-03, -1.747e-03));
	r0 += mul(s1_0_1, M4(-2.521e-01, 1.108e-02, 3.335e-03, -9.518e-03, 1.073e-01, -5.440e-02, 2.746e-02, -3.504e-02, 6.859e-02, 1.319e-02, 6.827e-03, -1.272e-02, 1.039e-02, 6.049e-02, -1.643e-02, -2.701e-02));
	r0 += mul(s1_0_2, M4(1.385e-02, 7.495e-02, 9.461e-03, 2.658e-03, -3.434e-02, -2.592e-01, 1.105e-02, 2.379e-02, -3.922e-03, 1.873e-02, 2.138e-07, -5.871e-05, 5.731e-03, 1.969e-03, 2.971e-03, -1.061e-02));
	r0 += mul(s1_1_0, M4(1.849e-02, 9.673e-03, 1.392e-02, -6.795e-03, 2.144e-03, 8.221e-04, -1.734e-02, -5.275e-03, -4.355e-02, 2.379e-02, -2.672e-02, 2.447e-02, -1.228e-01, 5.183e-02, 4.054e-02, -2.654e-02));
	r0 += mul(s1_1_1, M4(1.382e-02, 3.263e-02, -3.193e-01, 5.261e-02, -1.308e-02, 1.785e-02, -5.846e-02, -1.561e-03, 2.881e-01, -3.545e-01, 2.477e-01, -2.292e-01, -1.460e-01, -4.134e-01, 1.753e-01, 2.705e-01));
	r0 += mul(s1_1_2, M4(7.057e-03, 9.155e-02, 2.679e-02, 1.659e-01, 1.817e-01, 1.248e-01, 1.558e-01, -3.258e-01, -3.755e-03, 1.083e-01, -5.899e-03, 6.763e-02, 4.357e-04, 6.372e-02, -9.782e-04, 3.792e-03));
	r0 += mul(s1_2_0, M4(-5.381e-03, -3.625e-03, 1.098e-03, 4.264e-03, 5.231e-03, -5.379e-04, 1.198e-02, 4.362e-03, -1.254e-03, -5.687e-03, -2.820e-02, 5.567e-03, 6.950e-03, -1.392e-03, 1.658e-02, -5.703e-03));
	r0 += mul(s1_2_1, M4(-3.118e-02, -7.645e-03, 3.429e-02, -1.835e-03, 5.998e-03, -4.577e-03, 5.847e-02, 2.812e-03, -5.232e-02, 1.729e-02, 3.351e-02, -7.913e-02, -5.812e-03, 1.494e-02, 3.192e-02, 5.535e-02));
	r0 += mul(s1_2_2, M4(-3.688e-03, -9.226e-04, -1.059e-02, -6.102e-03, 1.050e-02, -9.982e-03, 2.118e-02, 1.092e-01, 1.210e-03, 1.028e-02, -3.106e-03, 7.642e-02, -2.117e-03, -4.885e-03, -6.225e-03, 3.384e-03));
	r0 += V4(-8.198e-09, -8.199e-09, -1.001e-09, -7.434e-09);
	r0 = r0;
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
