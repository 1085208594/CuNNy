// CuNNy veryfast NVL - https://github.com/funnyplanter/CuNNy

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.


//!MAGPIE EFFECT
//!VERSION 4
//!SORT_NAME CuNNy-D08N02

//!TEXTURE
Texture2D INPUT;

//!TEXTURE
//!WIDTH INPUT_WIDTH * 2
//!HEIGHT INPUT_HEIGHT * 2
Texture2D OUTPUT;

//!SAMPLER
//!FILTER POINT
SamplerState SP;

//!SAMPLER
//!FILTER LINEAR
SamplerState SL;

//!COMMON
#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 min16float4
#define M4 min16float4x4

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T0;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T1;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T2;

//!TEXTURE
//!WIDTH INPUT_WIDTH
//!HEIGHT INPUT_HEIGHT
//!FORMAT R8G8B8A8_UNORM
Texture2D T3;

//!PASS 1
//!DESC in
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN INPUT
//!OUT T0, T1
#define L0(x, y) min16float(dot(float3(0.299, 0.587, 0.114), O(INPUT, x, y).rgb))
void Pass1(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	min16float s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += V4(-8.981e-03, 2.017e-01, 6.486e-01, 2.329e-02) * s0_0_0;
	r1 += V4(-1.451e-02, -1.154e-01, -1.043e-01, -5.822e-02) * s0_0_0;
	r0 += V4(1.292e+00, 1.897e-01, -4.640e-02, 1.005e-01) * s0_0_1;
	r1 += V4(1.472e-02, 1.997e-01, 7.983e-02, 6.191e-01) * s0_0_1;
	r0 += V4(-1.078e-02, -3.702e-02, 1.605e-02, -8.002e-02) * s0_0_2;
	r1 += V4(1.096e-02, -9.545e-02, 1.265e-02, -1.076e-01) * s0_0_2;
	r0 += V4(-1.409e-02, -8.816e-01, -6.895e-01, -5.939e-02) * s0_1_0;
	r1 += V4(1.669e-02, -8.598e-02, -9.263e-01, -1.431e-01) * s0_1_0;
	r0 += V4(-1.280e+00, 2.520e-01, -6.968e-01, 6.488e-02) * s0_1_1;
	r1 += V4(1.035e+00, -8.655e-01, 9.512e-01, -1.224e-01) * s0_1_1;
	r0 += V4(3.261e-02, -1.961e-03, -3.691e-02, -7.099e-01) * s0_1_2;
	r1 += V4(-1.059e+00, -2.003e-01, -1.699e-02, -5.737e-02) * s0_1_2;
	r0 += V4(2.216e-02, -5.952e-03, -2.445e-02, -4.699e-02) * s0_2_0;
	r1 += V4(5.650e-04, 1.017e-01, 1.362e-02, -3.491e-03) * s0_2_0;
	r0 += V4(-2.114e-02, 3.729e-02, 8.174e-01, 4.142e-01) * s0_2_1;
	r1 += V4(-9.219e-03, 8.379e-01, -1.973e-02, 2.912e-02) * s0_2_1;
	r0 += V4(-6.337e-03, -2.009e-02, 9.968e-03, -2.419e-02) * s0_2_2;
	r1 += V4(3.840e-03, 2.261e-01, 4.179e-03, -4.289e-04) * s0_2_2;
	r0 += V4(-1.790e-03, -1.138e-02, 3.703e-04, -4.669e-03);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 += V4(-5.408e-04, -9.940e-04, -2.562e-03, 7.065e-03);
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}
//!PASS 2
//!DESC conv1
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T0, T1
//!OUT T2, T3
#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(3.259e-02, -2.568e-01, 1.936e-01, -2.280e-01, -7.160e-02, 2.888e-01, 1.590e-01, 2.943e-01, 7.252e-03, -1.056e-01, 5.793e-02, -3.097e-03, 6.621e-01, -3.290e-01, -6.885e-01, -4.522e-01));
	r1 += mul(s0_0_0, M4(-2.653e-02, 7.316e-04, -8.269e-02, -1.874e-01, -1.479e-01, 2.277e-02, 9.585e-02, 3.049e-01, 1.014e-01, 9.228e-03, -1.516e-02, -5.088e-02, 7.909e-01, -1.359e-02, -1.382e-01, 7.025e-01));
	r0 += mul(s0_0_1, M4(-1.995e-01, -2.010e+00, 2.802e-01, -2.403e-01, -2.155e-01, 8.092e-01, 9.345e-03, 1.965e-01, -2.836e-02, -1.277e+00, -3.833e-01, 7.448e-02, -8.228e-01, -3.058e-01, -2.603e-01, 4.066e-02));
	r1 += mul(s0_0_1, M4(-2.309e-01, -5.278e-02, -5.931e-02, -3.804e-01, -2.422e-01, -6.447e-02, 1.453e-01, -1.002e-01, 9.173e-02, 1.117e-01, 1.035e-01, -1.996e-01, -7.133e+00, 1.368e-01, 5.346e-02, 2.299e-01));
	r0 += mul(s0_0_2, M4(-1.781e-01, -4.756e-01, 1.780e-01, -4.445e-02, 2.118e-01, 1.931e+00, -1.034e+00, 2.626e-01, 1.449e-01, 5.492e-02, -7.720e-02, 4.621e-01, 2.263e-01, 6.845e-02, -2.007e-01, -4.746e-02));
	r1 += mul(s0_0_2, M4(-1.600e-03, -1.742e-02, 5.922e-02, 1.285e-01, 6.081e-01, 7.165e-02, -2.552e-01, 1.507e-01, 2.595e-01, 7.105e-02, 2.290e-01, 3.763e-01, 1.202e-01, -4.055e-02, -8.460e-02, -3.021e-01));
	r0 += mul(s0_1_0, M4(-8.865e-02, -1.192e-01, -3.034e-01, -6.647e-01, 2.346e-02, 3.099e-01, 3.135e-01, -5.312e-02, -1.475e-01, 1.646e-01, 1.194e-01, 5.521e-02, -2.319e-01, -2.533e-01, -4.888e+00, 6.823e-01));
	r1 += mul(s0_1_0, M4(1.894e-01, 6.392e-02, -1.657e-02, -1.191e+00, -1.680e-01, 1.456e-02, 5.041e-02, -2.495e-01, 9.054e-02, 7.877e-02, 1.017e-01, 4.156e-03, 1.048e-01, -1.460e-01, 8.758e-02, -1.023e-01));
	r0 += mul(s0_1_1, M4(1.908e-01, 4.005e-01, -2.270e+00, 1.577e-01, -6.082e-01, 2.507e-01, -1.496e-01, 3.929e-01, -3.840e-01, 1.049e-01, -3.765e-01, 8.730e-01, 1.156e-01, -8.692e-01, -2.588e-01, 1.126e-01));
	r1 += mul(s0_1_1, M4(8.773e-01, 2.510e-01, 3.574e-01, 2.147e-01, 2.524e-02, 4.643e-02, -3.248e-02, 1.114e+00, 2.892e-01, 1.460e-01, 1.054e-01, 4.991e-02, -1.052e+00, -1.450e-01, -3.193e-01, 1.080e-01));
	r0 += mul(s0_1_2, M4(-3.486e-01, -1.051e-01, 9.863e-01, -1.129e-01, 3.179e-01, -1.802e+00, 6.223e-01, -6.973e-01, 6.557e-02, -9.253e-02, 1.464e+00, 4.971e-01, 4.113e-01, 1.597e-01, 1.075e-01, 4.595e-02));
	r1 += mul(s0_1_2, M4(-1.926e+00, 4.235e-02, 3.153e-01, 2.055e-01, -4.865e-01, -3.320e-01, -3.018e-01, 1.751e-01, 1.669e-01, 8.488e-02, 2.142e-01, 6.059e-01, 1.572e-01, -2.214e-02, -4.528e-02, -3.492e-01));
	r0 += mul(s0_2_0, M4(1.245e-01, 9.793e-02, -2.778e-01, 2.959e-01, -4.950e-01, 2.263e-01, 4.632e-02, -1.237e-01, -1.773e-01, 2.662e-01, -6.716e-02, 5.954e-02, -3.171e-01, 3.034e-02, -6.747e-02, -6.838e-01));
	r1 += mul(s0_2_0, M4(9.299e-02, -2.325e-02, -1.091e-01, -4.226e-01, 2.221e-01, 9.405e-02, 9.943e-02, 7.602e-02, -1.825e-02, 4.626e-02, 2.266e-02, -1.123e-01, -1.670e-01, 6.522e-02, 1.341e-01, -3.843e-01));
	r0 += mul(s0_2_1, M4(7.345e-01, 1.585e-01, -9.160e-01, 5.125e-04, -1.245e-01, 2.016e-01, 7.469e-01, -3.361e-02, -1.532e-01, 2.633e-01, -3.191e-02, 3.076e-01, -5.434e-01, 7.458e-02, 2.144e-01, 2.978e-01));
	r1 += mul(s0_2_1, M4(8.762e-01, 1.404e-02, -5.677e-02, 8.446e-01, -1.386e-02, -1.812e-01, 1.918e-01, 2.694e-03, 1.977e-01, 1.070e-01, 1.252e-01, 2.258e-01, 7.777e-02, 8.598e-02, 1.957e-01, -1.300e-03));
	r0 += mul(s0_2_2, M4(-2.057e-02, 2.319e-01, 5.776e-01, -3.045e-01, -1.104e-02, 5.785e-01, 1.695e-01, 4.114e-01, -1.428e-01, 5.062e-02, 2.468e-01, 2.704e-01, 4.030e-02, -1.962e-01, -1.430e-01, 9.674e-02));
	r1 += mul(s0_2_2, M4(-8.965e-01, -3.448e-02, -1.121e-01, -5.103e-02, 3.050e-01, 7.552e-03, 8.761e-02, 4.401e-01, -4.409e-01, 1.196e-01, 1.170e-01, 1.627e-01, 1.535e-02, -1.033e-01, -7.515e-02, -1.694e-01));
	r0 += mul(s1_0_0, M4(-2.344e-01, -1.936e+00, 4.678e-01, -3.081e-01, 3.579e-02, 4.763e-01, 7.289e-01, 1.205e-01, -6.145e-02, -5.173e-02, -1.786e-01, -5.212e-02, 6.946e-02, 6.664e-02, -6.563e-02, 2.244e-01));
	r1 += mul(s1_0_0, M4(-2.290e-01, 5.650e-02, -2.029e-02, -8.574e-01, -2.686e-01, 1.800e-02, 8.960e-02, 4.757e-02, 2.329e-01, -2.166e-02, -4.807e-02, -3.977e-01, -5.134e-02, -2.710e-02, -2.049e-02, 4.420e-01));
	r0 += mul(s1_0_1, M4(-2.307e-01, -6.199e-01, 1.561e+00, -1.831e-01, -5.699e-03, -8.731e-01, 8.597e-01, -4.168e-01, 2.788e-01, -5.449e-01, -3.732e-01, 5.899e-02, 4.459e-01, 2.303e-01, -3.622e-01, -8.322e-02));
	r1 += mul(s1_0_1, M4(-5.834e-01, 9.058e-02, 1.892e-01, 2.163e-01, -4.469e-01, -1.488e-01, -2.669e-02, -9.173e-01, 6.035e-01, 1.479e-01, -2.702e-02, -2.529e-01, 2.480e-01, 2.506e-02, -1.338e-02, 1.651e-01));
	r0 += mul(s1_0_2, M4(-1.823e-01, 7.728e-02, 2.744e-01, -9.864e-04, -7.566e-02, -4.604e-01, -6.948e-01, -8.513e-02, 1.322e-01, -6.660e-01, -4.576e-01, 6.878e-02, 1.704e-01, 3.635e-01, 1.570e-01, -5.630e-02));
	r1 += mul(s1_0_2, M4(-3.976e-01, -1.272e-02, 5.747e-02, 2.095e-01, 4.858e-01, 2.373e-02, 1.021e-02, -4.524e-02, 2.046e-01, 1.300e-02, 2.714e-01, 4.855e-02, -2.238e-01, 1.157e-02, -8.146e-03, -1.678e-01));
	r0 += mul(s1_1_0, M4(1.775e-01, 1.859e-02, -2.677e+00, 1.144e-02, 1.354e-01, 2.349e-01, -3.165e-01, -2.262e-01, -1.141e-01, -1.280e-01, -6.723e-02, -1.838e-01, 3.423e-01, 1.411e-01, -1.142e-01, 6.698e-02));
	r1 += mul(s1_1_0, M4(7.060e-02, 5.033e-01, 3.804e-03, 1.338e-01, -2.118e-01, 1.124e-01, -1.201e-04, 5.761e-01, -1.097e-01, 1.947e-03, -2.470e-02, -1.906e-02, -1.794e-01, 7.592e-02, 2.523e-04, 1.157e+00));
	r0 += mul(s1_1_1, M4(7.270e-01, 8.887e-01, -9.234e-01, 3.457e-03, 5.769e-02, -5.236e-02, -9.241e-01, -3.149e-01, 6.208e-02, 2.529e-02, -1.407e-01, -2.635e-01, -8.279e-01, 8.799e-01, -6.255e-02, -1.274e-01));
	r1 += mul(s1_1_1, M4(-6.085e-01, -1.628e-01, -3.830e-02, -2.397e-02, -1.110e+00, 1.856e-01, -7.081e-02, -7.036e-01, 2.368e-02, -1.882e-01, -1.893e-01, -1.608e+00, -1.920e+00, -7.711e-02, 1.693e-01, -7.843e-01));
	r0 += mul(s1_1_2, M4(-1.995e-01, -2.245e-01, 1.585e-01, 7.018e-02, 5.453e-02, 2.407e-01, -1.436e+00, 1.168e-01, -3.537e-01, 5.048e-01, -8.067e-01, 4.192e-01, 3.848e-01, -7.050e-01, -3.681e-01, -2.423e-02));
	r1 += mul(s1_1_2, M4(-2.089e-01, 2.951e-02, 6.260e-02, 1.652e-01, 2.027e-01, 2.416e-01, 4.619e-02, -1.912e-01, -9.297e-01, 5.108e-01, 8.379e-01, 5.162e-01, 2.235e+00, 3.283e-03, -1.968e-01, -4.911e-01));
	r0 += mul(s1_2_0, M4(-1.901e-01, -1.215e-01, -6.048e-01, -1.021e-01, 2.222e-01, -5.815e-02, 7.633e-02, 2.627e-01, 1.852e-01, -1.831e-01, 3.537e-03, 8.332e-02, 5.322e-01, -4.475e-01, 1.023e-01, 6.819e-02));
	r1 += mul(s1_2_0, M4(2.501e-01, 2.550e-02, -1.581e-01, -3.368e-01, -1.278e-02, -5.525e-02, -5.474e-02, 1.909e-01, 9.035e-02, -6.189e-02, -8.030e-02, -1.366e-01, -3.680e-01, 6.009e-02, 2.484e-01, 5.277e-01));
	r0 += mul(s1_2_1, M4(3.753e-01, 2.249e-01, -5.635e-01, 2.251e-02, -2.603e-02, -2.829e-01, -5.684e-02, -5.668e-01, 5.654e-01, -1.534e-01, 4.466e-02, 8.070e-03, -1.036e+00, -3.124e-01, 1.449e+00, -4.056e-02));
	r1 += mul(s1_2_1, M4(7.051e-01, 1.502e-01, 5.230e-02, 1.171e-01, -3.164e-02, -1.166e-01, -1.915e-01, -1.782e-01, 3.343e-02, 1.747e-01, 1.626e-01, 7.816e-01, -7.051e-01, -2.329e-01, -4.891e-01, -1.012e+00));
	r0 += mul(s1_2_2, M4(-4.187e-02, 2.366e-01, 1.682e-02, -1.146e-01, 1.343e-01, 1.439e-01, -1.860e-01, -1.353e-01, 6.347e-02, -3.467e-01, 3.612e-01, -5.879e-01, -6.143e-02, -1.310e-01, -6.602e-01, -2.421e-02));
	r1 += mul(s1_2_2, M4(-8.864e-02, 3.418e-02, -8.587e-03, 1.693e-01, 1.867e-01, -8.157e-03, -4.895e-02, -1.853e-02, -7.168e-01, 7.216e-02, -9.039e-02, -1.572e-01, 9.638e-01, 1.626e-01, 3.149e-01, 1.733e-01));
	r0 += V4(-1.162e-02, -1.846e-02, -2.313e-02, -5.436e-03);
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 += V4(-1.028e-02, -4.759e-04, -1.542e-03, -3.282e-03);
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}
//!PASS 3
//!DESC conv2
//!BLOCK_SIZE 8
//!NUM_THREADS 64
//!IN T2, T3
//!OUT T0
#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))
void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 += mul(s0_0_0, M4(-2.882e-02, -2.102e-02, -2.623e-02, 5.353e-03, 5.017e-02, 2.295e-02, 9.936e-02, 1.042e-02, 8.954e-03, -2.037e-02, -7.343e-02, -4.450e-02, 2.060e-02, -3.177e-02, -1.515e-01, -4.470e-02));
	r0 += mul(s0_0_1, M4(1.285e-01, -5.990e-02, -7.196e-02, 5.992e-02, -6.278e-02, 5.760e-02, -2.122e-03, -1.177e-02, -1.111e-01, 2.244e-02, -5.506e-02, -5.432e-02, -1.615e-01, -2.814e-01, 3.035e-02, -2.717e-01));
	r0 += mul(s0_0_2, M4(6.301e-02, -3.704e-02, 3.388e-02, 6.761e-02, 3.963e-02, -6.603e-03, 3.917e-02, 2.130e-02, -1.669e-03, 5.174e-04, -2.140e-02, -8.148e-03, -3.183e-01, 2.510e-01, -6.622e-02, -1.262e-01));
	r0 += mul(s0_1_0, M4(-1.155e-01, -1.179e-01, -6.711e-02, -3.820e-02, 5.405e-02, 3.357e-02, -1.423e-01, 2.994e-02, -2.347e-02, -8.863e-02, -4.035e-01, -2.900e-01, 4.874e-02, 4.857e-03, -5.694e-02, -7.125e-02));
	r0 += mul(s0_1_1, M4(1.968e-01, 1.893e-01, 2.106e-01, -4.857e-02, -1.489e-02, -2.901e-01, -3.908e-01, 7.104e-02, -2.900e-01, -1.860e-01, -3.525e-01, -9.646e-02, 1.119e-02, -1.186e-01, -3.209e-01, 1.850e-01));
	r0 += mul(s0_1_2, M4(-2.881e-01, -1.028e-01, -1.093e-02, -6.213e-02, 4.533e-02, 3.841e-03, -2.066e-02, -1.629e-02, -1.271e-01, -2.832e-02, -1.384e-01, -7.984e-02, -1.463e-01, -1.327e-01, -9.438e-02, -1.834e-01));
	r0 += mul(s0_2_0, M4(-6.369e-03, -6.568e-02, -8.762e-03, -7.300e-02, 9.411e-02, 3.737e-02, 1.128e-02, -1.448e-02, 1.149e-01, 6.253e-02, 1.216e-01, -5.311e-02, -8.234e-03, -1.453e-02, 1.525e-03, -5.865e-02));
	r0 += mul(s0_2_1, M4(3.287e-02, -5.993e-02, -5.507e-02, 5.015e-02, -1.864e-01, -7.772e-03, -1.761e-02, -1.207e-01, -3.760e-01, -1.065e-02, 1.861e-02, -2.906e-01, -7.152e-02, 5.781e-02, 3.165e-02, -8.202e-02));
	r0 += mul(s0_2_2, M4(-1.773e-02, -1.553e-02, 7.141e-03, 6.683e-03, -1.191e-01, -9.434e-02, -6.243e-02, -8.123e-02, -1.282e-01, -2.408e-02, -1.750e-02, -7.541e-02, -4.162e-02, 2.263e-02, 1.304e-02, -1.943e-02));
	r0 += mul(s1_0_0, M4(-5.343e-02, -1.274e-01, -2.077e-01, -9.379e-02, 2.374e-02, -3.744e-02, 1.307e-01, -3.303e-02, -3.772e-02, -1.901e-02, -1.699e-01, -9.618e-03, 1.151e-02, 2.269e-02, -1.470e-02, 1.654e-02));
	r0 += mul(s1_0_1, M4(-1.819e-02, -1.104e-01, 3.298e-02, 7.188e-03, -1.291e-01, 3.189e-01, 8.618e-02, -9.739e-02, 3.589e-02, -1.859e-01, -5.239e-02, 4.858e-02, 5.370e-02, 5.016e-02, 2.433e-02, 5.505e-02));
	r0 += mul(s1_0_2, M4(-2.934e-02, 6.544e-02, -2.258e-02, -1.156e-02, -3.694e-02, 1.646e-03, -5.806e-02, -5.068e-02, 1.227e-02, 7.895e-03, 1.757e-02, 6.205e-03, 1.955e-03, -5.238e-02, -6.714e-02, 6.200e-03));
	r0 += mul(s1_1_0, M4(-4.470e-02, -9.770e-02, -1.136e-01, -1.286e-01, -5.674e-03, 1.618e-01, -6.444e-02, 1.213e-01, -9.254e-02, -1.774e-01, 2.510e-01, 4.013e-02, -1.173e-01, -3.753e-02, 8.030e-02, -2.111e-02));
	r0 += mul(s1_1_1, M4(-8.381e-01, -3.432e-01, -1.440e-01, -2.065e-02, 5.416e-01, 1.145e+00, 6.473e-01, 8.546e-01, 3.808e-01, -1.308e-01, 6.582e-01, 1.584e-01, -1.539e-02, -2.060e-01, -5.221e-01, -3.529e-01));
	r0 += mul(s1_1_2, M4(1.652e-01, 9.267e-02, -6.491e-02, -2.462e-02, 1.197e-01, 2.871e-01, -2.595e-01, -1.597e-01, 8.083e-02, -1.220e-01, 2.095e-01, 1.390e-01, -2.803e-01, -1.039e-02, -7.641e-02, -1.062e-01));
	r0 += mul(s1_2_0, M4(-1.165e-01, -2.114e-01, -1.611e-01, -2.333e-01, 1.019e-02, -1.415e-02, 1.771e-02, -3.347e-02, -9.654e-02, -9.058e-02, -7.083e-02, -1.396e-02, -2.730e-02, 2.646e-03, 2.163e-02, 7.093e-02));
	r0 += mul(s1_2_1, M4(-7.091e-01, -1.754e-01, 1.643e-02, -1.296e-01, -4.698e-02, 1.234e-01, 6.860e-02, 1.789e-01, 4.113e-01, -2.144e-01, -1.258e-01, 1.821e-01, -1.219e-01, -4.979e-02, 3.339e-02, -1.304e-01));
	r0 += mul(s1_2_2, M4(7.880e-02, -1.438e-02, -5.120e-03, -1.827e-02, 8.350e-02, -1.164e-01, -2.370e-02, -8.716e-02, -5.443e-02, 9.305e-02, 4.114e-02, 9.216e-02, -1.861e-02, -4.366e-02, -2.490e-02, -2.490e-02));
	r0 += V4(-7.242e-04, -1.325e-03, -5.829e-04, -6.292e-04);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
}
//!PASS 4
//!DESC out-shuffle
//!BLOCK_SIZE 16
//!NUM_THREADS 64
//!IN INPUT, T0
//!OUT OUTPUT
#define L0(x, y) V4(O(T0, x, y))
void Pass4(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = (Rmp8x8(tid.x) << 1) + blockStart;
	uint2 sz = GetOutputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = ((gxy >> 1) + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2;
	V4 r0 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	r0 += mul(s0_0_0, M4(1.403e-02, 1.272e-02, 1.266e-02, 4.162e-03, 1.179e-01, 2.984e-02, -7.327e-05, 1.139e-02, -3.210e-02, -7.042e-03, -1.902e-03, -6.407e-03, -1.680e-02, -2.924e-02, -6.065e-03, 4.533e-03));
	r0 += mul(s0_0_1, M4(1.111e-01, -2.135e-01, -3.270e-03, 7.572e-02, 1.288e-01, 1.829e-01, 3.422e-03, -1.454e-02, -6.421e-02, -5.280e-02, -1.559e-02, -5.359e-03, -5.169e-02, 1.353e-01, 2.927e-02, -3.077e-02));
	r0 += mul(s0_0_2, M4(-1.521e-02, -3.553e-02, 4.206e-03, -1.595e-02, 1.003e-02, 2.447e-02, -2.187e-03, 8.882e-03, -1.137e-03, -2.557e-02, 1.871e-03, -8.265e-03, -2.266e-02, 1.092e-01, -5.953e-03, -3.515e-03));
	r0 += mul(s0_1_0, M4(1.470e-01, 8.518e-03, 7.208e-02, 1.714e-02, -2.114e-01, 6.323e-02, -2.940e-02, -3.314e-03, 1.636e-01, -1.025e-02, 6.106e-02, -1.974e-02, 5.083e-02, -3.771e-02, 6.421e-02, 1.192e-02));
	r0 += mul(s0_1_1, M4(3.037e-01, -1.124e-01, 2.941e-01, -5.928e-01, -5.709e-02, -5.957e-01, 2.095e-01, -2.856e-02, -5.488e-01, 1.229e-02, 2.026e-01, 2.868e-01, -3.820e-02, 3.776e-01, -1.035e+00, -5.215e-02));
	r0 += mul(s0_1_2, M4(-1.002e-02, -2.508e-02, -2.704e-02, -2.353e-02, -1.871e-02, 1.821e-01, 7.532e-04, 1.294e-01, 7.993e-02, -2.480e-01, 2.450e-03, 5.623e-02, -1.686e-02, 1.614e-01, 2.903e-02, -5.945e-02));
	r0 += mul(s0_2_0, M4(-1.116e-02, 3.814e-02, 4.504e-02, 1.626e-02, -3.582e-04, -5.760e-02, -8.701e-02, 7.339e-03, 1.279e-02, 3.943e-02, 6.120e-02, -2.132e-02, -3.556e-03, -9.012e-03, 1.440e-02, 3.351e-04));
	r0 += mul(s0_2_1, M4(-2.557e-02, 3.370e-03, 7.347e-02, 1.509e-01, 8.374e-03, 6.306e-02, -4.185e-02, -2.398e-01, 2.338e-02, -1.322e-03, 7.798e-02, 2.065e-01, 6.051e-03, -3.904e-02, 5.958e-02, 2.856e-02));
	r0 += mul(s0_2_2, M4(-2.480e-03, -6.162e-03, -1.407e-04, -3.082e-02, 1.226e-02, 2.971e-02, 1.066e-03, 1.184e-01, -4.253e-04, 6.406e-03, 1.798e-02, -2.536e-02, 1.463e-03, -2.973e-02, -9.337e-03, 1.307e-02));
	r0 += V4(-4.418e-11, 6.557e-09, -7.025e-11, -2.816e-11);
	r0 = r0;
	static const float3x3 RY = {0.299, 0.587, 0.114, -0.169, -0.331, 0.5, 0.5, -0.419, -0.081}, YR = {1, -0.00093, 1.401687, 1, -0.3437, -0.71417, 1, 1.77216, 0.00099};
	float2 opt = float2(GetOutputPt());
	float2 fpos = (float2(gxy) + 0.5) * opt;
	float3 yuv;
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.x), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 0.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 0)] = float4(mul(YR, float3(saturate(yuv.r + r0.y), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(0.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(0, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.z), yuv.yz)), 1.0);
	yuv = mul(RY, INPUT.SampleLevel(SL, fpos + float2(1.0, 1.0) * opt, 0).rgb);
	OUTPUT[gxy + int2(1, 1)] = float4(mul(YR, float3(saturate(yuv.r + r0.w), yuv.yz)), 1.0);
}
